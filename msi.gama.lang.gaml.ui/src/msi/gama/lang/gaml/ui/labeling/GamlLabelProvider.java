/*
* generated by Xtext
*/
package msi.gama.lang.gaml.ui.labeling;

import msi.gama.lang.gaml.gaml.*;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class GamlLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public GamlLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}


	// Model : GAMA icon
	String image(Model ele) {
		return "icon-16x16x32b.gif";
	}
	// Import
	String text(Import ele) {
		String display = ele.getImportURI();
		int index = display.lastIndexOf('/');
		if (index>=0) {
			display = display.substring(index+1);
		}
		return display;
	}
	String image(Import ele) {
		return "_include.png";
	}
	String image(SetEval ele) {
		return "_set.png";
	}
	String text(SetEval ele) {
		return "set";
	}
	// Statement : keyword.value
	String image(SubStatement ele) {
		String kw = ele.getKey().getRef().getName();
		if (ele instanceof Definition && (kw.equals("var") || kw.equals("const"))) {
			for (FacetExpr f : ele.getFacets()) {
				if (f.getKey().getRef().getName().equals("type") && f.getExpr() instanceof VariableRef) {
					VariableRef type = (VariableRef) f.getExpr();
					return "_"+type.getRef().getName()+".png";
				}
			}
		}
		return "_"+kw+".png";
	}
	String text(Evaluation ele) {
		return ele.getKey().getRef().getName();
	}
	// dirty image for now (debug purpose, proposal provider)
	String image(DefFacet ele) {
		return "gaml_facet.png";
	}
	String image(DefKeyword ele) {
		return "gaml_keyword.png";
	}
	String image(DefBinaryOp ele) {
		return "gaml_binaryop.png";
	}
	String image(DefReserved ele) {
		return "gaml_reserved.png";
	}
	String image(DefUnit ele) {
		return "gaml_unit.png";
	}
}
