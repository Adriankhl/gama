#if __VERSION__ >= 130
	#define varying in
	out vec4 mgl_FragColor;
	#define texture2D texture
	#define gl_FragColor mgl_FragColor
#endif
		
#ifdef GL_ES
	precision mediump float;
	precision mediump int;
#endif
		
varying   vec4    varying_Color;
varying   vec3    surfaceNormal;
varying   vec3    toLightVector;
varying   vec3 	  toCameraVector;
varying   vec2    pass_textureCoords;
varying   float   varying_useNormals;
varying   vec4    varying_light1Color;

uniform   vec3    ambientLight;
uniform   float   shineDamper;
uniform   float   reflectivity;
uniform   sampler2D textureSampler;
uniform   float   useTexture; // 0 for no, 1 for yes

void main (void)
{
	vec4 inputColor = varying_Color;
	
	if (varying_useNormals > 0.5)
	{
		if (useTexture > 0.5)
		{
			inputColor = texture(textureSampler,pass_textureCoords);
		}
	
		vec3 unitNormal = normalize(surfaceNormal);
		if (!gl_FrontFacing)
		{
			unitNormal = -normalize(surfaceNormal);
		}
		
		vec3 unitLightVector = normalize(toLightVector);
			
		float nDot1 = dot(unitNormal,unitLightVector);
		
		float brightnessR = max(nDot1,ambientLight.x);
		float brightnessG = max(nDot1,ambientLight.y);
		float brightnessB = max(nDot1,ambientLight.z);
		vec3 diffuse = vec3(brightnessR*varying_light1Color.x+ambientLight.x,brightnessG*varying_light1Color.y+ambientLight.y,brightnessB*varying_light1Color.z+ambientLight.z);
		
		vec3 unitVectorToCamera = normalize(toCameraVector);
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection,unitNormal);
		
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor,0.0);
		float damperFactor = pow(specularFactor,shineDamper);
		vec3 finalSpecular = damperFactor * reflectivity * varying_light1Color;
		
		gl_FragColor = vec4(diffuse,1.0) * inputColor + vec4(finalSpecular,inputColor.a);
	}
	else
	{
		gl_FragColor = inputColor;
	}
}