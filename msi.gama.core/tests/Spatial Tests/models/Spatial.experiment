/**
* Name: Spatial Operators
* Author: Patrick Taillandier
* Description: Tests various spatial operators (at_distance, closest_to, distance_to) with continuous and grid topology
* Tags: topology, grid,test
*/

model SpatialTest

species dummy ;
grid cell width: 10 height: 10 neighbors: 4;

global {
	init {
		create dummy with: [location :: {5,5}];
		create dummy with: [location :: {8,9}];
		create dummy with: [location :: {14,6}];
		create dummy with: [location :: {35,55}];
		create dummy with: [location :: {25,75}];
		create dummy with: [location :: {56,80}];
		create dummy with: [location :: {10,70}];
		create dummy with: [location :: {80,8}];
		create dummy with: [location :: {34,78}];
		create dummy with: [location :: {67,32}];
	}
}
experiment TopologyTests type: test {
	test "closest_to with continuous topology"{
		dummy closest_dummy;
		using topology(world) {
			closest_dummy <- dummy closest_to dummy(8);
		}
		assert closest_dummy = dummy(4);
	}
	test "closest_to with grid topology" {
		dummy closest_dummy;
		using topology(world) {
			using topology(cell) {closest_dummy <- dummy closest_to dummy(8);}
		}
		assert closest_dummy = dummy(4);
	}
	test "closest_to cell with grid topology" {
		list<cell> neighborhood;
		loop times: 100 {
			using topology(cell){
				neighborhood<< cell closest_to cell(40);	
			}
		}
		neighborhood <- remove_duplicates(neighborhood);
		assert empty(neighborhood - cell(40).neighbors);
	}
	
	test "at_distance with continuous topology" {
		list<dummy> neighborhood;
		ask dummy(8) {
			neighborhood <- dummy at_distance(30);
		}
		assert empty(neighborhood - [dummy(3),dummy(4),dummy(5),dummy(6)]);
	}
	
	test "at_distance with grid topology" {
		list<dummy> neighborhood;
		ask dummy(8) {
			using topology(cell) {neighborhood <- dummy at_distance(4);}
		}
		assert empty(neighborhood - [dummy(3),dummy(4),dummy(5),dummy(6)]);
	}
	
	test "at_distance to cell with grid topology" {
		list<cell> neighborhood;
		ask cell(40) {
			using topology(cell) {neighborhood <- cell at_distance(2);}
		}
		write neighborhood;
		assert empty(neighborhood - [cell(42),cell(60),cell(30),cell(31),cell(51),cell(50),cell(20),cell(41)]);
	}
	
	test "distance_to with continuous topology" {
		float distance <- dummy(8) distance_to dummy(9);
		assert (distance with_precision 3)= 56.613;
	}
	test "distance_to with grid topology" {
		float distance;
		using topology(cell) {distance <- dummy(8) distance_to dummy(9);}
		assert distance = 7.0;
	}
	
	
	
}
