/**
 *  OpOpMatrix_related__operatorsTest
 *  Author: automatic generator
 *  Description: Unity Test of operators belonging to category OpMatrix_related__operatorsTest.
 */

experiment OpMatrix_related__operatorsTestTests type: test {	

	
		test append_horizontallyOp {
			matrix var0 <- matrix([[1.0,2.0],[3.0,4.0]]) append_horizontally matrix([[1,2],[3,4]]); 	// var0 equals matrix([[1.0,2.0],[3.0,4.0],[1.0,2.0],[3.0,4.0]])
			assert var0 = matrix([[1.0,2.0],[3.0,4.0],[1.0,2.0],[3.0,4.0]]); 

		}
	
		test append_verticallyOp {
			matrix var0 <- matrix([[1,2],[3,4]]) append_vertically matrix([[1,2],[3,4]]); 	// var0 equals matrix([[1,2,1,2],[3,4,3,4]])
			assert var0 = matrix([[1,2,1,2],[3,4,3,4]]); 

		}
	
		test column_atOp {
			list var0 <- matrix([["el11","el12","el13"],["el21","el22","el23"],["el31","el32","el33"]]) column_at 2; 	// var0 equals ["el31","el32","el33"]
			assert var0 = ["el31","el32","el33"]; 

		}
	
		test columns_listOp {
			list<list> var0 <- columns_list(matrix([["el11","el12","el13"],["el21","el22","el23"],["el31","el32","el33"]])); 	// var0 equals [["el11","el12","el13"],["el21","el22","el23"],["el31","el32","el33"]]
			assert var0 = [["el11","el12","el13"],["el21","el22","el23"],["el31","el32","el33"]]; 

		}
	
		test detOp {

		}
	
		test determinantOp {
			float var0 <- determinant(matrix([[1,2],[3,4]])); 	// var0 equals -2
			assert var0 = -2; 

		}
	
		test DivideOp {
			point var0 <- {5, 7.5} / 2.5; 	// var0 equals {2, 3}
			assert var0 = {2, 3}; 
			point var1 <- {2,5} / 4; 	// var1 equals {0.5,1.25}
			assert var1 = {0.5,1.25}; 
			float var2 <- 3 / 5.0; 	// var2 equals 0.6
			assert var2 = 0.6; 
			rgb var3 <- rgb([255, 128, 32]) / 2.5; 	// var3 equals rgb([102,51,13])
			assert var3 = rgb([102,51,13]); 
			rgb var4 <- rgb([255, 128, 32]) / 2; 	// var4 equals rgb([127,64,16])
			assert var4 = rgb([127,64,16]); 

		}
	
		test eigenvaluesOp {
			list<float> var0 <- eigenvalues(matrix([[5,-3],[6,-4]])); 	// var0 equals [2.0000000000000004,-0.9999999999999998]
			assert var0 = [2.0000000000000004,-0.9999999999999998]; 

		}
	
		test index_ofOp {
			int var1 <-  "abcabcabc" index_of "ca"; 	// var1 equals 2
			assert var1 = 2; 
			int var2 <- [1,2,3,4,5,6] index_of 4; 	// var2 equals 3
			assert var2 = 3; 
			int var3 <- [4,2,3,4,5,4] index_of 4; 	// var3 equals 0
			assert var3 = 0; 
			point var4 <- matrix([[1,2,3],[4,5,6]]) index_of 4; 	// var4 equals {1.0,0.0}
			assert var4 = {1.0,0.0}; 
			unknown var0 <- [1::2, 3::4, 5::6] index_of 4; 	// var0 equals 3
			assert var0 = 3; 

		}
	
		test inverseOp {
			matrix<float> var0 <- inverse(matrix([[5,-3],[6,-4]])); 	// var0 equals [2.0000000000000004,-0.9999999999999998]
			assert var0 = [2.0000000000000004,-0.9999999999999998]; 

		}
	
		test last_index_ofOp {
			unknown var0 <- [1::2, 3::4, 5::4] last_index_of 4; 	// var0 equals 5
			assert var0 = 5; 
			point var1 <- matrix([[1,2,3],[4,5,4]]) last_index_of 4; 	// var1 equals {1.0,2.0}
			assert var1 = {1.0,2.0}; 
			int var2 <- [1,2,3,4,5,6] last_index_of 4; 	// var2 equals 3
			assert var2 = 3; 
			int var3 <- [4,2,3,4,5,4] last_index_of 4; 	// var3 equals 5
			assert var3 = 5; 
			int var4 <- "abcabcabc" last_index_of "ca"; 	// var4 equals 5
			assert var4 = 5; 

		}
	
		test MinusOp {
			date var0 <- date('2000-01-01') - 200; 	// var0 equals date('2000-01-01')
			assert var0 = date('2000-01-01'); 
			rgb var1 <- rgb([255, 128, 32]) - 3; 	// var1 equals rgb([252,125,29])
			assert var1 = rgb([252,125,29]); 
			matrix var2 <- 3.5 - matrix([[2,5],[3,4]]); 	// var2 equals matrix([[1.5,-1.5],[0.5,-0.5]])
			assert var2 = matrix([[1.5,-1.5],[0.5,-0.5]]); 
			list<int> var3 <- [1,2,3,4,5,6] - [2,4,9]; 	// var3 equals [1,3,5,6]
			assert var3 = [1,3,5,6]; 
			list<int> var4 <- [1,2,3,4,5,6] - [0,8]; 	// var4 equals [1,2,3,4,5,6]
			assert var4 = [1,2,3,4,5,6]; 
			list<int> var5 <- [1,2,3,4,5,6] - 2; 	// var5 equals [1,3,4,5,6]
			assert var5 = [1,3,4,5,6]; 
			list<int> var6 <- [1,2,3,4,5,6] - 0; 	// var6 equals [1,2,3,4,5,6]
			assert var6 = [1,2,3,4,5,6]; 
			point var7 <- {1, 2} - {4, 5}; 	// var7 equals {-3.0, -3.0}
			assert var7 = {-3.0, -3.0}; 
			int var8 <- 1 - 1; 	// var8 equals 0
			assert var8 = 0; 
			int var9 <- 1.0 - 1; 	// var9 equals 0.0
			assert var9 = 0.0; 
			int var10 <- 3.7 - 1.2; 	// var10 equals 2.5
			assert var10 = 2.5; 
			int var11 <- 3 - 1.2; 	// var11 equals 1.8
			assert var11 = 1.8; 
			geometry var12 <- shape - 5; 	// var12 equals a geometry corresponding to the geometry of the agent applying the operator reduced by a distance of 5
			//geometry var13 <- geom1 - geom2; 	// var13 equals a geometry corresponding to difference between geom1 and geom2
			geometry var14 <- rectangle(10,10) - [circle(2), square(2)]; 	// var14 equals rectangle(10,10) - (circle(2) + square(2))
			assert var14 = rectangle(10,10) - (circle(2) + square(2)); 
			rgb var15 <- rgb([255, 128, 32]) - rgb('red'); 	// var15 equals rgb([0,128,32])
			assert var15 = rgb([0,128,32]); 
			float var16 <- date('2000-01-01') - date('2010-01-02'); 	// var16 equals 86400
			assert var16 = 86400; 
			point var17 <- {1, 2} - 4.5; 	// var17 equals {-3.5, -2.5, -4.5}
			assert var17 = {-3.5, -2.5, -4.5}; 
			point var18 <- {1, 2} - 4; 	// var18 equals {-3.0,-2.0,-4.0}
			assert var18 = {-3.0,-2.0,-4.0}; 
			map var19 <- ['a'::1,'b'::2] - ('b'::2); 	// var19 equals ['a'::1]
			assert var19 = ['a'::1]; 
			map var20 <- ['a'::1,'b'::2] - ('c'::3); 	// var20 equals ['a'::1,'b'::2]
			assert var20 = ['a'::1,'b'::2]; 
			point var21 <- -{3.0,5.0}; 	// var21 equals {-3.0,-5.0}
			assert var21 = {-3.0,-5.0}; 
			point var22 <- -{1.0,6.0,7.0}; 	// var22 equals {-1.0,-6.0,-7.0}
			assert var22 = {-1.0,-6.0,-7.0}; 
			map var23 <- ['a'::1,'b'::2] - ['b'::2]; 	// var23 equals ['a'::1]
			assert var23 = ['a'::1]; 
			map var24 <- ['a'::1,'b'::2] - ['b'::2,'c'::3]; 	// var24 equals ['a'::1]
			assert var24 = ['a'::1]; 
			int var25 <- - (-56); 	// var25 equals 56
			assert var25 = 56; 

		}
	
		test MultiplyOp {
			float var0 <- {2,5} * {4.5, 5}; 	// var0 equals 34.0
			assert var0 = 34.0; 
			rgb var1 <- rgb([255, 128, 32]) * 2; 	// var1 equals rgb([255,255,64])
			assert var1 = rgb([255,255,64]); 
			geometry var2 <- shape * {0.5,0.5,2}; 	// var2 equals a geometry corresponding to the geometry of the agent applying the operator scaled by a coefficient of 0.5 in x, 0.5 in y and 2 in z
			int var3 <- 1 * 1; 	// var3 equals 1
			assert var3 = 1; 
			point var4 <- {2,5} * 4; 	// var4 equals {8.0, 20.0}
			assert var4 = {8.0, 20.0}; 
			point var5 <- {2, 4} * 2.5; 	// var5 equals {5.0, 10.0}
			assert var5 = {5.0, 10.0}; 
			matrix<float> m <- (3.5 * matrix([[2,5],[3,4]]));	//m equals matrix([[7.0,17.5],[10.5,14]])
			geometry var7 <- circle(10) * 2; 	// var7 equals circle(20)
			assert var7 = circle(20); 
			float var8 <- 2.5 * 2; 	// var8 equals 5.0
			assert var8 = 5.0; 

		}
	
		test PlusOp {
			geometry var4 <- circle(5) + 5; 	// var4 equals circle(10)
			assert var4 = circle(10); 
			geometry var5 <- circle(5) + (5,32,#round); 	// var5 equals circle(10)
			assert var5 = circle(10); 
			point var6 <- {1, 2} + 4; 	// var6 equals {5.0, 6.0,4.0}
			assert var6 = {5.0, 6.0,4.0}; 
			point var7 <- {1, 2} + 4.5; 	// var7 equals {5.5, 6.5,4.5}
			assert var7 = {5.5, 6.5,4.5}; 
			geometry var8 <- circle(5) + (5,32); 	// var8 equals circle(10)
			assert var8 = circle(10); 
			point var9 <- {1, 2} + {4, 5}; 	// var9 equals {5.0, 7.0}
			assert var9 = {5.0, 7.0}; 
			date var10 <- date('2000-01-01') + 200; 	// var10 equals date('2000-01-01')
			assert var10 = date('2000-01-01'); 
			rgb var11 <- rgb([255, 128, 32]) + 3; 	// var11 equals rgb([255,131,35])
			assert var11 = rgb([255,131,35]); 
			int var12 <- 1 + 1; 	// var12 equals 2
			assert var12 = 2; 
			int var13 <- 1.0 + 1; 	// var13 equals 2.0
			assert var13 = 2.0; 
			int var14 <- 1.0 + 2.5; 	// var14 equals 3.5
			assert var14 = 3.5; 
			list<int> var15 <- [1,2,3,4,5,6] + 2; 	// var15 equals [1,2,3,4,5,6,2]
			assert var15 = [1,2,3,4,5,6,2]; 
			list<int> var16 <- [1,2,3,4,5,6] + 0; 	// var16 equals [1,2,3,4,5,6,0]
			assert var16 = [1,2,3,4,5,6,0]; 
			matrix var17 <- 3.5 + matrix([[2,5],[3,4]]); 	// var17 equals matrix([[5.5,8.5],[6.5,7.5]])
			assert var17 = matrix([[5.5,8.5],[6.5,7.5]]); 
			list<int> var18 <- [1,2,3,4,5,6] + [2,4,9]; 	// var18 equals [1,2,3,4,5,6,2,4,9]
			assert var18 = [1,2,3,4,5,6,2,4,9]; 
			list<int> var19 <- [1,2,3,4,5,6] + [0,8]; 	// var19 equals [1,2,3,4,5,6,0,8]
			assert var19 = [1,2,3,4,5,6,0,8]; 
			rgb var20 <- rgb([255, 128, 32]) + rgb('red'); 	// var20 equals rgb([255,128,32])
			assert var20 = rgb([255,128,32]); 
			string var21 <- "hello " + 12; 	// var21 equals "hello 12"
			assert var21 = "hello 12"; 
			//geometry var22 <- geom1 + geom2; 	// var22 equals a geometry corresponding to union between geom1 and geom2
			map var0 <- ['a'::1,'b'::2] + ['c'::3]; 	// var0 equals ['a'::1,'b'::2,'c'::3]
			assert var0 = ['a'::1,'b'::2,'c'::3]; 
			map var1 <- ['a'::1,'b'::2] + [5::3.0]; 	// var1 equals ['a'::1.0,'b'::2.0,5::3.0]
			assert var1 = ['a'::1.0,'b'::2.0,5::3.0]; 
			map var2 <- ['a'::1,'b'::2] + ('c'::3); 	// var2 equals ['a'::1,'b'::2,'c'::3]
			assert var2 = ['a'::1,'b'::2,'c'::3]; 
			map var3 <- ['a'::1,'b'::2] + ('c'::3); 	// var3 equals ['a'::1,'b'::2,'c'::3]
			assert var3 = ['a'::1,'b'::2,'c'::3]; 

		}
	
		test PointAccesOp {
			matrix var0 <- matrix([[1,1],[1,2]]) . matrix([[1,1],[1,2]]); 	// var0 equals matrix([[2,3],[3,5]])
			assert var0 = matrix([[2,3],[3,5]]); 
			//unknown var1 <- agent1.location; 	// var1 equals the location of the agent agent1

			assert map(nil).keys raises: "exception"; 

		}
	
		test row_atOp {
			list var0 <- matrix([["el11","el12","el13"],["el21","el22","el23"],["el31","el32","el33"]]) row_at 2; 	// var0 equals ["el13","el23","el33"]
			assert var0 = ["el13","el23","el33"]; 

		}
	
		test rows_listOp {
			list<list> var0 <- rows_list(matrix([["el11","el12","el13"],["el21","el22","el23"],["el31","el32","el33"]])); 	// var0 equals [["el11","el21","el31"],["el12","el22","el32"],["el13","el23","el33"]]
			assert var0 = [["el11","el21","el31"],["el12","el22","el32"],["el13","el23","el33"]]; 

		}
	
		test shuffleOp {
			string var0 <- shuffle ('abc'); 	// var0 equals 'bac' (for example)
			matrix var1 <- shuffle (matrix([["c11","c12","c13"],["c21","c22","c23"]])); 	// var1 equals matrix([["c12","c21","c11"],["c13","c22","c23"]]) (for example)
			container var2 <- shuffle ([12, 13, 14]); 	// var2 equals [14,12,13] (for example)

		}
	
		test traceOp {
			float var0 <- trace(matrix([[1,2],[3,4]])); 	// var0 equals 5
			assert var0 = 5; 

		}
	
		test transposeOp {
			matrix var0 <- transpose(matrix([[5,-3],[6,-4]])); 	// var0 equals [[5,6],[-3,-4]]
			assert var0 = [[5,6],[-3,-4]]; 

		}
	
}

	