/**
 *  OpOpArithmetic__operatorsTest
 *  Author: automatic generator
 *  Description: Unity Test of operators belonging to category OpArithmetic__operatorsTest.
 */

experiment OpArithmetic__operatorsTestTests type: test {	

	
		test absOp {
			int var0 <- abs (-10); 	// var0 equals 10
			assert var0 = 10; 
			int var1 <- abs (10); 	// var1 equals 10
			assert var1 = 10; 
			int var2 <- abs (-0); 	// var2 equals 0
			assert var2 = 0; 
			float var3 <- abs (200 * -1 + 0.5); 	// var3 equals 199.5
			assert var3 = 199.5; 

		}
	
		test acosOp {
			float var0 <- acos (0); 	// var0 equals 90.0
			assert var0 = 90.0; 

		}
	
		test asinOp {
			float var0 <- asin (90); 	// var0 equals #nan
			assert var0 = #nan; 
			float var1 <- asin (0); 	// var1 equals 0.0
			assert var1 = 0.0; 

		}
	
		test atanOp {
			float var0 <- atan (1); 	// var0 equals 45.0
			assert var0 = 45.0; 

		}
	
		test atan2Op {
			float var0 <- atan2 (0,0); 	// var0 equals 0.0
			assert var0 = 0.0; 

		}
	
		test ceilOp {
			float var0 <- ceil(3); 	// var0 equals 3.0
			assert var0 = 3.0; 
			float var1 <- ceil(3.5); 	// var1 equals 4.0
			assert var1 = 4.0; 
			float var2 <- ceil(-4.7); 	// var2 equals -4.0
			assert var2 = -4.0; 

		}
	
		test cosOp {
			float var0 <- cos (0); 	// var0 equals 1.0
			assert var0 = 1.0; 
			float var1 <- cos(360); 	// var1 equals 1.0
			assert var1 = 1.0; 
			float var2 <- cos(-720); 	// var2 equals 1.0
			assert var2 = 1.0; 

		}
	
		test cos_radOp {

		}
	
		test divOp {
			int var0 <- 40.1 div 4.5; 	// var0 equals 8
			assert var0 = 8; 
			int var1 <- 40 div 4.1; 	// var1 equals 9
			assert var1 = 9; 
			int var2 <- 40 div 3; 	// var2 equals 13
			assert var2 = 13; 
			int var3 <- 40.5 div 3; 	// var3 equals 13
			assert var3 = 13; 

		}
	
		test DivideOp {
			float var0 <- 3 / 5.0; 	// var0 equals 0.6
			assert var0 = 0.6; 
			point var1 <- {5, 7.5} / 2.5; 	// var1 equals {2, 3}
			assert var1 = {2, 3}; 
			point var2 <- {2,5} / 4; 	// var2 equals {0.5,1.25}
			assert var2 = {0.5,1.25}; 
			rgb var3 <- rgb([255, 128, 32]) / 2; 	// var3 equals rgb([127,64,16])
			assert var3 = rgb([127,64,16]); 
			rgb var4 <- rgb([255, 128, 32]) / 2.5; 	// var4 equals rgb([102,51,13])
			assert var4 = rgb([102,51,13]); 

		}
	
		test evenOp {
			bool var0 <- even (3); 	// var0 equals false
			assert var0 = false; 
			bool var1 <- even(-12); 	// var1 equals true
			assert var1 = true; 

		}
	
		test expOp {
			float var0 <- exp (0); 	// var0 equals 1.0
			assert var0 = 1.0; 

		}
	
		test factOp {
			float var0 <- fact(4); 	// var0 equals 24
			assert var0 = 24; 

		}
	
		test floorOp {
			float var0 <- floor(3); 	// var0 equals 3.0
			assert var0 = 3.0; 
			float var1 <- floor(3.5); 	// var1 equals 3.0
			assert var1 = 3.0; 
			float var2 <- floor(-4.7); 	// var2 equals -5.0
			assert var2 = -5.0; 

		}
	
		test hypotOp {
			float var0 <- hypot(0,1,0,1); 	// var0 equals sqrt(2)
			assert var0 = sqrt(2); 

		}
	
		test is_finiteOp {
			bool var0 <- is_finite(4.66); 	// var0 equals true
			assert var0 = true; 
			bool var1 <- is_finite(#infinity); 	// var1 equals false
			assert var1 = false; 

		}
	
		test is_numberOp {
			bool var0 <- is_number("test"); 	// var0 equals false
			assert var0 = false; 
			bool var1 <- is_number("123.56"); 	// var1 equals true
			assert var1 = true; 
			bool var2 <- is_number("-1.2e5"); 	// var2 equals true
			assert var2 = true; 
			bool var3 <- is_number("1,2"); 	// var3 equals false
			assert var3 = false; 
			bool var4 <- is_number("#12FA"); 	// var4 equals true
			assert var4 = true; 
			bool var5 <- is_number(4.66); 	// var5 equals true
			assert var5 = true; 
			bool var6 <- is_number(#infinity); 	// var6 equals true
			assert var6 = true; 
			bool var7 <- is_number(#nan); 	// var7 equals false
			assert var7 = false; 

		}
	
		test lnOp {
			float var0 <- ln(exp(1)); 	// var0 equals 1.0
			assert var0 = 1.0; 
			float var1 <- ln(1); 	// var1 equals 0.0
			assert var1 = 0.0; 

		}
	
		test logOp {
			float var0 <- log(1); 	// var0 equals 0.0
			assert var0 = 0.0; 
			float var1 <- log(10); 	// var1 equals 1.0
			assert var1 = 1.0; 

		}
	
		test MinusOp {
			geometry var0 <- shape - 5; 	// var0 equals a geometry corresponding to the geometry of the agent applying the operator reduced by a distance of 5
			point var1 <- {1, 2} - {4, 5}; 	// var1 equals {-3.0, -3.0}
			assert var1 = {-3.0, -3.0}; 
			float var2 <- date('2000-01-01') - date('2010-01-02'); 	// var2 equals 86400
			assert var2 = 86400; 
			list<int> var3 <- [1,2,3,4,5,6] - [2,4,9]; 	// var3 equals [1,3,5,6]
			assert var3 = [1,3,5,6]; 
			list<int> var4 <- [1,2,3,4,5,6] - [0,8]; 	// var4 equals [1,2,3,4,5,6]
			assert var4 = [1,2,3,4,5,6]; 
			rgb var5 <- rgb([255, 128, 32]) - rgb('red'); 	// var5 equals rgb([0,128,32])
			assert var5 = rgb([0,128,32]); 
			int var6 <- 1 - 1; 	// var6 equals 0
			assert var6 = 0; 
			float var7 <- 1.0 - 1; 	// var7 equals 0.0
			assert var7 = 0.0; 
			float var8 <- 3.7 - 1.2; 	// var8 equals 2.5
			assert var8 = 2.5; 
			float var9 <- 3 - 1.2; 	// var9 equals 1.8
			assert var9 = 1.8; 
			point var10 <- {1, 2} - 4.5; 	// var10 equals {-3.5, -2.5, -4.5}
			assert var10 = {-3.5, -2.5, -4.5}; 
			point var11 <- {1, 2} - 4; 	// var11 equals {-3.0,-2.0,-4.0}
			assert var11 = {-3.0,-2.0,-4.0}; 
			list<int> var12 <- [1,2,3,4,5,6] - 2; 	// var12 equals [1,3,4,5,6]
			assert var12 = [1,3,4,5,6]; 
			list<int> var13 <- [1,2,3,4,5,6] - 0; 	// var13 equals [1,2,3,4,5,6]
			assert var13 = [1,2,3,4,5,6]; 
			geometry var14 <- rectangle(10,10) - [circle(2), square(2)]; 	// var14 equals rectangle(10,10) - (circle(2) + square(2))
			assert var14 = rectangle(10,10) - (circle(2) + square(2)); 
			date var15 <- date('2000-01-01') - 200; 	// var15 equals date('2000-01-01')
			assert var15 = date('2000-01-01'); 
			//geometry var16 <- geom1 - geom2; 	// var16 equals a geometry corresponding to difference between geom1 and geom2
			rgb var17 <- rgb([255, 128, 32]) - 3; 	// var17 equals rgb([252,125,29])
			assert var17 = rgb([252,125,29]); 
			matrix var18 <- 3.5 - matrix([[2,5],[3,4]]); 	// var18 equals matrix([[1.5,-1.5],[0.5,-0.5]])
			assert var18 = matrix([[1.5,-1.5],[0.5,-0.5]]); 
			map var19 <- ['a'::1,'b'::2] - ('b'::2); 	// var19 equals ['a'::1]
			assert var19 = ['a'::1]; 
			map var20 <- ['a'::1,'b'::2] - ('c'::3); 	// var20 equals ['a'::1,'b'::2]
			assert var20 = ['a'::1,'b'::2]; 
			map var21 <- ['a'::1,'b'::2] - ['b'::2]; 	// var21 equals ['a'::1]
			assert var21 = ['a'::1]; 
			map var22 <- ['a'::1,'b'::2] - ['b'::2,'c'::3]; 	// var22 equals ['a'::1]
			assert var22 = ['a'::1]; 
			int var23 <- - (-56); 	// var23 equals 56
			assert var23 = 56; 
			point var24 <- -{3.0,5.0}; 	// var24 equals {-3.0,-5.0}
			assert var24 = {-3.0,-5.0}; 
			point var25 <- -{1.0,6.0,7.0}; 	// var25 equals {-1.0,-6.0,-7.0}
			assert var25 = {-1.0,-6.0,-7.0}; 

		}
	
		test modOp {
			int var0 <- 40 mod 3; 	// var0 equals 1
			assert var0 = 1; 

		}
	
		test MultiplyOp {
			matrix<float> m <- (3.5 * matrix([[2,5],[3,4]]));	//m equals matrix([[7.0,17.5],[10.5,14]])
			int var2 <- 1 * 1; 	// var2 equals 1
			assert var2 = 1; 
			geometry var3 <- circle(10) * 2; 	// var3 equals circle(20)
			assert var3 = circle(20); 
			float var4 <- {2,5} * {4.5, 5}; 	// var4 equals 34.0
			assert var4 = 34.0; 
			rgb var5 <- rgb([255, 128, 32]) * 2; 	// var5 equals rgb([255,255,64])
			assert var5 = rgb([255,255,64]); 
			geometry var6 <- shape * {0.5,0.5,2}; 	// var6 equals a geometry corresponding to the geometry of the agent applying the operator scaled by a coefficient of 0.5 in x, 0.5 in y and 2 in z
			point var7 <- {2,5} * 4; 	// var7 equals {8.0, 20.0}
			assert var7 = {8.0, 20.0}; 
			point var8 <- {2, 4} * 2.5; 	// var8 equals {5.0, 10.0}
			assert var8 = {5.0, 10.0}; 
			float var0 <- 2.5 * 2; 	// var0 equals 5.0
			assert var0 = 5.0; 

		}
	
		test PlusOp {
			int var4 <- 1 + 1; 	// var4 equals 2
			assert var4 = 2; 
			float var5 <- 1.0 + 1; 	// var5 equals 2.0
			assert var5 = 2.0; 
			float var6 <- 1.0 + 2.5; 	// var6 equals 3.5
			assert var6 = 3.5; 
			string var7 <- "hello " + 12; 	// var7 equals "hello 12"
			assert var7 = "hello 12"; 
			rgb var8 <- rgb([255, 128, 32]) + rgb('red'); 	// var8 equals rgb([255,128,32])
			assert var8 = rgb([255,128,32]); 
			point var9 <- {1, 2} + 4; 	// var9 equals {5.0, 6.0,4.0}
			assert var9 = {5.0, 6.0,4.0}; 
			point var10 <- {1, 2} + 4.5; 	// var10 equals {5.5, 6.5,4.5}
			assert var10 = {5.5, 6.5,4.5}; 
			geometry var11 <- circle(5) + (5,32,#round); 	// var11 equals circle(10)
			assert var11 = circle(10); 
			matrix var12 <- 3.5 + matrix([[2,5],[3,4]]); 	// var12 equals matrix([[5.5,8.5],[6.5,7.5]])
			assert var12 = matrix([[5.5,8.5],[6.5,7.5]]); 
			list<int> var13 <- [1,2,3,4,5,6] + [2,4,9]; 	// var13 equals [1,2,3,4,5,6,2,4,9]
			assert var13 = [1,2,3,4,5,6,2,4,9]; 
			list<int> var14 <- [1,2,3,4,5,6] + [0,8]; 	// var14 equals [1,2,3,4,5,6,0,8]
			assert var14 = [1,2,3,4,5,6,0,8]; 
			list<int> var15 <- [1,2,3,4,5,6] + 2; 	// var15 equals [1,2,3,4,5,6,2]
			assert var15 = [1,2,3,4,5,6,2]; 
			list<int> var16 <- [1,2,3,4,5,6] + 0; 	// var16 equals [1,2,3,4,5,6,0]
			assert var16 = [1,2,3,4,5,6,0]; 
			geometry var17 <- circle(5) + (5,32); 	// var17 equals circle(10)
			assert var17 = circle(10); 
			//geometry var18 <- geom1 + geom2; 	// var18 equals a geometry corresponding to union between geom1 and geom2
			rgb var19 <- rgb([255, 128, 32]) + 3; 	// var19 equals rgb([255,131,35])
			assert var19 = rgb([255,131,35]); 
			geometry var20 <- circle(5) + 5; 	// var20 equals circle(10)
			assert var20 = circle(10); 
			date var21 <- date('2000-01-01') + 200; 	// var21 equals date('2000-01-01')
			assert var21 = date('2000-01-01'); 
			point var22 <- {1, 2} + {4, 5}; 	// var22 equals {5.0, 7.0}
			assert var22 = {5.0, 7.0}; 
			map var0 <- ['a'::1,'b'::2] + ['c'::3]; 	// var0 equals ['a'::1,'b'::2,'c'::3]
			assert var0 = ['a'::1,'b'::2,'c'::3]; 
			map var1 <- ['a'::1,'b'::2] + [5::3.0]; 	// var1 equals ['a'::1.0,'b'::2.0,5::3.0]
			assert var1 = ['a'::1.0,'b'::2.0,5::3.0]; 
			map var2 <- ['a'::1,'b'::2] + ('c'::3); 	// var2 equals ['a'::1,'b'::2,'c'::3]
			assert var2 = ['a'::1,'b'::2,'c'::3]; 
			map var3 <- ['a'::1,'b'::2] + ('c'::3); 	// var3 equals ['a'::1,'b'::2,'c'::3]
			assert var3 = ['a'::1,'b'::2,'c'::3]; 

		}
	
		test PowerOp {
			float var1 <- 2 ^ 3; 	// var1 equals 8.0
			assert var1 = 8.0; 
			float var2 <- 4.0^2; 	// var2 equals 16.0
			assert var2 = 16.0; 
			float var3 <- 4.0^0.5; 	// var3 equals 2.0
			assert var3 = 2.0; 
			float var4 <- 8^0; 	// var4 equals 1.0
			assert var4 = 1.0; 
			float var5 <- 8.0^0; 	// var5 equals 1.0
			assert var5 = 1.0; 
			float var6 <- 8^1; 	// var6 equals 8.0
			assert var6 = 8.0; 
			float var7 <- 8.0^1; 	// var7 equals 8.0
			assert var7 = 8.0; 
			float var8 <- 8^1.0; 	// var8 equals 8.0
			assert var8 = 8.0; 
			float var9 <- 8.0^1.0; 	// var9 equals 8.0
			assert var9 = 8.0; 
			float var10 <- 2^0.5; 	// var10 equals sqrt(2)
			assert var10 = sqrt(2); 
			float var11 <- 16.81^0.5; 	// var11 equals sqrt(16.81)
			assert var11 = sqrt(16.81); 
//			float var12 <- (10^(-9) = 0); 	// var12 equals false
//			assert var12 = false; 
			float var0 <- 4.84 ^ 0.5; 	// var0 equals 2.2
			assert var0 = 2.2; 

		}
	
		test roundOp {
			point var0 <- {12345.78943,  12345.78943, 12345.78943} with_precision 2; 	// var0 equals {12345.79,12345.79,12345.79}
			assert var0 = {12345.79,12345.79,12345.79}; 
			int var1 <- round (0.51); 	// var1 equals 1
			assert var1 = 1; 
			int var2 <- round (100.2); 	// var2 equals 100
			assert var2 = 100; 
			int var3 <- round(-0.51); 	// var3 equals -1
			assert var3 = -1; 

		}
	
		test signumOp {
			int var0 <- signum(-12); 	// var0 equals -1
			assert var0 = -1; 
			int var1 <- signum(14); 	// var1 equals 1
			assert var1 = 1; 
			int var2 <- signum(0); 	// var2 equals 0
			assert var2 = 0; 

		}
	
		test sinOp {
			float var0 <- sin(360); 	// var0 equals 0.0
			assert var0 = 0.0; 
			float var1 <- sin (0); 	// var1 equals 0.0
			assert var1 = 0.0; 

		}
	
		test sin_radOp {
			float var0 <- sin_rad(#pi); 	// var0 equals 0.0
			assert var0 = 0.0; 
		}
	
		test sqrtOp {
			float var0 <- sqrt(4); 	// var0 equals 2.0
			assert var0 = 2.0; 
			float var1 <- sqrt(4); 	// var1 equals 2.0
			assert var1 = 2.0; 

		}
	
		test tanOp {
			float var0 <- tan (0); 	// var0 equals 0.0
			assert var0 = 0.0; 
			float var1 <- tan(90); 	// var1 equals 1.633123935319537E16
			assert var1 = 1.633123935319537E16; 

		}
	
		test tan_radOp {

		}
	
		test tanhOp {
			float var0 <- tanh(0); 	// var0 equals 0.0
			assert var0 = 0.0; 
			float var1 <- tanh(100); 	// var1 equals 1.0
			assert var1 = 1.0; 

		}
	
		test with_precisionOp {
			geometry var0 <- self with_precision 2; 	// var0 equals the geometry resulting from the rounding of points of the geometry with a precision of 0.1.
			point var1 <- {12345.78943, 12345.78943, 12345.78943} with_precision 2 ; 	// var1 equals {12345.79, 12345.79, 12345.79}
			assert var1 = {12345.79, 12345.79, 12345.79}; 
			float var2 <- 12345.78943 with_precision 2; 	// var2 equals 12345.79
			assert var2 = 12345.79; 
			float var3 <- 123 with_precision 2; 	// var3 equals 123.00
			assert var3 = 123.00; 

		}
	
}

	