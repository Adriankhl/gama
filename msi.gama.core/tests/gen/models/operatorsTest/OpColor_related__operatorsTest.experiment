/**
 *  OpOpColor_related__operatorsTest
 *  Author: automatic generator
 *  Description: Unity Test of operators belonging to category OpColor_related__operatorsTest.
 */

experiment OpColor_related__operatorsTestTests type: test {	

	
		test blendOp {
			rgb var0 <- blend(#red, #blue); 	// var0 equals rgb(127,0,127)
			assert var0 = rgb(127,0,127); 
			//rgb var1 <- blend(#red, #blue); 	// var1 equals to a color very close to the purple
			rgb var2 <- blend(#red, #blue, 0.3); 	// var2 equals rgb(76,0,178)
			assert var2 = rgb(76,0,178); 
			//rgb var3 <- blend(#red, #blue, 0.3); 	// var3 equals to a color between the purple and the blue

		}
	
		test brewer_colorsOp {
			//list<rgb> var0 <- list<rgb> colors <- brewer_colors("Pastel1", 10);; 	// var0 equals a list of 10 sequential colors
			//list<rgb> var1 <- list<rgb> colors <- brewer_colors("OrRd");; 	// var1 equals a list of 6 blue colors

		}
	
		test brewer_palettesOp {
			//list<string> var0 <- list<rgb> colors <- brewer_palettes();; 	// var0 equals a list of palettes that are composed of a min of 5 colors
			//list<string> var1 <- list<rgb> colors <- brewer_palettes(5,10);; 	// var1 equals a list of palettes that are composed of a min of 5 colors and a max of 10 colors

		}
	
		test DivideOp {
			rgb var0 <- rgb([255, 128, 32]) / 2.5; 	// var0 equals rgb([102,51,13])
			assert var0 = rgb([102,51,13]); 
			point var1 <- {5, 7.5} / 2.5; 	// var1 equals {2, 3}
			assert var1 = {2, 3}; 
			point var2 <- {2,5} / 4; 	// var2 equals {0.5,1.25}
			assert var2 = {0.5,1.25}; 
			rgb var3 <- rgb([255, 128, 32]) / 2; 	// var3 equals rgb([127,64,16])
			assert var3 = rgb([127,64,16]); 
			float var4 <- 3 / 5.0; 	// var4 equals 0.6
			assert var4 = 0.6; 

		}
	
		test grayscaleOp {
			//rgb var0 <- grayscale (rgb(255,0,0)); 	// var0 equals to a dark grey
			rgb var1 <- grayscale (rgb(255,0,0)); 	// var1 equals rgb(76,76,76)
			assert var1 = rgb(76,76,76); 

		}
	
		test hsbOp {
			rgb var0 <- hsb (0.0,1.0,1.0); 	// var0 equals rgb("red")
			assert var0 = rgb("red"); 
			rgb var1 <- hsb (0.5,1.0,1.0,0.0); 	// var1 equals rgb("cyan",0)
			assert var1 = rgb("cyan",0); 

		}
	
		test meanOp {
			unknown var0 <- mean ([4.5, 3.5, 5.5, 7.0]); 	// var0 equals 5.125 
			assert var0 = 5.125 ; 

		}
	
		test medianOp {
			unknown var0 <- median ([4.5, 3.5, 5.5, 3.4, 7.0]); 	// var0 equals 5.0
			assert var0 = 5.0; 

		}
	
		test MinusOp {
			point var7 <- {1, 2} - 4.5; 	// var7 equals {-3.5, -2.5, -4.5}
			assert var7 = {-3.5, -2.5, -4.5}; 
			point var8 <- {1, 2} - 4; 	// var8 equals {-3.0,-2.0,-4.0}
			assert var8 = {-3.0,-2.0,-4.0}; 
			point var9 <- {1, 2} - {4, 5}; 	// var9 equals {-3.0, -3.0}
			assert var9 = {-3.0, -3.0}; 
			list<int> var10 <- [1,2,3,4,5,6] - 2; 	// var10 equals [1,3,4,5,6]
			assert var10 = [1,3,4,5,6]; 
			list<int> var11 <- [1,2,3,4,5,6] - 0; 	// var11 equals [1,2,3,4,5,6]
			assert var11 = [1,2,3,4,5,6]; 
			matrix var12 <- 3.5 - matrix([[2,5],[3,4]]); 	// var12 equals matrix([[1.5,-1.5],[0.5,-0.5]])
			assert var12 = matrix([[1.5,-1.5],[0.5,-0.5]]); 
			list<int> var13 <- [1,2,3,4,5,6] - [2,4,9]; 	// var13 equals [1,3,5,6]
			assert var13 = [1,3,5,6]; 
			list<int> var14 <- [1,2,3,4,5,6] - [0,8]; 	// var14 equals [1,2,3,4,5,6]
			assert var14 = [1,2,3,4,5,6]; 
			rgb var15 <- rgb([255, 128, 32]) - 3; 	// var15 equals rgb([252,125,29])
			assert var15 = rgb([252,125,29]); 
			geometry var16 <- shape - 5; 	// var16 equals a geometry corresponding to the geometry of the agent applying the operator reduced by a distance of 5
			rgb var17 <- rgb([255, 128, 32]) - rgb('red'); 	// var17 equals rgb([0,128,32])
			assert var17 = rgb([0,128,32]); 
			geometry var18 <- rectangle(10,10) - [circle(2), square(2)]; 	// var18 equals rectangle(10,10) - (circle(2) + square(2))
			assert var18 = rectangle(10,10) - (circle(2) + square(2)); 
			//geometry var19 <- geom1 - geom2; 	// var19 equals a geometry corresponding to difference between geom1 and geom2
			int var20 <- 1 - 1; 	// var20 equals 0
			assert var20 = 0; 
			int var21 <- 1.0 - 1; 	// var21 equals 0.0
			assert var21 = 0.0; 
			int var22 <- 3.7 - 1.2; 	// var22 equals 2.5
			assert var22 = 2.5; 
			int var23 <- 3 - 1.2; 	// var23 equals 1.8
			assert var23 = 1.8; 
			float var24 <- date('2000-01-01') - date('2010-01-02'); 	// var24 equals 86400
			assert var24 = 86400; 
			date var25 <- date('2000-01-01') - 200; 	// var25 equals date('2000-01-01')
			assert var25 = date('2000-01-01'); 
			point var0 <- -{3.0,5.0}; 	// var0 equals {-3.0,-5.0}
			assert var0 = {-3.0,-5.0}; 
			point var1 <- -{1.0,6.0,7.0}; 	// var1 equals {-1.0,-6.0,-7.0}
			assert var1 = {-1.0,-6.0,-7.0}; 
			map var2 <- ['a'::1,'b'::2] - ('b'::2); 	// var2 equals ['a'::1]
			assert var2 = ['a'::1]; 
			map var3 <- ['a'::1,'b'::2] - ('c'::3); 	// var3 equals ['a'::1,'b'::2]
			assert var3 = ['a'::1,'b'::2]; 
			int var4 <- - (-56); 	// var4 equals 56
			assert var4 = 56; 
			map var5 <- ['a'::1,'b'::2] - ['b'::2]; 	// var5 equals ['a'::1]
			assert var5 = ['a'::1]; 
			map var6 <- ['a'::1,'b'::2] - ['b'::2,'c'::3]; 	// var6 equals ['a'::1]
			assert var6 = ['a'::1]; 

		}
	
		test MultiplyOp {
			geometry var1 <- shape * {0.5,0.5,2}; 	// var1 equals a geometry corresponding to the geometry of the agent applying the operator scaled by a coefficient of 0.5 in x, 0.5 in y and 2 in z
			rgb var2 <- rgb([255, 128, 32]) * 2; 	// var2 equals rgb([255,255,64])
			assert var2 = rgb([255,255,64]); 
			point var3 <- {2,5} * 4; 	// var3 equals {8.0, 20.0}
			assert var3 = {8.0, 20.0}; 
			point var4 <- {2, 4} * 2.5; 	// var4 equals {5.0, 10.0}
			assert var4 = {5.0, 10.0}; 
			geometry var5 <- circle(10) * 2; 	// var5 equals circle(20)
			assert var5 = circle(20); 
			float var6 <- {2,5} * {4.5, 5}; 	// var6 equals 34.0
			assert var6 = 34.0; 
			matrix<float> m <- (3.5 * matrix([[2,5],[3,4]]));	//m equals matrix([[7.0,17.5],[10.5,14]])
			int var8 <- 1 * 1; 	// var8 equals 1
			assert var8 = 1; 
			float var0 <- 2.5 * 2; 	// var0 equals 5.0
			assert var0 = 5.0; 

		}
	
		test PlusOp {
			point var4 <- {1, 2} + {4, 5}; 	// var4 equals {5.0, 7.0}
			assert var4 = {5.0, 7.0}; 
			list<int> var5 <- [1,2,3,4,5,6] + 2; 	// var5 equals [1,2,3,4,5,6,2]
			assert var5 = [1,2,3,4,5,6,2]; 
			list<int> var6 <- [1,2,3,4,5,6] + 0; 	// var6 equals [1,2,3,4,5,6,0]
			assert var6 = [1,2,3,4,5,6,0]; 
			geometry var7 <- circle(5) + (5,32); 	// var7 equals circle(10)
			assert var7 = circle(10); 
			rgb var8 <- rgb([255, 128, 32]) + rgb('red'); 	// var8 equals rgb([255,128,32])
			assert var8 = rgb([255,128,32]); 
			//geometry var9 <- geom1 + geom2; 	// var9 equals a geometry corresponding to union between geom1 and geom2
			string var10 <- "hello " + 12; 	// var10 equals "hello 12"
			assert var10 = "hello 12"; 
			point var11 <- {1, 2} + 4; 	// var11 equals {5.0, 6.0,4.0}
			assert var11 = {5.0, 6.0,4.0}; 
			point var12 <- {1, 2} + 4.5; 	// var12 equals {5.5, 6.5,4.5}
			assert var12 = {5.5, 6.5,4.5}; 
			int var13 <- 1 + 1; 	// var13 equals 2
			assert var13 = 2; 
			int var14 <- 1.0 + 1; 	// var14 equals 2.0
			assert var14 = 2.0; 
			int var15 <- 1.0 + 2.5; 	// var15 equals 3.5
			assert var15 = 3.5; 
			rgb var16 <- rgb([255, 128, 32]) + 3; 	// var16 equals rgb([255,131,35])
			assert var16 = rgb([255,131,35]); 
			list<int> var17 <- [1,2,3,4,5,6] + [2,4,9]; 	// var17 equals [1,2,3,4,5,6,2,4,9]
			assert var17 = [1,2,3,4,5,6,2,4,9]; 
			list<int> var18 <- [1,2,3,4,5,6] + [0,8]; 	// var18 equals [1,2,3,4,5,6,0,8]
			assert var18 = [1,2,3,4,5,6,0,8]; 
			geometry var19 <- circle(5) + (5,32,#round); 	// var19 equals circle(10)
			assert var19 = circle(10); 
			date var20 <- date('2000-01-01') + 200; 	// var20 equals date('2000-01-01')
			assert var20 = date('2000-01-01'); 
			geometry var21 <- circle(5) + 5; 	// var21 equals circle(10)
			assert var21 = circle(10); 
			matrix var22 <- 3.5 + matrix([[2,5],[3,4]]); 	// var22 equals matrix([[5.5,8.5],[6.5,7.5]])
			assert var22 = matrix([[5.5,8.5],[6.5,7.5]]); 
			map var0 <- ['a'::1,'b'::2] + ('c'::3); 	// var0 equals ['a'::1,'b'::2,'c'::3]
			assert var0 = ['a'::1,'b'::2,'c'::3]; 
			map var1 <- ['a'::1,'b'::2] + ('c'::3); 	// var1 equals ['a'::1,'b'::2,'c'::3]
			assert var1 = ['a'::1,'b'::2,'c'::3]; 
			map var2 <- ['a'::1,'b'::2] + ['c'::3]; 	// var2 equals ['a'::1,'b'::2,'c'::3]
			assert var2 = ['a'::1,'b'::2,'c'::3]; 
			map var3 <- ['a'::1,'b'::2] + [5::3.0]; 	// var3 equals ['a'::1.0,'b'::2.0,5::3.0]
			assert var3 = ['a'::1.0,'b'::2.0,5::3.0]; 

		}
	
		test rgbOp {
			rgb var0 <- rgb (255,0,0,125); 	// var0 equals a light red color
			int var1 <- rgb (255,0,0,125).alpha; 	// var1 equals 125
			assert var1 = 125; 
			rgb var2 <- rgb(rgb(255,0,0),0.5); 	// var2 equals a light red color
			rgb var3 <- rgb(rgb(255,0,0),125); 	// var3 equals a light red color
			rgb var4 <- rgb (255,0,0); 	// var4 equals #red
			assert var4 = #red; 
			rgb var5 <- rgb ("red"); 	// var5 equals rgb(255,0,0)
			assert var5 = rgb(255,0,0); 
			rgb var6 <- rgb (255,0,0,0.5); 	// var6 equals a light red color

		}
	
		test rnd_colorOp {
			rgb var0 <- rnd_color(255); 	// var0 equals a random color, equivalent to rgb(rnd(255),rnd(255),rnd(255))

		}
	
		test sumOp {
			int var0 <- sum ([12,10,3]); 	// var0 equals 25
			assert var0 = 25; 
			unknown var1 <- sum([{1.0,3.0},{3.0,5.0},{9.0,1.0},{7.0,8.0}]); 	// var1 equals {20.0,17.0}
			assert var1 = {20.0,17.0}; 

		}
	
}

	