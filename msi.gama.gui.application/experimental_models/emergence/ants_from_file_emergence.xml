<?xml version="1.0" encoding="UTF-8"?>
<model name="ants_from_file_emergence">
	<include file="/includes/ants_from_file.xml"/>
	
	<global>
		<var type="int" name="two_ants_distance" init="3" min="1" parameter="Distance of two ants" category="Ant flock"/>
		<var type="int" name="mergeFrequency" init="3" min="1" parameter="Evaluation frequency of merge command" category="Ant flock"/>
		<var type="int" name="creationFrequency" init="3" min="1" parameter="Evaluation frequency of creation command" category="Ant flock"/>
		<var type="int" name="updateFrequency" init="2" min="1" parameter="Evaluation frequency of update command" category="Ant flock"/>
		<var type="int" name="disposalFrequency" init="1" min="1" parameter="Evaluation frequency of disposal command" category="Ant flock"/>
		<var type="int" name="mergingDistance" init="3" min="1" parameter="Distance to merge two flocks" category="Ant flock"/>

		<reflex name="create_ant_flocks" when="(time mod creationFrequency) = 0">
			<let var="potentialAnts" value="(list ant) where ((empty (each.groups)) and ((each.state = 'carryingFood') or (each.state = 'followingRoad')) )"/>
			
			<if condition="(length potentialAnts) > 1">
				<let var="potentialAntsNeighboursMap" type="map" value="[] as map"/>
					
				<loop over="potentialAnts" var="oneAnt">
					<let var="freeNeighbours" type="list" of="ant" value="( agents_overlapping (oneAnt.shape + (float two_ants_distance)) ) of_species ant"/>
						
					<if condition="(length freeNeighbours) &gt; 0">
						<remove item="oneAnt" from="freeNeighbours" /> <!-- remove myself from neighbours -->
						<add item="oneAnt::freeNeighbours" to="potentialAntsNeighboursMap"/>
					</if>
				</loop>

				<let var="sortedPotentialAnts" type="list" value="(potentialAntsNeighboursMap.keys) sort_by (length ( list (potentialAntsNeighboursMap at each) ) )"/>
				<loop over="sortedPotentialAnts" var="oneAnt">
					<let var="oneAntNeighbours" value="potentialAntsNeighboursMap at oneAnt"/>
					
					<if condition="oneAntNeighbours != nil">
						<loop over="oneAntNeighbours" var="oneNeighbour">
							<remove item="oneNeighbour" from="potentialAntsNeighboursMap"/>
						</loop>
					</if>				
				</loop>
				
				<let var="keys" type="list" value="potentialAntsNeighboursMap.keys" />
				<loop over="keys" var="oneKey">
					<!-- re-add myself to neighbours to form a group -->
					<put item="remove_duplicates ((list (potentialAntsNeighboursMap at oneKey)) + oneKey)" at="oneKey" in="potentialAntsNeighboursMap" />
				</loop>
		
				<loop over="keys" var="oneKey">
					<let var="microAgents" type="list" value="potentialAntsNeighboursMap at oneKey"/>
					
					<if condition="(length microAgents) &gt; 1">
						<create species="ant_flock" number="1" with="[ color::[rnd 255, rnd 255, rnd 255] ]">
							<capture target="microAgents" />
						</create>
					</if>
				</loop>
			</if>
		</reflex>
			
	</global>

	<entities>
		<species name="ant_flock" skills="situated, visible">
			<var type="rgb" name="color" init="rgb [64, 64, 64]" />
 			<var type="float" name="cohesionIndex" init="two_ants_distance" value="two_ants_distance + ( ( length components ) / 4 ) + ((shape.area)/500)"/>
			<var type="geometry" name="shape" value="polygon (components collect (ant each).location)" />
	
			<reflex name="capture_release_ants" when="(time mod updateFrequency) = 0">
				<let var="removed_components" value="components where ( ( (ant each) distance_to location) &gt; cohesionIndex)"/>
				<if condition="!(empty removed_components)">
					<release target="removed_components" />
				</if>
				
				<let var="added_components" value=" ((agents_overlapping (shape + (float two_ants_distance))) of_species ant) where ( empty (each.groups)  and ((each.state = 'carryingFood') or (each.state = 'followingRoad'))  )"/>
				<if condition="!(empty added_components)">
					<capture target="added_components" />
				</if>
			</reflex>
	
	 		<reflex name="disposal" when="(length components) &lt; 2">
	 			<release target="components" />
	 			<do action="die" />
	 		</reflex>
	
			<reflex name="merge_nearby_antFlocks" when="(time mod mergeFrequency) = 0">
  				<let var="nearbyFlocks" type="list" of="ant_flock" value="( (agents_overlapping (shape + (float mergingDistance))) of_species ant_flock )"/>
					
				<if condition="!(empty nearbyFlocks)">
					<set var="nearbyFlocks" value="nearbyFlocks sort_by (length ((ant_flock each).components))"/>
					<let var="largestFlock" type="ant_flock" value="nearbyFlocks at ((length nearbyFlocks) - 1)"/>
					<remove item="largestFlock" from="nearbyFlocks"/>
						
					<let var="added_components" value="[]"/>
					<loop over="nearbyFlocks" var="oneFlock">
						<loop over="oneFlock.components" var="com">
							<add item="com" to="added_components"/>
						</loop>
					</loop>
						
					<if condition="!(empty added_components)">
						<ask target="largestFlock">
							<capture target="added_components" />
						</ask>
	
	 					<loop over="nearbyFlocks" var="oneFlock">
	 						<ask target="oneFlock">
	 							<release target="components" />
	 							<do action="die"/>
	 						</ask>
	 					</loop>
					</if>
				</if>
			</reflex>
	 			
 			<aspect name="default">
  				<draw shape="geometry" color="color"/>
 			</aspect>
		</species>
	</entities>

	<output>
	   <display name="Ants">
	       <grid name="ant_grid" transparency="0.5"/>
	       <species name="ant" transparency="0.5"/>
	   </display>

	   <display name="Ants_Flock">
	       <species name="ant_flock" transparency="0.5"/>
	   </display>
	</output>
</model>
