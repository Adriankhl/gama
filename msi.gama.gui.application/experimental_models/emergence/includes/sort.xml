<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<model name="sort">
	<global>
		<var type="rgb" name="white" init="rgb 'white'" />
		<var type="string" name="rng" init="'cellular'" />
		<var type="rgb" name="black" init="rgb 'black'" />
		<var type="list" name="colors"
			init="['yellow','red', 'orange', 'blue', 'green','cyan', 'gray','pink','magenta']" const="true" />
		<var type="int" name="number_of_different_colors" init="5" max="9" parameter="Number of colors:"
			category="Environment" />
		<var type="int" name="density_percent" init="45" min="0" max="99" parameter="Density of colors:"
			category="Environment" />
		<var type="int" name="number_of_objects_in_history" init="3" min="0"
			parameter="Number of similar colors in memory necessary to put down:" category="Agents" />
		<var type="int" name="number_of_objects_around" init="5" min="0" max="8"
			parameter="Number of similar colors in perception necessary to pick up:" category="Agents" />
		<var type="int" name="width_and_height_of_grid" init="100" max="400" min="20"
			parameter="Width and height of the grid:" category="Environment" />
		<var type="int" name="number_of_ants" init="20" min="1" parameter="Number of agents:"
			category="Agents" />

		<action name="description">
			<do action="write">
				<arg name="message"
					value="'\n\u25B6 Description.
\n\u25B6 This model is loosely based on the behavior of ants sorting different elements in their nest.
\n\u25B6 A set of mobile agents - the ants - is placed on a grid. The grid itself contains cells of different colors. Each step, the agents move randomly. If they enter a colored cell, they pick this color if its density in the neighbourhood is less than *number_of_objects_around*. If they have picked a color, they drop it on a black cell if they have encountered at least *number_of_objects_in_history* cells with the same color.\
\n\u25B6 After a while, colors begin to be aggregated. '" />
			</do>
		</action>

		<init>
			<do action="description" />
			<do action="write" with="[message::string list (rgb 'black') + '   ' + string list white]"/>
			<create species="ant" number="number_of_ants" />
		</init>
	</global>

	<environment width="100" height="100">
		<grid name="ant_grid" width="width_and_height_of_grid" height="width_and_height_of_grid"
			neighbours="8" torus="true">
			<var type="rgb" name="color" init="(rnd 100) &lt; density_percent ? (colors at rnd(number_of_different_colors - 1)) as rgb : world.black" />
		</grid>
	</environment>

	<entities>
		<species name="ant" skills="moving, visible" control="fsm">
			<var type="rgb" name="color" init="white" />
			<var type="ant_grid" name="place" value="ant_grid location" />

			<reflex name="wandering">
				<do action="wander">
					<arg type="int" name="amplitude" value="120" />
				</do>
			</reflex>

			<state name="empty" initial="true">
				<let var="neighbours" value="place neighbours_at 1" of="ant_grid"/>
				<transition to="full"
					when="(place.color != black) and ((neighbours count (each.color = place.color)) &lt; (rnd number_of_objects_around))">
					<set var="color" value="place.color" />
					<set var="place.color" value="black" />
				</transition>
			</state>

			<state name="full">
				<enter>
					<let name="encountered" value="0" type="int" />
				</enter>
				<if condition="place.color = color">
					<set name="encountered" value="encountered + 1"/>
				</if>
				<transition to="empty"
					when="(place.color = black) and (encountered &gt; number_of_objects_in_history)">
					<set var="place.color" value="color" />
					<set var="color" value="black" />
				</transition>
			</state>
			
			<aspect name="default">
				<draw shape="circle" size="2" empty="false" color="color"/>
			</aspect>
			

		</species>
	</entities>

	<output>
		<display name="grille" refresh_every="100">
			<grid name="ant_grid" size="{0.8,0.8}" position="{0.1,0.1}" />
			 <species name="ant" transparency="0.5" size="{0.8,0.8}" position="{0.1,0.1}" />
		</display>
	</output>
</model>