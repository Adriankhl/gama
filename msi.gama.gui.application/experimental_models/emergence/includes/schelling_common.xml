<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<model name="segregation">
	<global>
		<var type="list" name="colors" init="[color_1, color_2, color_3, color_4, color_5, color_6, color_7, color_8]" />
		<var type="rgb" name="color_1" init="rgb 'yellow'" parameter="Color of group 1:" category="User interface" />
		<var type="rgb" name="color_2" init="rgb 'red'" parameter="Color of group 2:" category="User interface" />
		<var type="rgb" name="color_3" init="rgb 'blue'" parameter="Color of group 3:" category="User interface" />
		<var type="rgb" name="color_4" init="rgb 'orange'" parameter="Color of group 4:" category="User interface" />
		<var type="rgb" name="color_5" init="rgb 'green'" parameter="Color of group 5:" category="User interface" />
		<var type="rgb" name="color_6" init="rgb 'pink'" parameter="Color of group 6:" category="User interface" />
		<var type="rgb" name="color_7" init="rgb 'magenta'" parameter="Color of group 7:" category="User interface" />
		<var type="rgb" name="color_8" init="rgb 'cyan'" parameter="Color of group 8:" category="User interface" />
		<var type="rgb" name="black" init="rgb 'black'" const="true" />
		<var type="int" name="number_of_groups" init="2" max="8" parameter="Number of groups:" category="Population" />
		<var type="float" name="density_of_people" init="0.7" parameter="Density of people:" category="Population" min="0.01" max="0.99" />
		<var type="float" name="percent_similar_wanted" init="0.5" min="0" max="1" parameter="Desired percentage of similarity:" category="Population" />
		<var type="int" name="dimensions" init="80" max="400" min="10" parameter="Width and height of the environment:" category="Environment" />
		<var type="int" name="neighbours_distance" init="1" max="10" min="1" parameter="Distance of perception:" category="Population" />
		<var type="int" name="number_of_people" init="0" />
		<var type="int" name="sum_happy_people" init="0" value="all_people count (each.is_happy)" />
		<var type="int" name="sum_similar_neighbours" init="0" value="sum (all_people collect each.similar_nearby)" />
		<var type="int" name="sum_total_neighbours" init="1" value="sum (all_people collect each.total_nearby)" min="1" />
		<var type="list" name="all_places" init="[]" value="shuffle all_places" of="space" />
		<var type="list" name="all_people" init="[]" of="base" />
		
		<!--reflex when="(sum_similar_neighbours / sum_total_neighbours) > 0.9">
			<do action="halt"/>
		</reflex -->
		
		<action name="description">
			<do action="write">
				<arg name="message" value=" '\n\u25B6 Description. \n\u25B6 Thomas Schelling model of residential segregation is a classic study of the effects of local decisions on global dynamics. Agents with mild preferences for same-type neighbors, but without preferences for segregated neighborhoods, can wind up producing complete segregation.\n\u25B6 In this model, agents populate a grid with a given *density*. They are in two different states : happy when the percentage of same-color neighbours is above their *desired percentage of similarity*; unhappy otherwise. In the latter case, they change their location randomly until they find a neighbourhood that fits their desire. \n\u25B6 In addition to the previous parameter, one can adjust the *distance of perception* (i.e. the distance at which they consider other agents as neighbours) of the agents to see how it affects the global process. ' " />
			</do>
		</action>
		<init>
			<do action ="description"/>
			<do action="initialize_places" />
			<set name="number_of_people" value="length all_places * density_of_people" />
			<do action="initialize_people" />
		</init>
		<action name="initialize_places">
			<set name="all_places" value="shuffle (space as list)" />
		</action>
	</global>
	<entities>
		<species name="base">
			<var type="rgb" name="color" />
			<var type="point" name="location" />
			<var type="list" name="my_neighbours" init="[]" of="base" />
			<var type="int" name="similar_nearby" init="0" value=" (my_neighbours count (each.color = color)) " />
			<var type="int" name="total_nearby" value="length my_neighbours" />
			<var type="bool" name="is_happy" value="similar_nearby &gt;= (percent_similar_wanted * total_nearby )" />
			<reflex name="migrate" when="!is_happy">
				<set name="location" value="all_places first_with (empty each.agents)" />
			</reflex>
		</species>
	</entities>

	</model>