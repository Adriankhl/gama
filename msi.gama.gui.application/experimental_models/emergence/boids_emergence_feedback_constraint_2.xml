<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<model name="scenario2">
	<include file="/includes/boids_emergence_feedback_constraint.xml"/>

	<global>
		<var type="bool" name="create_flock" init="true" parameter="true" category="Flock"/>
		<var type="float" name="two_boids_distance" init="20" parameter="true" category="Flock"/>
		
		<var type="list" name="flocks" value="list flock"/>
		<var type="list" name="autonomousBoids" value="(list boids) where (empty each.disabled_behaviors)"/>
		<var type="list" name="passiveBoids" value="(list boids) where !(empty each.disabled_behaviors)"/>
		<var type="list" name="activeFlocks" value="flocks where (each.isActive)"/>
		<var type="list" name="passiveFlocks" value="flocks where (each.isPassive)"/>
		<var type="list" name="partialActiveFlocks" value="flocks where (each.partialActive)"/>

		<reflex name="create_flocks" when="(time mod creationFrequency) = 0">
			<if condition="create_flock">
				<let var="freeBoids" value="(list boids) where (empty (each.groups))"/>
				<let var="potentialBoidsNeighboursMap" value="[] as map"/>
				
				<loop over="freeBoids" var="oneBoids">
					<let var="freeNeighbours" value="(((agents_overlapping (oneBoids.shape + two_boids_distance)) of_species boids) - oneBoids) where (freeBoids contains each)"/>
					
					<if condition="(length freeNeighbours) &gt; 0">
						<add item="oneBoids::freeNeighbours" to="potentialBoidsNeighboursMap"/>
					</if>
				</loop>

				<let var="sortedFreeBoids" value="potentialBoidsNeighboursMap.keys sort_by (length (list (potentialBoidsNeighboursMap at each)))"/>
				<loop over="sortedFreeBoids" var="oneBoids">
					<let var="oneBoidsNeighbours" value="potentialBoidsNeighboursMap at oneBoids"/>
					
					<if condition="oneBoidsNeighbours != nil">
						<loop over="oneBoidsNeighbours" var="oneNeighbour">
							<remove item="oneNeighbour" from="potentialBoidsNeighboursMap"/>
						</loop>
					</if>				
				</loop>
				
				<let var="boidsNeighbours" type="list" of="boids" value="potentialBoidsNeighboursMap.keys" />
				<loop over="boidsNeighbours" var="oneKey">
					<put item="remove_duplicates ((list (potentialBoidsNeighboursMap at oneKey)) + oneKey)" at="oneKey" in="potentialBoidsNeighboursMap" /> 
				</loop>
				
				<loop over="potentialBoidsNeighboursMap.keys" var="oneKey">
					<let var="microAgents" type="list" of="boids" value="potentialBoidsNeighboursMap at oneKey"/>
					
					<if condition="(length microAgents) &gt; 1">
						<create with="[ color::[rnd 255, rnd 255, rnd 255] ]" species="flock" number="1">
							<capture target="microAgents" />
						</create>
					</if>
				</loop>
			</if>
		</reflex>	
	</global>
	
	<entities>
		<species name="flock" skills="moving">
			<var type="float" name="cohesionIndex" init="two_boids_distance" value="two_boids_distance + ( ( length components ) / 2 ) + (shape.area/450)"/>
		
			<var type="list" name="passiveComponents" value="(components of_species boids) where ( !(empty each.disabled_behaviors) ) "/>
			<var type="bool" name="isActive" value="(length passiveComponents) = (length components)"/>
			<var type="bool" name="isPassive" value="(empty passiveComponents)"/>		
			<var type="bool" name="partialActive" value="!(empty passiveComponents) and ( (length passiveComponents) &lt; (length components) )"/>
						
			<var type="rgb" name="color" init="rgb [64, 64, 64]" />
			<var type="geometry" name="shape" value="polygon (components collect (boids each).location)" />

			
 			<reflex name="capture_release_boids" when="(time mod updateFrequency) = 0">
 				<let var="removed_components" value="components where ( ((boids each) distance_to location) &gt; cohesionIndex)"/>
 				<let var="added_components" value=" (( agents_overlapping (shape + cohesionIndex)) of_species boids) where ( empty (each.groups) ) "/>
 				
 				<if condition="!(empty removed_components)">
 					<release target="removed_components" />
 					<ask target="removed_components">
	 					<enable behavior="run_boids"/>
 					</ask>
 				</if>
 				
 				<if condition="!(empty added_components)">
 					<capture target="added_components" />
 				</if>
 			</reflex>

 			<reflex name="disposal" when="((length components) &lt; 2) and ((time mod disposalFrequency) = 0)">
 				<ask target="components">
 					<enable behavior="run_boids"/>
 				</ask>
 				<release target="components" />
 				<do action="die" />
 			</reflex>
 			
 			<reflex name="merge_nearby_flocks" when="(time mod mergeFrequency) = 0">
 				<let var="nearbyFlocks" type="list" of="flock" value=" ( (agents_overlapping (shape + mergingDistance)) of_species flock )"/>
 				
 				<if condition="!(empty nearbyFlocks)">
 					<set var="nearbyFlocks" value="nearbyFlocks sort_by (length each.components)"/>
 					<let var="largestFlock" value="nearbyFlocks at ((length nearbyFlocks) - 1)"/>
 					<remove item="largestFlock" from="nearbyFlocks"/>
 					
 					<let var="added_components" type="list" of="boids" value="[]"/>
 					<loop over="nearbyFlocks" var="oneFlock">
 						<loop over="oneFlock.components" var="com">
 							<add item="com" to="added_components"/>
 						</loop>
 					</loop>
 					
					<if condition="!(empty added_components)">
						<ask target="largestFlock">
							<capture target="added_components" />
						</ask>

	 					<loop over="nearbyFlocks" var="oneFlock">
	 						<ask target="oneFlock">
	 							<release target="components" />
	 							<do action="die"/>
	 						</ask>
	 					</loop>
					</if>
 				</if>
 			</reflex>
						
			<reflex name="switch_control">
				<loop over="components" var="com">
<!-- 					<if condition="!(empty ( ((boids com) neighbours_at (minimal_distance * 2) ) of_species obstacle))">  -->
					<if condition="!(empty ( ( agents_overlapping ((boids com).shape + (minimal_distance * 2))) of_species obstacle))">
						<ask target="com" as="boids">
							<enable behavior="run_boids"/>
						</ask>
						
						<else>
							<ask target="com" as="boids">
								<disable behavior="run_boids"/>
							</ask>
						</else>
					</if>
				</loop>
			</reflex>
			
			<reflex name="control_passive_components" when="!(empty passiveComponents)">
				<ask target="passiveComponents" as="boids">
					<do action="move">
						<arg name="speed" value="myself.speed"/>
 						<arg name="heading" value="towards (first boids_goal)"/>
					</do>
				</ask>
			</reflex>

			<aspect name="default">
				<draw shape="geometry" color="color"/>
			</aspect>
		</species>
	</entities>

	<output>
		<display name="Population" refresh_every="1">

			<chart name="Active groups vs. Passive groups" type="series">
				<data name="Active groups" value="length activeFlocks" color="rgb 'red'" />
				<data name="Passive groups" value="length passiveFlocks" color="rgb 'green'" />
				<data name="Parial active groups" value="length partialActiveFlocks" color="rgb 'blue'" />
			</chart>
		</display>
	</output>
</model>