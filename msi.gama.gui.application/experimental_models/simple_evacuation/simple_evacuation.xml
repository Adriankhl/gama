<model name="simple_evacuation">
	<global>
		<var name="bounds_data" type="string" init="'Bounds.shp'" const="true" />
		<var name="roads_data" type="string" init="'Roads.shp'" const="true" />

		<var name="people_shape" type="geometry" init="circle people_size" const="true" />
		<var name="people_size" type="float" init="1" min="0.5" max="6" parameter="Size" category="People" />
		<var name="people_number" type="int" init="300" min="1" max="1000" parameter="Number" category="People" />
		<var name="people_color" type="rgb" init="rgb 'green'" parameter="Color" category="People" />
		
		<var name="people_group_height" type="float" init="6" min="4" max="10" parameter="Height" category="People group" />
		<var name="people_group_length_proba" type="float" init="0.6" min="0.2" max="1" parameter="People group length / Road length" category="People group" />
		<var name="people_group_color" type="rgb" init="rgb 'blue'" parameter="Color" category="People group" />
		<var name="hibernating_proba" type="float" init="0.9" min="0.1" max="0.98" parameter="Hibernating probability" category="People group" />
		
		<init>
			<create species="bounds" from="bounds_data" />
			<create species="road" from="roads_data" />
			
			<create species="people" number="people_number" with="[ my_road :: ((list road) at 0) ]">
				<let var="rnd_loc" type="location" value="any_location_in (my_road.shape)" />
				
				<set var="location" value="rnd_loc" />
				<set var="shape" value="people_shape at_location location" />
				<set var="source" value="(my_road.shape).points at 0" />
				<set var="destination" value="(my_road.shape).points at 1" />
				<set var="heading" value="source towards destination" />
			</create>
		</init>
	</global>
	
	<entities>
		<species name="bounds" skills="situated">
			<aspect name="default">
				<draw text="'Total people : ' + ( string ( ( length (list people)) + ( sum ( (list people_group) collect each.hibernating_people  ) ) ) ) " at="{40, 100}" color="rgb 'red'" size="20" />
				<draw text="'Actively moving people : ' + (string (length (list people)))" at="{40, 120}" color="rgb 'red'" size="20" />
				<draw text="'Hibernating people in group : ' + (string  ( sum ( (list people_group) collect each.hibernating_people  ) ) )" at="{40, 140}" color="rgb 'red'" size="20" />
			</aspect>
		</species>
		
		<species name="road" skills="situated">
			<init>
				<create species="people_group" with="[ my_road :: self]" />
			</init>
		
			<aspect name="default">
				<draw shape="geometry" color="rgb 'black'" />
			</aspect>
		</species>
		
		<species name="people" skills="situated">
			<var name="my_road" type="road" />
			<var name="source" type="point" />
			<var name="destination" type="point" />
			<var name="speed" type="float" />
			
			<init>
				<set var="speed" value="0.3 + (rnd 1.7)" />
			</init>
		
			<reflex name="move">
				<if condition="location.x = destination.x">
					<set var="location" value="source" />
					
					<else>
						<let var="next_x" type="float" value="location.x + speed" />
						<if condition="next_x &gt; destination.x">
							<set var="location" value="destination" />
						
							<else>
								<set var="location" value="{next_x, location.y}" />
							</else>
						</if>
					</else>
				</if>
			</reflex>
			
			<aspect name="default">
				<draw shape="geometry" color="people_color" at="location" />
			</aspect>
		</species>
		
		<species name="people_group" skills="situated">
			<var name="my_road" type="road" />
			<var name="hibernating_people" type="int" init="0" />
			
			<init>
				<let var="length" type="float" value="(my_road.shape).width * people_group_length_proba" />
				<set var="shape" value="(rectangle {length, people_group_height}) at_location (my_road.location)" />
			</init>
			
			<action name="hibernate_incoming_people">
				<let var="incoming_people" type="list" of="people" value="((list people) overlapping self)" />
				<if condition="!(empty incoming_people)">
					<set var="hibernating_people" value="hibernating_people + (length incoming_people)" />
					<ask target="incoming_people">
						<do action="die" />
					</ask>
				</if>
			</action>
			
			<action name="recreate_outgoing_people">
				<create species="people" number="1" with="[ my_road :: my_road ]">
					<set var="source" value="(my_road.shape).points at 0" />
					<set var="destination" value="(my_road.shape).points at 1" />
					<set var="heading" value="source towards destination" />
					
					<let var="x_magnitude" type="float" value="people_group_length_proba * (destination.x - (my_road.location).x)" />
					<set var="location" value="{(my_road.location).x + x_magnitude + people_size + (rnd (5 * (int people_size))), (my_road.location).y}" />
					<set var="shape" value="people_shape at_location location" />
				</create>
						
				<set var="hibernating_people" value="hibernating_people - 1" />
			</action>
			
			<update>
				<do action="hibernate_incoming_people" />
				
				<if condition="(hibernating_people &gt; (hibernating_proba * people_number)) or ( (rnd 5) &gt; 4 )">
					<do action="recreate_outgoing_people" />
				</if>
			</update>
			
			<aspect>
				<draw shape="geometry" color="people_group_color" at="location" />
			</aspect>
		</species>
	</entities>
	
	<environment bounds="bounds_data" />
	
	<output>
		<display name="Display">
			<species name="road" aspect="default" transparency="0.5" />
			<species name="people" aspect="default" transparency="0.5" />
			<species name="people_group" aspect="default" transparency="0.5" />
			<species name="bounds" aspect="default" transparency="0.5" />
		</display>
	</output>
</model>