<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<model name="insectmodel">
<!--modelClass name="msi.gama.kernel.Simulation"/-->
	<global>
		<!-- chargement d'une carte de village-->
		<var type="matrix" name="map1" init="file 'carteVillage.png' as_matrix {gridSize,gridSize}" const="true"/>
		<!-- VARIABLES-->
		<var type="int" name="time" init="0" max="10000"/>
		<var type="int" name="step" init="1day" const="true"/>
		<var type="int" name="gridSize" init="100" const="true" />
		
		<!--vent-->
		<var type="bool" name="vent_Juillet_Decembre" parameter="true" init="true"/>
		<!--synchronisation-->
		<var type="bool" name="avec_synchronisation"  parameter="true" init="true"/>
		
		<!--nombre d'insecte-->
		<var type="int" name="nb_oeufs" parameter="true" init="0"/>
		<var type="int" name="nb_nymphes" parameter="true" init="0"/>
		<var type="int" name="nb_adultes" parameter="true" init="0"/>
		
		<!--COULEUR-->
		<!--cultivable-->
		<var type="rgb" name="gris" init="rgb [192,192,192]" const="true"/>
		<var type="rgb" name="grisFonce" init="rgb [128,128,128]" const="true"/>
		<!--ferme-->
		<var type="rgb" name="blanc" init="rgb 'white'" const="true"/>
		<!--fleuve-->
		<var type="rgb" name="bleu" init="rgb [150,225,255]" const="true"/>
		<!--arbre-->
		<var type="rgb" name="vert" init="rgb [0,150,0]" const="true"/>
		<!--rue-->
		<var type="rgb" name="jauneClair" init="rgb [255,230,210]" const="true"/>
		<var type="rgb" name="vertFonce" init="rgb [128,128,64]" const="true"/>
		
		<!-- Many agents can move to one cell at the same time -->
		<var type="bool" name="multiagent" value="true" const="true"/>

		<!--direction du vent -->
		<reflex name="ventMont" when="(int(time % 365)) = 0">
			<set var="vent_Juillet_Decembre" value="vent_Juillet_Decembre"/>	
<!--			<do action="debug">-->
<!--				<arg name="message" value="name +'vent_Juillet_Decembre.........................: '+vent_Juillet_Decembre"/>-->
<!--			</do>-->
		</reflex>

		<reflex name="ventDescent" when="(int(time%365)) = 183">	<!--changement de la direction-->
			<set var="vent_Juillet_Decembre" value="!vent_Juillet_Decembre"/>	
<!--			<do action="debug">-->
<!--				<arg name="message" value="name +'vent_Juillet_Decembre.........................: '+vent_Juillet_Decembre"/>-->
<!--			</do>-->
		</reflex>

	</global>

<!--ENVIRONNEMENT-->
	<environment>		
		<grid name="village_grid" width="gridSize" height="gridSize"  neighbours="8" torus="true">
			<var type="rgb" name="color" init="map1 at {grid_x, grid_y}"/>
			<var type="bool" name="multiagent" value="true" const="true"/>
			<var type="village_grid" name="place" init="village_grid location"/>
			<var type="bool" name="estFleuve" init="false"/>
			<var type="bool" name="estFerme" init="false"/>
			<var type="bool" name="estRue" init="false"/>
			<var type="bool" name="estArbre" init="false"/>
			<var type="bool" name="estCultivable" init="false"/>
			<var type="bool" name="estRiziere" init="false"/>
			<var type="rgb" name="oldColor" init="nil"/>
			<var type="bool" name="nouvelleSaison" init="false"/>
			<var type="int" name="saison" init="0"/>
			<!--etat d'infection de la riziere-->
			<var type="string" name="etat_infection" init="'_'"/>
			<!--jour survi de l'insecte-->
			<var type="int" name="jourSurvi" init="0"/>
		
			<var type="float" name="oeufs" init="nil"/>
			<var type="float" name="nymphes" init="nil"/>
			<var type="float" name="nymphes_tmp" init="nil"/>
			
			<var type="float" name="adultes" init="nil"/>
			<var type="float" name="MAL" init="nil"/>
			<var type="float" name="FAL" init="nil"/>
			<var type="float" name="FAC" init="nil"/>
			<var type="float" name="MAC" init="nil"/>
			
			<var type="float" name="adultes_tmp" init="nil"/>
			<var type="float" name="FAL_tmp" init="nil"/>
			<var type="float" name="MAL_tmp" init="nil"/>
			<var type="float" name="FAC_tmp" init="nil"/>
			<var type="float" name="MAC_tmp" init="nil"/>
			
			<var type="float" name="oeufs_total" init="nil"/>
			<var type="float" name="nymphes_total" init="nil"/>
			<var type="float" name="adultes_total" init="nil"/>

		<!--INITIALISATION des PLACES -->		
			<init> 
				<!--Fleuve-->
				<if condition="color = bleu">
					<set var="estFleuve" value="true"/>
				</if>
				<!--Rue-->
				<if condition="(color = jauneClair) or (color = vertFonce)">
					<set var="estRue" value="true"/>
				</if>
				<!--Arbre-->					
				<if condition="(color = vert)">
					<set var="estArbre" value="true"/>
				</if>
				
				<!-- Ciutivable -->
				<if condition="color = gris">
					<set var="estCultivable" value="true"/>
				</if>
				<!-- ferme -->
				<if condition="color= blanc">
					<set var="estFerme" value="true"/>
					<create species="ferme" number="1">
						<set var="location" value="myself.location"/>
					</create>
				</if>
				<!-- souvenir de la couleur-->
				<set var="oldColor" value="self.color"/>

			</init>
			
			<!--Ajout des insectes dans les rizieres ayant de jeunes pousses de riz-->
			<reflex when="((self.nouvelleSaison) and (self.saison=1))">
				<if condition="self.estRiziere">
					<set var="self.oeufs" value="nb_oeufs"/>
					<set var="self.nymphes" value="nb_nymphes"/>
					<set var="self.adultes" value="nb_adultes"/>
					<set var="self.FAC" value="int ((self.adultes*0.7)+((self.adultes*(rnd(8)/100))))"/>
					<set var="self.FAL" value="int ((self.adultes*0.8)-self.FAC)"/>
					<set var="self.MAC" value="int ((self.adultes*0.15)-((self.adultes*(rnd(5)/100))))"/>
					<set var="self.MAL" value="int (self.adultes-(self.MAC+self.FAL+self.FAC))"/>									
				</if>
				<set var="self.nouvelleSaison" value="false"/>
			</reflex>
			
			<!--Recensements des FAL, FAC, MAL, MAC parmi le nombre des insectes adultes dans une riziere-->
			<reflex when="((int(time%7))=0) ">
				<if condition="self.estRiziere">
					<if condition="((self.adultes) &gt; 0)">
						<!--Epiaison-Riz mûr: âge 3
							Le nombre des femelles et celui des mâles sont égaux.
							L'insecte adulte à ailes longues représente plus de 80% de la population. (pour émigrer)
						-->
						<if condition="(riziere (self.location)).ageRiz=3">						
							<set var="FAC" value="int ((self.adultes*0.02)+(self.adultes*(rnd(6)/100)))"/>		
							<set var="MAC" value="int ((self.adultes*0.1)-(self.FAC))"/>
							<set var="FAL" value="int ((self.adultes*0.5)-(self.FAC))"/>						
							<set var="MAL" value="int (self.adultes-(self.FAL+self.FAC+self.MAC))"/>	
						<else>
						<!--Riz jeune: âge 0, 1, 2
							Le nombre des femelles est quatre fois plus important que celui des mâles.
							L'insecte adulte à ailes courtes représente plus de 80% de la population.
						-->
							<set var="FAC" value="int ((self.adultes*0.7)+((self.adultes*(rnd(8)/100))))"/>		
							<set var="FAL" value="int ((self.adultes*0.8)-self.FAC)"/>							
							<set var="MAC" value="int ((self.adultes*0.15)-((self.adultes*(rnd(5)/100))))"/>
							<set var="MAL" value="int (self.adultes-(self.MAC+self.FAL+self.FAC))"/>									
						</else>
						</if>
					<else>	
						<set var="FAC" value="nil"/>
						<set var="FAL" value="nil"/>	
						<set var="MAC" value="nil"/>
						<set var="MAL" value="nil"/>
					</else>
					</if>				
				</if>
			</reflex>
			
			<!--REPRODUCTION-->
			<reflex name="reproduction" when="((int(time%7))=6)"> 
				<let name="oeufs_new" value="nil"/>
				<let name="nymphes_new" value="nil"/>
				<let name="adultes_new" value="nil"/>
						
				<set var="oeufs_new" value="float ((float (self.FAC_tmp*300)+float (self.FAC_tmp*rnd(100)))+(float (self.FAL_tmp*90)+float (self.FAC_tmp*rnd(20))))"/> 
				
				<set var="FAC_tmp" value="nil"/>
				<set var="FAL_tmp" value="nil"/>	
				<set var="MAC_tmp" value="nil"/>
				<set var="MAL_tmp" value="nil"/>
				
				<set var="adultes_new" value="self.nymphes_tmp*0.4"/>
				<set var="nymphes_tmp" value="self.nymphes"/>
				
				<if condition="self.estRiziere">
					<!--AVEC TAUX DE MORTALITE 3.5% par jour, apres 7 jours on a (3.5%*7)-->
					<set var="adultes_tmp" value="int (self.adultes-(self.adultes*0.035*7))"/>
					<set var="FAL_tmp" value="int (self.FAL-(7*(self.FAL*0.035)))"/>
					<set var="MAL_tmp" value="int (self.MAL-(7*(self.MAL*0.035)))"/>
					<set var="FAC_tmp" value="int (self.FAC-(7*(self.FAC*0.035)))"/>
					<set var="MAC_tmp" value="int (self.MAC-(7*(self.MAC*0.035)))"/>
					
					<set var="FAC" value="nil"/>
					<set var="FAL" value="nil"/>	
					<set var="MAC" value="nil"/>
					<set var="MAL" value="nil"/>
				</if>
				
				<set var="nymphes_new" value="self.oeufs*0.3"/>
				<set var="nymphes" value="int (self.nymphes_new)"/>
				<set var="oeufs" value="int (self.oeufs_new)"/>
				<set var="adultes" value="int (self.adultes_new)"/>
				
				<!-- INSECTES TOTAUX-->		
				<!--set var="oeufs_total" value="self.oeufs"/>
				<set var="nymphes_total" value="self.nymphes+self.nymphes_tmp"/-->
				<set var="adultes_total" value="self.adultes+self.adultes_tmp"/>
				
				<!--Ajout de la couleur pour exprimer l'état d'infection-->
				<let name="densite2" value="self.adultes_total"/>
				<set var="densite2" value="densite2/100"/>
				
				<!--tres leger -->
				<if condition="((densite2 > 0) and (10 >= densite2))">
					<set var="self.etat_infection" value="'tres leger'"/>
				</if>
				
				<!-- leger -->
				<if condition="((densite2 > 10) and (2000 >= densite2))">
					<set var="self.color" value="rgb[255, 180, 180]"/>
					<set var="self.etat_infection" value="'leger'"/>
				</if>
				
				<!-- moyen -->
				<if condition="((densite2 > 2000) and (5000 >= densite2))">
					<set var="self.color" value="rgb[255, 80, 80]"/>
					<set var="self.etat_infection" value="'moyen'"/>
				</if>
				
				<!-- grave -->
				<if condition="((densite2 > 5000) and (10000 > densite2))">
					<set var="self.color" value="rgb[255, 0, 0]"/>
					<set var="self.etat_infection" value="'grave'"/>
				</if>
				
				<!-- tres grave -->
				<if condition="(densite2 >= 10000)">
					<set var="self.color" value="rgb[100, 0, 0]"/>
					<set var="self.etat_infection" value="'tres grave'"/>
				</if>
			</reflex>
			
			<var type="float" name="FALP" init="nil"/>
			<var type="float" name="FALP_tmp" init="nil"/>
			<var type="float" name="MALP" init="nil"/>
			<var type="float" name="MALP_tmp" init="nil"/>
			
			<var type="float" name="FALV" init="nil"/>
			<var type="float" name="FALV_tmp" init="nil"/>
			<var type="float" name="MALV" init="nil"/>
			<var type="float" name="MALV_tmp" init="nil"/>
			
			
			<var type="float" name="FAL_total" init="nil"/>
			<var type="float" name="MAL_total" init="nil"/>
			<var type="float" name="FAC_total" init="nil"/>
			<var type="float" name="MAC_total" init="nil"/>
			
			<var type="float" name="FALP_total" init="nil"/>
			<var type="float" name="MALP_total" init="nil"/>
			<var type="float" name="FALV_total" init="nil"/>
			<var type="float" name="MALV_total" init="nil"/>
			
			<var type="float" name="FALV_partage" init="nil"/>
			<var type="float" name="FALV_tmp_partage" init="nil"/>
			<var type="float" name="MALV_partage" init="nil"/>
			<var type="float" name="MALV_tmp_partage" init="nil"/>
			
			<!--PROPAGATION -->
			<reflex name="propagation">
				<!--Changement aleatoire de jourSurvi dans des cases de la grille-->
				<if condition="(self.estRiziere)">
					<set var="jourSurvi" value="3"/>
				<else>
					<set var="jourSurvi" value="rnd(2)"/>
				</else>
				</if>
				x
				<!--Si la case de la grille n'est pas une riziere-->
				<if condition="(!(self.estRiziere))">
					<if condition="((self.FALV_tmp > 0) or (self.FALV > 0) or (self.MALV_tmp > 0) or (self.MALV > 0))">
						<!--cible: une riziere au voisinage de la case-->
						<let name="cible" value="riziere ((one_of (self neighbours_at 7 where ((each.estRiziere=true)))).location)"/>
						<!--Si cible n'est pas une riziere ou c'est le riz mûr-->
						<if condition="((cible=nil) or (cible.ageRiz=3) or (cible.ageRiz=0))">
							<if condition="jourSurvi > 0">
								<set var="self.FALP" value="self.FALV"/>
								<set var="self.FALP_tmp" value="self.FALV_tmp"/>
								<set var="self.MALP" value="self.MALV"/>
								<set var="self.MALP_tmp" value="self.MALV_tmp"/>
								
								<set var="self.FALV" value="0"/>
								<set var="self.FALV_tmp" value="0"/>
								<set var="self.MALV" value="0"/>
								<set var="self.MALV_tmp" value="0"/>
								
								<let name="loc_X" value="((self.location) at 0)"/>
								<let name="loc_Y" value="((self.location) at 1)"/>
								
								<if condition="vent_Juillet_Decembre">
									<set var="loc_X" value="loc_X + 20"/>
									<set var="loc_Y" value="loc_Y - 20"/>
								<else>
									<set var="loc_X" value="loc_X - 20"/>
									<set var="loc_Y" value="loc_Y"/>
								</else>
								</if>
								<if condition="(loc_X >=  gridSize)">
									<set var="loc_X" value="(loc_X -  gridSize)"/>
								</if>
								<if condition="(0 > loc_X)">
									<set var="loc_X" value="( gridSize + loc_X)"/>
								</if>
								<if condition="(loc_Y >=  gridSize)">
									<set var="loc_Y" value="(loc_Y -  gridSize)"/>
								</if>
								<if condition="(0 > loc_Y)">
									<set var="loc_Y" value="( gridSize + loc_Y)"/>
								</if>
								
								<let name="location_tmp1" value="{loc_X,loc_Y}"/>
								<set var="(village_grid location_tmp1).FALV" value="self.FALP"/>
								<set var="(village_grid location_tmp1).FALV_tmp" value="self.FALP_tmp"/>
								<set var="(village_grid location_tmp1).MALV" value="self.MALP"/>
								<set var="(village_grid location_tmp1).MALV_tmp" value="self.MALP_tmp"/>
								
								<set var="(village_grid location_tmp1).FALV_total" value="(village_grid location_tmp1).FALV+(village_grid location_tmp1).FALV_tmp"/>
								<set var="(village_grid location_tmp1).MALV_total" value="(village_grid location_tmp1).MALV+(village_grid location_tmp1).MALV_tmp"/>
							
								<set var="(village_grid location_tmp1).FAL_total" value="(((village_grid location_tmp1).FAL+(village_grid location_tmp1).FAL_tmp)+((village_grid location_tmp1).FALV+(village_grid location_tmp1).FALV_tmp))"/>
								<set var="(village_grid location_tmp1).MAL_total" value="(((village_grid location_tmp1).MAL+(village_grid location_tmp1).MAL_tmp)+((village_grid location_tmp1).MALV+(village_grid location_tmp1).MALV_tmp))"/>
								<set var="(village_grid location_tmp1).FAC_total" value="(village_grid location_tmp1).FAC+(village_grid location_tmp1).FAC_tmp"/>
								<set var="(village_grid location_tmp1).MAC_total" value="(village_grid location_tmp1).MAC+(village_grid location_tmp1).MAC_tmp"/>
		
								<set var="(village_grid location_tmp1).adultes_total" value="(((village_grid location_tmp1).FAL_total+(village_grid location_tmp1).MAL_total)+((village_grid location_tmp1).FAC_total+(village_grid location_tmp1).MAC_total))"/>
								<let name="densite3" value="(village_grid location_tmp1).adultes_total"/>
								<set var="densite3" value="densite3/100"/>
								
								<!--Ajout de la couleur pour exprimer l'état d'infection-->
								<if condition="!((village_grid location_tmp1).estRiziere)">
									<set var="(village_grid location_tmp1).color" value="(village_grid location_tmp1).oldColor"/>
								</if>
								
								<!--tres leger -->
								<if condition="((densite3 > 0) and (10 >= densite3))">
									<set var="(village_grid location_tmp1).etat_infection" value="'tres leger'"/>
								</if>
								
								<!-- leger -->
								<if condition="((densite3 > 10) and (2000 >= densite3))">
									<set var="(village_grid location_tmp1).color" value="rgb[255, 180, 180]"/>
									<set var="(village_grid location_tmp1).etat_infection" value="'leger'"/>
								</if>
								
								<!-- moyen -->
								<if condition="((densite3 > 2000) and (5000 >= densite3))">
									<set var="(village_grid location_tmp1).color" value="rgb[255, 80, 80]"/>
									<set var="(village_grid location_tmp1).etat_infection" value="'moyen'"/>
								</if>
								
								<!-- grave -->
								<if condition="((densite3 > 5000) and (10000 > densite3))">
									<set var="(village_grid location_tmp1).color" value="rgb[255, 0, 0]"/>
									<set var="(village_grid location_tmp1).etat_infection" value="'grave'"/>
								</if>
								
								<!-- tres grave -->
								<if condition="(densite3 >= 10000)">
									<set var="(village_grid location_tmp1).color" value="rgb[100, 0, 0]"/>
									<set var="(village_grid location_tmp1).etat_infection" value="'tres grave'"/>
								</if>
								
								<set var="self.FALP" value="0"/>
								<set var="self.FALP_tmp" value="0"/>
								<set var="self.MALP" value="0"/>
								<set var="self.MALP_tmp" value="0"/>
								
							<else>
								<set var="self.FALV_tmp" value="0"/>
								<set var="self.FALV" value="0"/>
								<set var="self.MALV_tmp" value="0"/>
								<set var="self.MALV" value="0"/>
								<set var="self.FALV_total" value="0"/>
							</else>
							</if>
						<!--Si cible: riz jeune-->
						<else> 
							<let name="rizJeune" value=" self.cible"/>
							<let name="champsRizJeune" value="((self.rizJeune).maFerme).rizieres"/>
				
							<set var="FALV_partage" value="self.FALV/length(champsRizJeune)"/>
							<set var="FALV_tmp_partage" value="self.FALV_tmp/length(champsRizJeune)"/>
							<set var="MALV_partage" value="self.MALV/length(champsRizJeune)"/>
							<set var="MALV_tmp_partage" value="self.MALV_tmp/length(champsRizJeune)"/>
							
							<set var="self.FALV_tmp" value="0"/>
							<set var="self.FALV" value="0"/>
							<set var="self.MALV_tmp" value="0"/>
							<set var="self.MALV" value="0"/>
							
							<!-- Ajout du nbPartage pour chaque champRizJeune-->
							<loop while="(!(empty(champsRizJeune)))">
								<let name="champRizJeune" value=" (one_of self.champsRizJeune)"/>
								<set var="(village_grid (self.champRizJeune)).FAL" value="(village_grid (self.champRizJeune)).FAL+self.FALV_partage"/>
								<set var="(village_grid (self.champRizJeune)).FAL_tmp" value="(village_grid (self.champRizJeune)).FAL_tmp+self.FALV_tmp_partage"/>
								<set var="(village_grid (self.champRizJeune)).MAL" value="(village_grid (self.champRizJeune)).MAL+self.MALV_partage"/>
								<set var="(village_grid (self.champRizJeune)).MAL_tmp" value="(village_grid (self.champRizJeune)).MAL_tmp+self.MALV_tmp_partage"/>
								<set var="champsRizJeune" value="self.champsRizJeune-self.champRizJeune"/>
							</loop>
							<set var="FALV_partage" value="0"/>
							<set var="FALV_tmp_partage" value="0"/>
							<set var="MALV_partage" value="0"/>
							<set var="MALV_tmp_partage" value="0"/>
						</else>
						</if>
					
					<else>
						<set var="FALV_partage" value="0"/>
						<set var="FALV_tmp_partage" value="0"/>
						<set var="MALV_partage" value="0"/>
						<set var="MALV_tmp_partage" value="0"/>
					</else>
					</if>	
					
				<!--Si la case de la grille est une riziere-->
				<else>
					<!--Si c'est une riziere de l'âge 0, on la considere comme ce n'est pas une riziere car le riz est encore trop petit pour remarquer-->
					<if condition="((riziere(self.location)).ageRiz=0)">
						<if condition="((self.FALV_tmp > 0) or (self.FALV > 0) or (self.MALV_tmp > 0) or (self.MALV > 0))">
							<let name="cible1" value="riziere ((one_of (self neighbours_at 7 where ((each.estRiziere=true)))).location)"/>
							<if condition="((cible1=nil) or (cible1.ageRiz=3) or (cible1.ageRiz=0))">
								<if condition="jourSurvi > 0">
									<set var="self.FALP" value="self.FALV"/>
									<set var="self.FALP_tmp" value="self.FALV_tmp"/>
									<set var="self.MALP" value="self.MALV"/>
									<set var="self.MALP_tmp" value="self.MALV_tmp"/>
									
									<set var="self.FALV" value="0"/>
									<set var="self.FALV_tmp" value="0"/>
									<set var="self.MALV" value="0"/>
									<set var="self.MALV_tmp" value="0"/>
									
									<let name="loc_X1" value="((self.location) at 0)"/>
									<let name="loc_Y1" value="((self.location) at 1)"/>
									
									<!--Propagation selon la direction du vent-->
									<if condition="vent_Juillet_Decembre">
										<set var="loc_X1" value="loc_X1 + 20"/>
										<set var="loc_Y1" value="loc_Y1 - 20"/>
									<else>
										<set var="loc_X1" value="loc_X1 - 20"/>
										<set var="loc_Y1" value="loc_Y1"/>
									</else>
									</if>
									
									<if condition="(loc_X1 >=  gridSize)">
										<set var="loc_X1" value="(loc_X1 -  gridSize)"/>
									</if>
									<if condition="(0 > loc_X1)">
										<set var="loc_X1" value="( gridSize + loc_X1)"/>
									</if>
									
									<if condition="(loc_Y1 >=  gridSize)">
										<set var="loc_Y1" value="(loc_Y1 -  gridSize)"/>
									</if>
									<if condition="(0 > loc_Y1)">
										<set var="loc_Y1" value="( gridSize + loc_Y1)"/>
									</if>
									
									<let name="location_tmp2" value="{loc_X1,loc_Y1}"/>
									<set var="(village_grid location_tmp2).FALV" value="self.FALP"/>
									<set var="(village_grid location_tmp2).FALV_tmp" value="self.FALP_tmp"/>
									<set var="(village_grid location_tmp2).MALV" value="self.MALP"/>
									<set var="(village_grid location_tmp2).MALV_tmp" value="self.MALP_tmp"/>
									
									<set var="(village_grid location_tmp2).FALV_total" value="(village_grid location_tmp2).FALV+(village_grid location_tmp2).FALV_tmp"/>
									<set var="(village_grid location_tmp2).MALV_total" value="(village_grid location_tmp2).MALV+(village_grid location_tmp2).MALV_tmp"/>
								
									<set var="(village_grid location_tmp2).FAL_total" value="(((village_grid location_tmp2).FAL+(village_grid location_tmp2).FAL_tmp)+((village_grid location_tmp2).FALV+(village_grid location_tmp2).FALV_tmp))"/>
									<set var="(village_grid location_tmp2).MAL_total" value="(((village_grid location_tmp2).MAL+(village_grid location_tmp2).MAL_tmp)+((village_grid location_tmp2).MALV+(village_grid location_tmp2).MALV_tmp))"/>
									<set var="(village_grid location_tmp2).FAC_total" value="(village_grid location_tmp2).FAC+(village_grid location_tmp2).FAC_tmp"/>
									<set var="(village_grid location_tmp2).MAC_total" value="(village_grid location_tmp2).MAC+(village_grid location_tmp2).MAC_tmp"/>
			
									<set var="(village_grid location_tmp2).adultes_total" value="(((village_grid location_tmp2).FAL_total+(village_grid location_tmp2).MAL_total)+((village_grid location_tmp2).FAC_total+(village_grid location_tmp2).MAC_total))"/>
			
									<let name="densite4" value="(village_grid location_tmp2).adultes_total"/>
									<set var="densite4" value="densite4/100"/>
									
									<!--Ajout de la couleur pour exprimer l'état d'infection-->
									<if condition="!((village_grid location_tmp2).estRiziere)">
										<set var="(village_grid location_tmp2).color" value="(village_grid location_tmp2).oldColor"/>
									</if>
									
									<!--tres leger -->
									<if condition="((densite4 > 0) and (10 >= densite4))">
										<set var="(village_grid location_tmp2).etat_infection" value="'tres leger'"/>
									</if>
									<!-- leger -->
									<if condition="((densite4 > 10) and (2000 >= densite4))">
										<set var="(village_grid location_tmp2).color" value="rgb[255, 180, 180]"/>
										<set var="(village_grid location_tmp2).etat_infection" value="'leger'"/>
									</if>
									<!-- moyen -->
									<if condition="((densite4 > 2000) and (5000 >= densite4))">
										<set var="(village_grid location_tmp2).color" value="rgb[255, 80, 80]"/>
										<set var="(village_grid location_tmp2).etat_infection" value="'moyen'"/>
									</if>
									<!-- grave -->
									<if condition="((densite4 > 5000) and (10000 > densite4))">
										<set var="(village_grid location_tmp2).color" value="rgb[255, 0, 0]"/>
										<set var="(village_grid location_tmp2).etat_infection" value="'grave'"/>
									</if>
									<!-- tres grave -->
									<if condition="(densite4 >= 10000)">
										<set var="(village_grid location_tmp2).color" value="rgb[100, 0, 0]"/>
										<set var="(village_grid location_tmp2).etat_infection" value="'tres grave'"/>
									</if>
								
									<set var="self.FALP" value="0"/>
									<set var="self.FALP_tmp" value="0"/>
									<set var="self.MALP" value="0"/>
									<set var="self.MALP_tmp" value="0"/>
								<else>
									<set var="self.FALV_tmp" value="0"/>
									<set var="self.FALV" value="0"/>
									<set var="self.MALV_tmp" value="0"/>
									<set var="self.MALV" value="0"/>
									<set var="self.FALV_total" value="0"/>
								</else>
								</if>
							
							<!--Si cible: riz jeune-->
							<else> 
								<let name="rizJeune2" value=" self.cible1"/>
								<let name="champsRizJeune2" value="((self.rizJeune2).maFerme).rizieres"/>
								
								<set var="FALV_partage" value="self.FALV/length(champsRizJeune2)"/>
								<set var="FALV_tmp_partage" value="self.FALV_tmp/length(champsRizJeune2)"/>
								<set var="MALV_partage" value="self.MALV/length(champsRizJeune2)"/>
								<set var="MALV_tmp_partage" value="self.MALV_tmp/length(champsRizJeune2)"/>
								
								<set var="self.FALV_tmp" value="0"/>
								<set var="self.FALV" value="0"/>
								<set var="self.MALV_tmp" value="0"/>
								<set var="self.MALV" value="0"/>
								
								<!-- Ajout du nbPartage pour chaque champRizJeune-->
								<loop while="(!(empty(champsRizJeune2)))">
									<let name="champRizJeune2" value=" (one_of self.champsRizJeune2)"/>
									<set var="(village_grid (self.champRizJeune2)).FAL" value="(village_grid (self.champRizJeune2)).FAL+self.FALV_partage"/>
									<set var="(village_grid (self.champRizJeune2)).FAL_tmp" value="(village_grid (self.champRizJeune2)).FAL_tmp+self.FALV_tmp_partage"/>
									<set var="(village_grid (self.champRizJeune2)).MAL" value="(village_grid (self.champRizJeune2)).MAL+self.MALV_partage"/>
									<set var="(village_grid (self.champRizJeune2)).MAL_tmp" value="(village_grid (self.champRizJeune2)).MAL_tmp+self.MALV_tmp_partage"/>
									<set var="champsRizJeune2" value="self.champsRizJeune2-self.champRizJeune2"/>
								</loop>
								<set var="FALV_partage" value="0"/>
								<set var="FALV_tmp_partage" value="0"/>
								<set var="MALV_partage" value="0"/>
								<set var="MALV_tmp_partage" value="0"/>
							</else>
							</if>
						<else>
							<set var="FALV_partage" value="0"/>
							<set var="FALV_tmp_partage" value="0"/>
							<set var="MALV_partage" value="0"/>
							<set var="MALV_tmp_partage" value="0"/>
						</else>
						</if>	
						
					</if>
						
					<!--Si c'est une riziere de l'âge 3, épiaison-riz mûr-->
					<if condition="((riziere(self.location)).ageRiz=3)">
						<!--Si le jour resté à propager des insectes dans une rizière est suppérieure à 0 et la rizière n'est pas encore récoltée-->
						<if condition="((((riziere (self.location)).jourRestePropage) >= 0) and ((riziere (self.location)).state='estRepiquee'))">
							<!--Calcul du nombre d'insecte à propager par jour-->
							<set name="FALP" value="(self.FAL/2)+self.FALV"/>	<!--chaque jour, il y a une moitié d'insectes qui quitte la rizière-->
							<set name="FALP_tmp" value="(self.FAL_tmp/2)+self.FALV_tmp"/>
							<set name="MALP" value="(self.MAL/2)+self.MALV"/>
							<set name="MALP_tmp" value="(self.MAL_tmp/2)+self.MALV_tmp"/>
							
							<!--Mise à jour du nombre de FAL, FAL_tmp, MAL, MAL_tmp-->
							<set var="self.FAL" value="self.FAL-(self.FAL/2)"/>
							<set var="self.FAL_tmp" value="self.FAL_tmp-(self.FAL_tmp/2)"/> 
							<set var="self.MAL" value="self.MAL-(self.MAL/2)"/>
							<set var="self.MAL_tmp" value="self.MAL_tmp-(self.MAL_tmp/2)"/> 
							
							<let name="locX" value="((self.location) at 0)"/>
							<let name="locY" value="((self.location) at 1)"/>
							
							<!--Propagation selon la direction du vent-->
							<if condition="vent_Juillet_Decembre">
								<set var="locX" value="locX + 20"/>
								<set var="locY" value="locY - 20"/>
							<else>
								<set var="locX" value="locX - 20"/>
								<set var="locY" value="locY"/>
							</else>
							</if>
							<if condition="(locX >=  gridSize)">
								<set var="locX" value="(locX - gridSize)"/>
							</if>
							<if condition="(0 > locX)">
								<set var="locX" value="( gridSize + locX)"/>
							</if>
							
							<if condition="(locY >=  gridSize)">
								<set var="locY" value="(locY -  gridSize)"/>
							</if>
							<if condition="(0 > locY)">
								<set var="locY" value="( gridSize + locY)"/>
							</if>
							
							<let name="location_tmp" value="{locX,locY}"/>
							<set var="(village_grid location_tmp).FALV" value="self.FALP"/>
							<set var="(village_grid location_tmp).FALV_tmp" value="self.FALP_tmp"/>
							<set var="(village_grid location_tmp).MALV" value="self.MALP"/>
							<set var="(village_grid location_tmp).MALV_tmp" value="self.MALP_tmp"/>
				
							<set var="(village_grid location_tmp).FALV_total" value="(village_grid location_tmp).FALV+(village_grid location_tmp).FALV_tmp"/>
							<set var="(village_grid location_tmp).MALV_total" value="(village_grid location_tmp).MALV+(village_grid location_tmp).MALV_tmp"/>
						
							<set var="(village_grid location_tmp).FAL_total" value="(((village_grid location_tmp).FAL+(village_grid location_tmp).FAL_tmp)+((village_grid location_tmp).FALV+(village_grid location_tmp).FALV_tmp))"/>
							<set var="(village_grid location_tmp).MAL_total" value="(((village_grid location_tmp).MAL+(village_grid location_tmp).MAL_tmp)+((village_grid location_tmp).MALV+(village_grid location_tmp).MALV_tmp))"/>
							<set var="(village_grid location_tmp).FAC_total" value="(village_grid location_tmp).FAC+(village_grid location_tmp).FAC_tmp"/>
							<set var="(village_grid location_tmp).MAC_total" value="(village_grid location_tmp).MAC+(village_grid location_tmp).MAC_tmp"/>

							<set var="(village_grid location_tmp).adultes_total" value="(((village_grid location_tmp).FAL_total+(village_grid location_tmp).MAL_total)+((village_grid location_tmp).FAC_total+(village_grid location_tmp).MAC_total))"/>
							<let name="densite1" value="(village_grid location_tmp).adultes_total"/>
							<set var="densite1" value="densite1/100"/>
							
							<!--Ajout de la couleur pour exprimer l'état d'infection-->
							<if condition="!((village_grid location_tmp).estRiziere)">
								<set var="(village_grid location_tmp).color" value="(village_grid location_tmp).oldColor"/>
							</if>
							<!--tres leger -->
							<if condition="((densite1 > 0) and (10 >= densite1))">
								<set var="(village_grid location_tmp).etat_infection" value="'tres leger'"/>
							</if>
							<!-- leger -->
							<if condition="((densite1 > 10) and (2000 >= densite1))">
								<set var="(village_grid location_tmp).color" value="rgb[255, 180, 180]"/>
								<set var="(village_grid location_tmp).etat_infection" value="'leger'"/>
							</if>
							<!-- moyen -->
							<if condition="((densite1 > 2000) and (5000 >= densite1))">
								<set var="(village_grid location_tmp).color" value="rgb[255, 80, 80]"/>
								<set var="(village_grid location_tmp).etat_infection" value="'moyen'"/>
							</if>
							<!-- grave -->
							<if condition="((densite1 > 5000) and (10000 > densite1))">
								<set var="(village_grid location_tmp).color" value="rgb[255, 0, 0]"/>
								<set var="(village_grid location_tmp).etat_infection" value="'grave'"/>
							</if>
							<!-- tres grave -->
							<if condition="(densite1 >= 10000)">
								<set var="(village_grid location_tmp).color" value="rgb[100, 0, 0]"/>
								<set var="(village_grid location_tmp).etat_infection" value="'tres grave'"/>
							</if>
						
							<set name="FALP" value="0"/>
							<set name="FALP_tmp" value="0"/>
							<set name="MALP" value="0"/>
							<set name="MALP_tmp" value="0"/>
							<set var="(riziere (self.location)).jourRestePropage" value="((riziere (self.location)).jourRestePropage-1)"/>
						<else>
							<set name="FALP" value="0"/>
							<set name="FALP_tmp" value="0"/>
							<set name="MALP" value="0"/>
							<set name="MALP_tmp" value="0"/>
						</else>
						</if>
					</if>
					
					<!--Si c'est une riziere de l'âge 1 ou 2, riz jeune-->
					<if condition="(((riziere(self.location)).ageRiz=1) or ((riziere(self.location)).ageRiz=2))">
						<let name="champsRizJeune1" value="((riziere(self.location)).maFerme).rizieres"/>
						<set var="FALV_partage" value="self.FALV/length(champsRizJeune1)"/>
						<set var="FALV_tmp_partage" value="self.FALV_tmp/length(champsRizJeune1)"/>
						<set var="MALV_partage" value="self.MALV/length(champsRizJeune1)"/>
						<set var="MALV_tmp_partage" value="self.MALV_tmp/length(champsRizJeune1)"/>
						
						<set var="self.FALV_tmp" value="0"/>
						<set var="self.FALV" value="0"/>
						<set var="self.MALV_tmp" value="0"/>
						<set var="self.MALV" value="0"/>
						
						<!-- Ajout du nbPartage pour chaque champRizJeune1-->	
						<loop while="(!(empty(champsRizJeune1)))">
							<let name="champRizJeune1" value=" (one_of self.champsRizJeune1)"/>
							<set var="(village_grid (self.champRizJeune1)).FAL" value="(village_grid (self.champRizJeune1)).FAL + self.FALV_partage"/>
							<set var="(village_grid (self.champRizJeune1)).FAL_tmp" value="(village_grid (self.champRizJeune1)).FAL_tmp + FALV_tmp_partage"/>
							<set var="(village_grid (self.champRizJeune1)).MAL" value="(village_grid (self.champRizJeune1)).MAL + self.MALV_partage"/>
							<set var="(village_grid (self.champRizJeune1)).MAL_tmp" value="(village_grid (self.champRizJeune1)).MAL_tmp + MALV_tmp_partage"/>
							<set var="champsRizJeune1" value="self.champsRizJeune1-self.champRizJeune1"/>
						</loop>
						
						<set var="FALV_partage" value="0"/>
						<set var="FALV_tmp_partage" value="0"/>
						<set var="MALV_partage" value="0"/>
						<set var="MALV_tmp_partage" value="0"/>
					</if>
				</else>
			</if>		
		</reflex>
					
		<!--Calcul du nombre total des insectes et ajout de la couleur pour exprimer l'état d'infection-->
		<reflex name="densite_adultes_couleur">
			<set var="oeufs_total" value="self.oeufs"/>
			<set var="nymphes_total" value="self.nymphes+self.nymphes_tmp"/>
			
			<set var="self.FALV_total" value="self.FALV+self.FALV_tmp"/>
			<set var="self.MALV_total" value="self.MALV+self.MALV_tmp"/>
		
			<set var="self.FAL_total" value="(self.FAL+self.FAL_tmp)"/>
			<set var="self.MAL_total" value="(self.MAL+self.MAL_tmp)"/>
			<set var="self.FAC_total" value="self.FAC+self.FAC_tmp"/>
			<set var="self.MAC_total" value="self.MAC+self.MAC_tmp"/>

			<set var="self.adultes_total" value="((self.FAL_total+self.MAL_total)+(self.FAC_total+self.MAC_total))"/>
			<let name="densite" value="self.adultes_total"/>
			<set var="densite" value="densite/100"/>
			<if condition="!(self.estRiziere)">
				<set var="self.color" value="self.oldColor"/>
			<else>
				<if condition="((riziere (self.location).state)='terreLibre')">
					<set var="self.color" value="grisFonce"/>
				</if>
			</else>
			</if>
			<!--tres leger -->
			<if condition="((densite > 0) and (10 >= densite))">
				<set var="etat_infection" value="'tres leger'"/>
			</if>
			<!-- leger -->
			<if condition="((densite > 10) and (2000 >= densite))">
				<set var="self.color" value="rgb[255, 180, 180]"/>
				<set var="etat_infection" value="'leger'"/>
			</if>
			<!-- moyen -->
			<if condition="((densite > 2000) and (5000 >= densite))">
				<set var="self.color" value="rgb[255, 80, 80]"/>
				<set var="etat_infection" value="'moyen'"/>
			</if>
			<!-- grave -->
			<if condition="((densite > 5000) and (10000 > densite))">
				<set var="self.color" value="rgb[255, 0, 0]"/>
				<set var="etat_infection" value="'grave'"/>
			</if>
			<!-- tres grave -->
			<if condition="(densite >= 10000)">
				<set var="self.color" value="rgb[100, 0, 0]"/>
				<set var="etat_infection" value="'tres grave'"/>
			</if>
		</reflex>
	</grid>
</environment>

<!--AGENTS-->
  <entities>
  <!--Agent FERME-->
	<species name="ferme" skills="visible, situated" control="emf"> 
		<var type="string" name="etat_agri" init="''"/>
		<var type="rgb" name="color" init="blanc"/>
		<var type="list" name="rizieres" init="[]"/>
		<var type="agri" name="agriculteur" init="nil"/>
		<var type="int" name="nb_jour_AttendreSemer" value="(rnd(26)+14)"/>
		<var type="int" name="jour_RndPropage" value="(rnd(5)+7)"/>
		
		<init>
			<if condition="avec_synchronisation">
				<set var="nb_jour_AttendreSemer" value="14"/>
			</if>
			<let name="zones" value="((village_grid (self.location) neighbours_at 1) where (empty   each.agents))"/>
			<loop while="zones!=[]">
				<if condition="village_grid(first zones).estCultivable">
					<create species="riziere" number="1">
						<set var="location" value="(first myself.zones)"/> 
						<set var="color" value="grisFonce"/>			
						<set var="maFerme" value="myself"/>
					</create>
					<set var="(village_grid first zones).estRiziere" value="true"/>
					<set var="rizieres" value="rizieres +(first zones).location"/>
				</if>
				<set var="zones" value="zones-(first zones)"/>
			</loop>
			
			<create species="agri" number="1">
				<set var="location" value="myself.location"/>
				<set var="maFerme" value="myself"/>
				<set var="temps_attendreSemer" value="myself.nb_jour_AttendreSemer"/>
			</create>
			<set var="agriculteur" value="agri (self.location)"/>
		</init>
	</species>
		
	<!--Agent AGRICULTEUR-->
	<species name="agri" skills="situated, visible, moving" control="fsm">
		<var type="rgb" name="color" init="rgb 'black'"/>
		<var type="village_grid" name="place" value="village_grid location" />
		<var type="ferme" name="maFerme" init="nil"/>
		<var type="int" name="timeLeft" init="0"/>
		<var type="int" name="temps_attendreSemer" init="nil"/>
		<var type="int" name="temps_a_propager" init="nil"/>
	
		<!--ACTIONS-->
		<!-- agriculteur ne peut pas traverser des fleuves-->
		<action name="nonTraverser"> 
			<let var="dest" value="one_of (place neighbours_at 1)"/>
				<if condition="dest != nil">
					<if condition = "!dest.estFleuve">				
						<set var="location" value="dest"/>
					</if>
				</if>
		</action>
				
		<!--Action: Semailles-->
		<action name="semailles">
<!--			<do action="debug">-->
<!--				<arg name="message" value="name+' vient de SEMER toutes ses rizieres '"/>-->
<!--			</do>-->
		</action>
		
		<!--Action: Repiquage-->
		<action name="repiquage">
<!--			<do action="debug">-->
<!--				<arg name="message" value="name+' vient de REPIQUER toutes ses rizieres '"/>-->
<!--			</do>-->
		</action>
		
		<!--Action: Récolte-->
		<action name="recolte">
<!--			<do action="debug">-->
<!--				<arg name="message" value="name+' vient de RECOLTER toutes ses rizieres '"/>-->
<!--			</do>-->
		</action>
		
		<!--Action: Retour à la maison-->
		<action name="goHome">
			<do action="goto">
				<arg name="target" value="maFerme"/>
				<arg type="float" name="speed" value="3"/>
			</do>
		</action>
				
		<!--ETATS-->
		<state name="attendreSemer" initial="true">
			<enter>
				<set var="self.timeLeft" value="self.temps_attendreSemer * step"/>
			</enter>
			<set var="self.timeLeft" value="self.timeLeft-1"/>
			<!--do action="debug">
				<arg name="message" value="name+' incremente timeLeft de ATTENDRE SEMER: '+ timeLeft"/>
			</do-->
			<transition to="chercherSemer" when="self.timeLeft=0">
				<set var="color" value="rgb 'black'"/>
<!--				<do action="debug">-->
<!--					<arg name="message" value="name+' à la recherche des champs pour semer'"/>-->
<!--				</do>-->
			</transition>
		</state>
		
		<state name="chercherSemer">
			<set var="color" value="rgb 'black'"/>
			<let name="nonSemee" value="(riziere one_of((self.maFerme).rizieres))"/>
			<transition to="semer" when="nonSemee!=nil">
				<set var="maFerme.etat_agri" value="'semer'"/>
				<do action="goto">
					<arg name="target" value="nonSemee"/>
				</do>	
				<do action="semailles"/>
			</transition>
		</state>

		
		<state name="semer">
			<transition to="attendreRepiquer" when="true">
				<do action="goHome"/>
				<!--do action="debug">
					<arg name="message" value="name+' je suis à la maison'"/>
				</do-->
				<set var="color" value="bleu"/>
				<!--do action="debug">
					<arg name="message" value="name+' attendreRepiquer'"/>
				</do-->
			</transition>
		</state>
		
		<state name="attendreRepiquer">
			<enter>
				<set var="timeLeft" value="29 * step"/>
			</enter>
			<set var="timeLeft" value="timeLeft-1"/>
			<!--do action="debug">
				<arg name="message" value="name+' incremente timeLeft de ATTENDRE REPIQUER: '+ timeLeft"/>
			</do-->
			
			<!--Riz jeune de l'âge 1-->
				<if condition="timeLeft=14">
					<let name="rizieresAvecAge1" value="(((ferme(self.maFerme)).rizieres))"/>
					<loop while="(!(empty(self.rizieresAvecAge1)))">
						<let name="one_riz1" value="(one_of (self.rizieresAvecAge1))"/>
						<set var="(riziere one_riz1).ageRiz" value="1"/>
						
						<set var="(village_grid one_riz1).nouvelleSaison" value="true"/>
						<set var="(village_grid one_riz1).saison" value="(village_grid one_riz1).saison+1"/>
						<set var="rizieresAvecAge1" value="self.rizieresAvecAge1-(self.one_riz1)"/>
					</loop>
				</if>
		
			<transition to="chercherRepiquer" when="timeLeft=0">
				<set var="color" value="rgb 'black'"/>
<!--				<do action="debug">-->
<!--					<arg name="message" value="name+' à la recherche des champs pour Repiquer'"/>-->
<!--				</do>-->
			</transition>
		</state>
		
		<state name="chercherRepiquer">	
			<let name="nonRepiquee" value="(riziere one_of((self.maFerme).rizieres))"/>
			<transition to="repiquer" when="nonRepiquee!=nil"> 
				<set var="maFerme.etat_agri" value="'repiquer'"/>
				<do action="goto">
					<arg name="target" value="nonRepiquee"/>
				</do>
				<do action="repiquage"/>
			</transition>		
		</state>
			
		<state name="repiquer">
			<set var="color" value="rgb 'orange'"/>
			<do action="goHome"/>
			<!--do action="debug">
				<arg name="message" value="name+' je suis à la maison'"/>
			</do-->
			<set var="temps_attendreSemer" value="(self.maFerme).nb_jour_AttendreSemer"/>
			<if condition="avec_synchronisation">
				<set var="temps_attendreSemer" value="14"/>
			</if>
			<let name="listRiz" value="(((ferme(self.maFerme)).rizieres))"/> 
			<transition to="attendreRecolter" when="true">
				<set var="color" value="bleu"/>
<!--				<do action="debug">-->
<!--					<arg name="message" value="name+' attendreRecolter'"/>-->
<!--				</do>-->
			</transition>
		</state>
		
		<state name="attendreRecolter">
			<enter>
				<set var="timeLeft" value="59 * step"/>
			</enter>
			<set var="timeLeft" value="timeLeft-1"/>
			<!--do action="debug">
				<arg name="message" value="name+' incremente timeLeft de ATTENDRE RECOLTER: '+ timeLeft"/>
			</do-->
			
			<if condition="self.timeLeft=50">
				<set var="self.temps_a_propager" value="(self.maFerme).jour_RndPropage"/>
			</if>
		
			<if condition="(self.timeLeft=self.temps_a_propager)">
				<let name="listRiz" value="(((ferme(self.maFerme)).rizieres))"/>  
				<loop while="(!(empty(self.listRiz)))">
					<let name="riz" value="riziere (one_of (self.listRiz))"/>
					<set var="riz.jourRestePropage" value="7"/>
					<set var="listRiz" value="self.listRiz-(self.riz).location"/>
				</loop>
			</if>
		
			<!--Riz jeune de l'âge 2-->
			<if condition="timeLeft=30">
				<let name="rizieresAvecAge2" value="(((ferme(self.maFerme)).rizieres))"/>  
				<loop while="(!(empty(self.rizieresAvecAge2)))">
					<let name="one_riz2" value="riziere (one_of (self.rizieresAvecAge2))"/>
					<set var="one_riz2.ageRiz" value="2"/>
					<set var="rizieresAvecAge2" value="self.rizieresAvecAge2-(self.one_riz2).location"/>
				</loop>
			</if>

			<!--Riz mûe de l'âge 3-->
			<if condition="timeLeft=15">
				<let name="rizieresAvecAge3" value="(((ferme(self.maFerme)).rizieres))"/>  
				<loop while="(!(empty(self.rizieresAvecAge3)))">
					<let name="one_riz3" value="riziere (one_of (self.rizieresAvecAge3))"/>
					<set var="one_riz3.ageRiz" value="3"/>
					<set var="rizieresAvecAge3" value="self.rizieresAvecAge3-(self.one_riz3).location"/>
				</loop>
			</if>
		
			<transition to="chercherRecolter" when="timeLeft=0">
				<set var="color" value="rgb 'black'"/>
<!--				<do action="debug">-->
<!--					<arg name="message" value="name+' à la recherche des champs pour Recolter'"/>-->
<!--				</do>-->
			</transition>
		</state>
		
		<state name="chercherRecolter">
			<let name="nonRecoltee" value="(riziere one_of((self.maFerme).rizieres))"/>
			<transition to="recolter" when="nonRecoltee!=nil">
				<let name="rizieresAvecAge0" value="(((ferme (self.maFerme)).rizieres))"/>  
				<loop while="(!(empty(self.rizieresAvecAge0)))">
					<let name="one_riz0" value="riziere (one_of (self.rizieresAvecAge0))"/>
					<set var="one_riz0.ageRiz" value="0"/>
					<set var="rizieresAvecAge0" value="self.rizieresAvecAge0-(self.one_riz0).location"/>
				</loop>
				<set var="maFerme.etat_agri" value="'recolter'"/>
				<do action="goto">
					<arg name="target" value="nonRecoltee"/>
				</do>
				<do action="recolte"/>
			</transition>
		</state>
		
		<state name="recolter">
			<set var="(ferme(self.maFerme)).nb_jour_AttendreSemer" value="rnd(30)+14"/>
			<transition to="attendreSemer" when="true">
				<do action="goHome"/>
				<!--do action="debug">
					<arg name="message" value="name+' je suis à la maison'"/>
				</do-->
				<set var="color" value="bleu"/>
				<!--do action="debug">
					<arg name="message" value="name+' attendreSemer'"/>
				</do-->
			</transition>
		</state>
	</species>
	
	<!--Agent RIZIERE-->
	<species name="riziere" skills="situated, visible" control="fsm">
		<var type="rgb" name="color" init="blanc"/>
		<var type="ferme" name="maFerme" init="nil"/>
		<var type="int" name="ageRiz" init="0"/>
		<var type="int" name="jourRestePropage" init="-1"/>

	<!-- ETATS-->
		<state name="terreLibre" initial="true">
			<set var="color" value="grisFonce"/>
			<transition to="estSemee" when="((state='terreLibre') and (((self.maFerme).etat_agri)='semer'))">
				<set var="color" value="blanc"/>
			</transition>
		</state>
	
		<state name="estSemee">
			<transition to="estRepiquee" when="((state='estSemee') and (((self.maFerme).etat_agri)='repiquer'))">
				<set var="color" value="rgb 'yellow'"/>
			</transition>
		</state>
	
		<state name="estRepiquee">
			<transition to="terreLibre" when="((state='estRepiquee') and (((self.maFerme).etat_agri)='recolter'))">
				<!--do action="debug" when ="((agri location).state)='chercherRecolter'">
					<arg name="message" value="name+' estRecoltee et retourne à terreLibre'"/> 
				</do-->
				<set var="color" value="grisFonce"/>
				
				<!--les insectes adultes et les nymphes mourront lorsque l'agriculteur récolte leurs champs-->
				<set var="(village_grid (self.location)).FAL_tmp" value="0"/>
				<set var="(village_grid (self.location)).FAL" value="0"/>
				<set var="(village_grid (self.location)).MAL_tmp" value="0"/>
				<set var="(village_grid (self.location)).MAL" value="0"/>
			
				<set var="(village_grid (self.location)).FAC_tmp" value="0"/>
				<set var="(village_grid (self.location)).FAC" value="0"/>
				<set var="(village_grid (self.location)).MAC_tmp" value="0"/>
				<set var="(village_grid (self.location)).MAC" value="0"/>
			
				<set var="(village_grid (self.location)).nymphes" value="0"/>
				<set var="(village_grid (self.location)).nymphes_tmp" value="0"/>
				
				<set var="(village_grid (self.location)).adultes" value="0"/>
				<set var="(village_grid (self.location)).adultes_tmp" value="0"/>
				
				<!--Après d'avoir récoltées, il reste un nombre d'oeufs dans des rizières-->
				<set var="(village_grid (self.location)).oeufs" value="(rnd(10000))"/>
				
				<set var="(village_grid (self.location)).oeufs_total" value="(village_grid (self.location)).oeufs"/>
				<set var="(village_grid (self.location)).nymphes_total" value="(village_grid (self.location)).nymphes+(village_grid (self.location)).nymphes_tmp"/>
				<set var="(village_grid (self.location)).adultes_total" value="0"/>
				<set var="(village_grid (self.location)).color" value="grisFonce"/>
				<set var="(village_grid (self.location)).etat_infection" value="'_'"/>	
			</transition>
		</state>
	</species>
 </entities>
  
  <output>
	<display name="grid">
	 <grid name="village_grid" />
	 <species name="riziere"/>
	 <species name="ferme"/>
	 <species name="agri"/>
	</display>
    <inspect name="Agents" type="agent" refresh_every="1" />
	<inspect name="Species" type="species" refresh_every="100"/>
  </output>

</model>

