<?xml version="1.0" encoding="UTF-8"?>
<model name="schelling_emergence">
	<include file="/includes/segregation_agents.xml"/>
	
	<global>
		<var type="int" name="dimensions" init="40" min="5" parameter="Width and height of the environment:" category="Environment" />
		<var type="float" name="percent_similar_wanted" init="0.5" min="0" max="1" parameter="Desired percentage of similarity:" category="Population" />

		<var type="float" name="two_people_distance" init="1" min="1" parameter="Distance of two people" category="Group"/>
		<var type="int" name="mergeFrequency" init="1" min="1" parameter="Evaluation frequency of merge command" category="Group"/>
		<var type="int" name="creationFrequency" init="1" min="1" parameter="Evaluation frequency of creation command" category="Group"/>
		<var type="int" name="updateFrequency" init="1" min="1" parameter="Evaluation frequency of update command" category="Group"/>
		<var type="int" name="disposalFrequency" init="1" min="1" parameter="Evaluation frequency of disposal command" category="Group"/>
		<var type="float" name="mergingDistance" init="1" min="1" parameter="Distance to merge two flocks" category="Group"/>

		<reflex name="create_groups" when="(time mod creationFrequency) = 0">
			<let var="potentialPeople" type="list" of="people" value="(list people) where (empty (each.groups))"/>
			
			<if condition="!(empty potentialPeople)">
				<let var="potentialPeopleNeighboursMap" type="map" value="[] as map"/>

				<loop over="potentialPeople" var="onePerson">
					<let var="freeNeighbours" type="list" of="people" value=" (((agents_overlapping (onePerson.shape + (float two_people_distance))) of_species people) - onePerson) where ( (potentialPeople contains each) and (each.color = onePerson.color) )"/>
						
					<if condition="!(empty freeNeighbours)">
						<add item="onePerson::freeNeighbours" to="potentialPeopleNeighboursMap"/>
					</if>
				</loop>
				
				<let var="sortedPotentialPeople" type="list" value="reverse ( potentialPeopleNeighboursMap.keys sort_by (length (list (potentialPeopleNeighboursMap at each))))"/>
				<loop over="sortedPotentialPeople" var="onePerson">
					<let var="onePersonNeighbours" type="list" of="people" value="potentialPeopleNeighboursMap at onePerson"/>
					
					<if condition="(onePersonNeighbours != nil) and !(empty onePersonNeighbours)">
						<loop over="onePersonNeighbours" var="oneNeighbour">
							<remove item="oneNeighbour" from="potentialPeopleNeighboursMap"/>
						</loop>
					</if>				
				</loop>

				<let var="peopleNeighbours" type="list" of="boids" value="potentialPeopleNeighboursMap.keys" />
				<loop over="peopleNeighbours" var="oneKey">
					<put item="remove_duplicates ((list (potentialPeopleNeighboursMap at oneKey)) + oneKey)" at="oneKey" in="potentialPeopleNeighboursMap" /> 
				</loop>

				<loop over="potentialPeopleNeighboursMap.keys" var="oneKey">
					<let var="microAgents" type="list" of="people" value="(potentialPeopleNeighboursMap at oneKey)"/>
					<add item="oneKey" to="microAgents"/>
					
					<if condition="(length microAgents) &gt; 1">
						<create species="group" number="1" with="[ color :: ((people (first microAgents)).color) ]">
							<capture target="microAgents" />
						</create>
					</if>
				</loop>
			</if>	
		</reflex>
	</global>

	<entities>
		<species name="group" skills="situated">
			<var type="rgb" name="color" init="rgb [64, 64, 64]" />
 			<var type="geometry" name="shape" init="polygon (components collect (people each).location)" value="polygon (components collect (people each).location)" />
		
			<action name="nearby_people" return="bool">
				<arg name="groups" type="list" />
				<arg name="candidate" type="people" />
				<arg name="distance" type="int" />
				
				<loop over="groups" var="person">
					<if condition="((people person) distance_to candidate) &lt; (float distance)">
						<return value="true" />
					</if>
				</loop>
				
				<return value="false" />
			</action>

 			<reflex name="capture_release_people" when="(time mod updateFrequency) = 0">
  				<let var="removed_components" type="list" of="people" value="[]"/>

 				<let var="subGroups" type="list" of="list" value="components simple_clustering_by_distance two_people_distance" />

 				<if condition="(length subGroups) &gt; 1">
 					<set var="subGroups" value="subGroups sort_by (length each)"/>
 					<remove index="((length subGroups) - 1)" from="subGroups"/>

 					<loop over="subGroups" var="oneSubGroup">
 						<loop over="oneSubGroup" var="onePerson">
							<add item="onePerson" to="removed_components"/>
 						</loop>
 					</loop>
 				</if>
 	 			
 				<if condition="!(empty removed_components)">
 					<release target="removed_components" />
 				</if>

 				<let var="added_candidates" type="list" of="people" value="(list people) where ( (empty (each.groups)) and (each.color = color) )"/>
 				<let var="added_components" type="list" of="people" value="[]"/>
 				<loop over="added_candidates" var="candidate">
 					 <if condition="self nearby_people [ groups::components, candidate::candidate, distance::two_people_distance ]">
 					 	<add item="candidate" to="added_components" />
 					 </if>
 				</loop>
 				
 				<if condition="!(empty added_components)">
 					<capture target="added_components" />
 				</if>
 			</reflex>

 			<reflex name="disposal" when="(length components) &lt; 2">
 				<release target="components" />
 				<do action="die" />
 			</reflex>

 			<reflex name="merge_nearby_groups" when="(time mod mergeFrequency) = 0">
 				<let var="nearbyGroups" type="list" of="group" value="( (agents_overlapping (shape + mergingDistance)) of_species group ) where (each.color = color)"/>
 				
 				<if condition="(length nearbyGroups)  > 1">
 					<set var="nearbyGroups" value="nearbyGroups sort_by (length each.components)"/>
 					<let var="largestGroup" type="group" value="nearbyGroups at ((length nearbyGroups) - 1)"/>
 					<remove item="largestGroup" from="nearbyGroups"/>
 					
 					<let var="added_components" value="[]"/>
 					<loop over="nearbyGroups" var="oneGroup">
  						<loop over="oneGroup.components" var="com">
  							<add item="com" to="added_components"/>
  						</loop>					
 					</loop>
 					
					<if condition="!(empty added_components)">
						<ask target="largestGroup">
							<capture target="added_components" />
						</ask>

	 					<loop over="nearbyGroups" var="oneGroup">
	 						<ask target="oneGroup as group">
	 							<release target="oneGroup.components" />
	 							<do action="die"/>
	 						</ask>
	 					</loop>
					</if>
 				</if>
 			</reflex>
	 			
 			<aspect name="default">
 				<draw shape="geometry" color="color"/>
 			</aspect>
		</species>
	</entities>

	<output>
    	<display name="Segregation">
    	 	<species name="people" transparency="0.5"/>
			<species name="group" transparency="0.5"/>
			<grid name="space" transparency="0.5"/>
    	</display>
	</output>
</model>
