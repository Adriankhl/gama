<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<model name="boids_emergence_with_algo">
 	<include file="/includes/boids_emergence_common.xml"/>
	
	<global>
		<var type="int" name="two_boids_distance" init="50" parameter="true" category="Flock"/>
		<var type="int" name="mergingDistance" init="50" min="1" parameter="Distance to merge two flocks" category="Flock"/>
		<var type="int" name="number_of_obstacles" parameter="true" init="0" min="0" />

		<reflex name="create_flocks" when="(time mod creationFrequency) = 0">
			<if condition="create_flock">
				<let var="freeBoids" type="list" of="boids" value="(list boids) where (empty (each.groups))"/>
				
				<if condition="(length freeBoids) &gt; 1">
					<let var="boidsGroups" type="list" of="list" value="freeBoids simple_clustering_by_distance two_boids_distance"/>
					<let var="potentialBoidsGroups" type="list" of="list" value="boidsGroups where ((length (list each)) &gt; 2)" />
					
					<if condition="!(empty potentialBoidsGroups)">
						<loop over="potentialBoidsGroups" var="oneGroup">
							<if condition="(length oneGroup) &gt; 2">
								<create with="[ color::[rnd 255, rnd 255, rnd 255] ]" species="flock">
									<capture target="oneGroup" />
								</create>
							</if>
						</loop>
					</if>
				</if>
			</if>
		</reflex>
	</global>

	<entities>
		<species name="flock" skills="situated">
			<var type="rgb" name="color" init="rgb [64, 64, 64]" />
			<var name="shape" type="geometry" value="polygon (components collect (boids each).location)" />

			<action name="nearby_boids" return="bool">
				<arg name="groups" type="list" />
				<arg name="candidate" type="boids" />
				<arg name="distance" type="int" />
				
				<loop over="groups" var="one_boid">
					<if condition="((boids one_boid) distance_to candidate) &lt; distance">
						<return value="true" />
					</if>
				</loop>
				
				<return value="false" />
			</action>

			<reflex name="capture_release_boids" when="(time mod updateFrequency) = 0">
  				<let var="removed_components" value="[]"/>
  				<let var="subGroups" type="list" of="list" value="components simple_clustering_by_distance two_boids_distance" />
 				<if condition="(length subGroups) &gt; 1">
 				
 				<!-- 
 					<do action="write">
 						<arg name="message" value="'At time : ' + (string time) + '; agent : ' + name + '; with components : ' + (string components) + ' and subGroups : ' + (string subGroups) + '; length components = ' + (string (length components)) + '; length subGroups = ' + (length subGroups)" />
 					</do>
 				  -->
 				  
 					<set var="subGroups" value="subGroups sort_by (length each)"/>
 					<remove item="subGroups at ((length subGroups) - 1)" from="subGroups"/>

 					<loop over="subGroups" var="oneSubGroup">
 						<loop over="oneSubGroup" var="oneAnt">
							<add item="oneAnt" to="removed_components"/>
 						</loop>
 					</loop>
 				</if>

 				<if condition="!(empty removed_components)">
 					<release target="removed_components" />
 				</if>

 				<let var="newComponents" value="components"/>

 				<let var="added_candidates" value="(list boids) where (empty (each.groups) )"/>
 				<let var="added_components" value="[]"/>
 				<loop over="added_candidates" var="candidate">
 					<if condition="self nearby_boids [groups::newComponents, candidate::candidate, distance::two_boids_distance]">
 						<add item="candidate" to="added_components" />
 					</if>
 				</loop>

 				<if condition="!(empty added_components)">
 					<capture target="added_components" />
 				</if>
			</reflex>
 			
 			<reflex name="disposal" when="((length components) &lt; 3) and ((time mod disposalFrequency) = 0)">
 				<release target="components" />
 				<do action="die" />
 			</reflex>
 			
			<reflex when="(time mod mergeFrequency) = 0">
 				<let var="nearbyFlocks" type="list" of="flock" value="( (agents_overlapping (shape + (float mergingDistance)) ) of_species flock )"/>
					
				<if condition="!(empty nearbyFlocks)">
					<set var="nearbyFlocks" value="nearbyFlocks sort_by (length ((flock each).components))"/>
					<let var="largestFlock" type="flock" value="nearbyFlocks at ((length nearbyFlocks) - 1)"/>
					<remove item="largestFlock" from="nearbyFlocks"/>
						
					<let var="added_components" value="[]"/>
					<loop over="nearbyFlocks" var="oneFlock">
						<loop over="oneFlock.components" var="com">
							<add item="com" to="added_components"/>
						</loop>
					</loop>
						
					<if condition="!(empty added_components)">
						<ask target="largestFlock">
							<capture target="added_components" />
						</ask>
	
	 					<loop over="nearbyFlocks" var="oneFlock">
	 						<ask target="oneFlock">
	 							<release target="oneFlock.components" />
	 							<do action="die"/>
	 						</ask>
	 					</loop>
					</if>
				</if>
			</reflex>

 			<aspect name="default">
  				<draw shape="geometry" color="color"/>
 			</aspect>
		</species>
	</entities>

	<output>
		<monitor name="flocks" value="list flock" />
		<monitor name="length_flocks" value="length (list flock)" />
	</output>
</model>