<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<model name="sort_emergence">
	<include file="/includes/sort.xml"/>

	<global>
		<var type="float" name="two_places_distance" init="1" min="1" parameter="Distance of two places" category="Place flock"/>
		<var type="int" name="mergeFrequency" init="3" min="1" parameter="Evaluation frequency of merge command" category="Place flock"/>
		<var type="int" name="creationFrequency" init="3" min="1" parameter="Evaluation frequency of creation command" category="Place flock"/>
		<var type="int" name="updateFrequency" init="2" min="1" parameter="Evaluation frequency of update command" category="Place flock"/>
		<var type="int" name="disposalFrequency" init="1" min="1" parameter="Evaluation frequency of disposal command" category="Place flock"/>
		<var type="float" name="mergingDistance" init="1" min="1" parameter="Distance to merge two flocks" category="Place flock"/>

		<reflex name="create_place_flocks" when="(time mod creationFrequency) = 0">
			<let var="potentialPlaces" type="list" of="ant_grid" value="(list ant_grid) where ( (each.color != (rgb 'black')) and (empty (each.groups)) )"/>
			
			<if condition="!(empty potentialPlaces)">
				<let var="potentialPlacesNeighboursMap" type="map" value="[] as map"/>
					
				<loop over="potentialPlaces" var="onePlace">
					<let var="freeNeighbours" value="((( agents_overlapping (onePlace.shape + two_places_distance)) of_species ant_grid) - onePlace) where ( (potentialPlaces contains each) and (each.color = onePlace.color) )"/>
						
					<if condition="!(empty freeNeighbours)">
						<add item="onePlace::freeNeighbours" to="potentialPlacesNeighboursMap"/>
					</if>
				</loop>

				<let var="sortedPotentialPlaces" type="list" of="ant_grid" value="potentialPlacesNeighboursMap.keys sort_by (length (list (potentialPlacesNeighboursMap at each)))"/>
				<loop over="sortedPotentialPlaces" var="onePlace">
					<let var="onePlaceNeighbours" type="list" of="ant_grid" value="potentialPlacesNeighboursMap at onePlace"/>
					
					<if condition="onePlaceNeighbours != nil">
						<loop over="onePlaceNeighbours" var="oneNeighbour">
							<remove item="oneNeighbour" from="potentialPlacesNeighboursMap"/>
						</loop>
					</if>				
				</loop>
			
				<let var="placeNeighbourKeys" type="list" of="ant_grid" value="potentialPlacesNeighboursMap.keys" />
				<loop over="placeNeighbourKeys" var="oneKey">
					<put item="remove_duplicates ( (list (potentialPlacesNeighboursMap at oneKey)) + oneKey )" at="oneKey" in="potentialPlacesNeighboursMap"/>
				</loop>

				<loop over="potentialPlacesNeighboursMap.keys" var="oneKey">
					<let var="microAgents" type="list" of="ant_grid" value="potentialPlacesNeighboursMap at oneKey"/>
					
					<if condition="(length microAgents) &gt; 1">
						<create with="[ color::(first microAgents).color ]" species="place_flock" number="1">
							<capture target="microAgents" />
						</create>
					</if>
				</loop>
			</if> 
		</reflex>

	</global>

	<entities>
		<species name="place_flock" skills="situated">
			<var type="rgb" name="color" init="rgb [64, 64, 64]" />
 			<var type="geometry" name="shape" init="polygon (components collect (ant_grid each).location)" value="polygon (components collect (ant_grid each).location)" />

			<action name="near_by_place_flock" return="bool">
				<arg name="places" type="list" />
				<arg name="candidate" type="ant_grid" />
				<arg name="distance" type="int" />
				
				<loop over="places" var="one_place">
					<if condition="((ant_grid one_place) distance_to candidate) &lt; distance">
						<return value="true" />
					</if>
				</loop>
				
				<return value="false" />
			</action>

 			<reflex name="capture_release_people" when="(time mod updateFrequency) = 0">
  				<let var="removed_components" type="list" of="ant_grid" value="[]"/>
  				<let var="subGroups" type="list" of="list" value="components simple_clustering_by_distance two_places_distance" />

 				<if condition="(length subGroups) &gt; 1">
 					<set var="subGroups" value="subGroups sort_by (length each)"/>
 					<remove item="subGroups at ((length subGroups) - 1)" from="subGroups"/>

 					<loop over="subGroups" var="oneSubGroup">
 						<loop over="oneSubGroup" var="onePlace">
							<add item="onePlace" to="removed_components"/>
 						</loop>
 					</loop>
 				</if>

 				<if condition="!(empty removed_components)">
 					<release target="removed_components" />
 				</if>

 				<let var="added_candidates" value="(list ant_grid) where ( (empty (each.groups) ) and (each.color = color) )"/>
 				<let var="added_components" type="list" of="ant_grid" value="[]"/>
 				<loop over="added_candidates" var="candidate">
 					 <if condition="self near_by_place_flock [places::components, candidate::candidate, distance::two_places_distance]">
 					 	<add item="candidate" to="added_components" />
 					 </if>
 				</loop>

 				<if condition="!(empty added_components)">
 					<capture target="added_components" />
 				</if>
 			</reflex>

 			<reflex name="disposal" when="((length components) &lt; 2) and ((time mod disposalFrequency) = 0)">
				<release target="components" />
				<do action="die" /> 				
 			</reflex>
 			
 			<reflex name="merge_nearby_groups" when="(time mod mergeFrequency) = 0">
 				<let var="nearbyFlocks" type="list" of="place_flock" value="( ( (agents_overlapping (shape + mergingDistance)) of_species place_flock ) where (each.color = color) )"/>
 				
 				<if condition="(length nearbyFlocks)  > 1">
 					<set var="nearbyFlocks" value="nearbyFlocks sort_by (length ( each.components))"/>
 					<let var="largestFlock" type="place_flock" value="nearbyFlocks at ((length nearbyFlocks) - 1)"/>
 					<remove item="largestFlock" from="nearbyFlocks"/>
 					
 					<let var="added_components" value="[]"/>
 					<loop over="nearbyFlocks" var="oneFlock">
 						<loop over="oneFlock.components" var="com">
 							<add item="com" to="added_components"/>
 						</loop>
 					</loop>
 					
					<if condition="!(empty added_components)">
						<ask target="largestFlock">
							<capture target="added_components" />
						</ask>

	 					<loop over="nearbyFlocks" var="oneFlock">
	 						<ask target="oneFlock">
	 							<release target="components" />
	 							<do action="die"/>
	 						</ask>
	 					</loop>
					</if>
 				</if>
 			</reflex>
 			
 			<aspect name="default">
 				<draw shape="geometry" color="color"/>
 			</aspect>
		</species>
	</entities>	
	
	<output>
		<display name="Garbage groups" background="'white'" refresh_every="1">
			<species name="place_flock"  transparency="0.7"/>
		</display>
		
		<!-- <monitor name="place_flocks" value="list place_flock" />  -->
	</output>
</model>