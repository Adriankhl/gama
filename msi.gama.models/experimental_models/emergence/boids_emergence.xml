<?xml version="1.0" encoding="ISO-8859-1" standalone="yes"?>
<model name="boids_emergence">
	<include file="/includes/boids_emergence_common.xml"/>

	<global>
		<var type="bool" name="create_flock" init="true" parameter="true" category="Flock"/>
		<var type="int" name="two_boids_distance" init="30" parameter="true" category="Flock"/>
		<var type="int" name="mergingDistance" init="30" min="1" parameter="Distance to merge two flocks" category="Flock"/>


		<reflex name="create_flocks" when="(time mod creationFrequency) = 0">
			<if condition="create_flock">
				<let var="freeBoids" type="list" of="boids" value="(list boids) where (empty (each.groups))"/>
				<let var="potentialBoidsNeighboursMap" type="map" value="[] as map"/>
				
				<loop over="freeBoids" var="oneBoids">
					<let var="freeNeighbours" type="list" of="boids" value="( ((agents_overlapping (oneBoids.shape + (float two_boids_distance))) of_species boids) - oneBoids ) where (freeBoids contains each)"/>
					
					<if condition="(length freeNeighbours) &gt; 0">
						<add item="oneBoids::freeNeighbours" to="potentialBoidsNeighboursMap"/>
					</if>
				</loop>
				
				<let var="sortedFreeBoids" value="potentialBoidsNeighboursMap.keys sort_by (length (list (potentialBoidsNeighboursMap at each)))"/>
				<loop over="sortedFreeBoids" var="oneBoids">
					<let var="oneBoidsNeighbours" value="potentialBoidsNeighboursMap at oneBoids"/>
					
					<if condition="oneBoidsNeighbours != nil">
						<loop over="oneBoidsNeighbours" var="oneNeighbour">
							<remove item="oneNeighbour" from="potentialBoidsNeighboursMap"/>
						</loop>
					</if>				
				</loop>
				
				<let var="boidsNeighbours" type="list" of="boids" value="potentialBoidsNeighboursMap.keys" />
				<loop over="boidsNeighbours" var="oneKey">
					<put item="remove_duplicates ((list (potentialBoidsNeighboursMap at oneKey)) + oneKey)" at="oneKey" in="potentialBoidsNeighboursMap" /> 
				</loop>
				
				<loop over="potentialBoidsNeighboursMap.keys" var="oneKey">
					<let var="microAgents" type="list" of="boids" value="potentialBoidsNeighboursMap at oneKey"/>
					
					<if condition="(length microAgents) &gt; 1">
						<create with="[ color::[rnd 255, rnd 255, rnd 255] ]" species="flock">
							<capture target="microAgents" />
						</create>
					</if>
				</loop>
			</if>
		</reflex>
	</global>

	<entities>
		<species name="flock" skills="situated">
			<var type="float" name="cohesionIndex" init="two_boids_distance" value="two_boids_distance + ( ( length components ) / 4 )  + (shape.area / 800) "/>
			<var type="rgb" name="color" init="rgb [64, 64, 64]" />
			<var type="geometry" name="shape" value="polygon (components collect (boids each).location)" />

 			<reflex name="capture_release_boids" when="(time mod updateFrequency) = 0">
 				<let var="removed_components" value="components where ( ((boids each) distance_to location) &gt; cohesionIndex)"/>
 				<if condition="!(empty removed_components)">
 					<release target="removed_components" />
 				</if>
 				
 				<let var="added_components" type="list" of="boids" value=" (list boids) where ( (empty each.groups) and ((each distance_to location) &lt; cohesionIndex) )"/>
 				<if condition="!(empty added_components)">
 					<capture target="added_components" />
 				</if>
 			</reflex>
 			
 			<reflex name="disposal" when="(length components) &lt; 2">
 				<release target="components" />
 				<do action="die" />
 			</reflex>

 			<reflex name="merge_nearby_flocks" when="(time mod mergeFrequency) = 0">
<!--  				<let var="nearbyFlocks" type="list" of="flock" value=" ( (self neighbours_at mergingDistance) of_species flock )"/>  -->
 				<let var="nearbyFlocks" type="list" of="flock" value=" (agents_overlapping (shape + (float mergingDistance))) of_species flock "/>
 				
 				<if condition="!(empty nearbyFlocks)">
 					<set var="nearbyFlocks" value="nearbyFlocks sort_by (length each.components)"/>
 					<let var="largestFlock" value="nearbyFlocks at ((length nearbyFlocks) - 1)"/>
 					<remove item="largestFlock" from="nearbyFlocks"/>
 					
 					<let var="added_components" type="list" of="boids" value="[]"/>
 					<loop over="nearbyFlocks" var="oneFlock">
 						<loop over="oneFlock.components" var="com">
 							<add item="com" to="added_components"/>
 						</loop>
 					</loop>
 					
					<if condition="!(empty added_components)">
						<ask target="largestFlock">
							<capture target="added_components" />
						</ask>

	 					<loop over="nearbyFlocks" var="oneFlock">
	 						<ask target="oneFlock">
	 							<release target="oneFlock.components" />
	 							<do action="die"/>
	 						</ask>
	 					</loop>
					</if>

 				</if>
 			</reflex>

 			<aspect name="default">
 				<draw shape="geometry" color="color"/>
 			</aspect>
		</species>
	</entities>
	
	<output>
		<monitor name="length_flocks" value="length (list flock)" />
	</output>	
</model>