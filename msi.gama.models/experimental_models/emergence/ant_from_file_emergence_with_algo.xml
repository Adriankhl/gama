<?xml version="1.0" encoding="UTF-8"?>
<model name="ants_from_file_emergence_with_algo">
	<include file="/includes/ants_from_file.xml"/>
	
	<global>
		<var type="int" name="two_ants_distance" init="5" min="1" parameter="Distance of two ants" category="Ant flock"/>
		<var type="int" name="mergeFrequency" init="3" min="1" parameter="Evaluation frequency of merge command" category="Ant flock"/>
		<var type="int" name="creationFrequency" init="3" min="1" parameter="Evaluation frequency of creation command" category="Ant flock"/>
		<var type="int" name="updateFrequency" init="2" min="1" parameter="Evaluation frequency of update command" category="Ant flock"/>
		<var type="int" name="disposalFrequency" init="1" min="1" parameter="Evaluation frequency of disposal command" category="Ant flock"/>
		<var type="float" name="mergingDistance" init="3" min="1" parameter="Distance to merge two flocks" category="Ant flock"/>

		<reflex name="create_ant_flocks" when="(time mod creationFrequency) = 0">
			<let var="potentialAnts" type="list" of="ant" value="(list ant) where ((empty (each.groups)) and ((each.state = 'carryingFood') or (each.state = 'followingRoad')) )"/>
			
			<if condition="(length potentialAnts) &gt; 1">
				<let var="antGroups" type="list" of="list" value="potentialAnts simple_clustering_by_distance two_ants_distance"/>
				<set var="antGroups" value="antGroups where ((length  each)  &gt; 1)"/>
				
				<if condition="!(empty antGroups)">
					<loop over="antGroups" var="oneGroup">
						<create species="ant_flock" with="[ color::[rnd 255, rnd 255, rnd 255] ]">
							<capture target="oneGroup" />
						</create>
					</loop>
				</if>
			</if>
		</reflex>
	</global>

	<entities>
		<species name="ant_flock" skills="situated">
			<var type="rgb" name="color" init="rgb [64, 64, 64]" />
			<var type="geometry" name="shape" value="polygon (components collect (ant each).location)" />

			<action name="nearby_ant" return="bool">
				<arg name="groups" type="list" />
				<arg name="candidate" type="ant" />
				<arg name="distance" type="int" />
				
				<loop over="groups" var="one_ant">
					<if condition="((ant one_ant) distance_to candidate) &lt; distance">
						<return value="true" />
					</if>
				</loop>
				
				<return value="false" />
			</action>
			 
			<reflex name="capture_nearby_ants" when="(time mod updateFrequency) = 0">
  				<let var="removed_components" type="list" of="ant" value="[]"/>
  				<let var="subGroups" type="list" of="list" value="components simple_clustering_by_distance two_ants_distance" />

 				<if condition="(length subGroups) &gt; 1">
 					<set var="subGroups" value="subGroups sort_by (length each)"/>
 					<remove item="subGroups at ((length subGroups) - 1)" from="subGroups"/>

 					<loop over="subGroups" var="oneSubGroup">
 						<loop over="oneSubGroup" var="oneAnt">
							<add item="oneAnt" to="removed_components"/>
 						</loop>
 					</loop>
 				</if>
	 				
 				<if condition="!(empty removed_components)">
 					<release target="removed_components" />
 				</if>

 				<let var="added_candidates" type="list" of="ant" value="(list ant) where ( (empty (each.groups) ) and ((each.state = 'carryingFood') or (each.state = 'followingRoad')) )"/>
 				<let var="added_components" type="list" of="ant" value="[]"/>
 				<loop over="added_candidates" var="candidate">
 					 <if condition="self nearby_ant [ groups::components, candidate::candidate, distance::two_ants_distance ]">
 					 	<add item="candidate" to="added_components" />
 					 </if>
 				</loop>

 				<if condition="!(empty added_components)">
 					<capture target="added_components" />
 				</if>
			</reflex>
			
	 		<reflex name="disposal" when="(length components) &lt; 2">
	 			<release target="components" />
	 			<do action="die" />
	 		</reflex>

			<reflex name="merge_nearby_antFlocks" when="(time mod mergeFrequency) = 0">
<!--  				<let var="nearbyFlocks" type="list" of="ant_flock" value=" ( (self neighbours_at mergingDistance) of_species ant_flock )"/>  -->
 				<let var="nearbyFlocks" type="list" of="ant_flock" value=" ((agents_overlapping (shape + mergingDistance) ) of_species ant_flock)"/>
					
				<if condition="!(empty nearbyFlocks)">
					<set var="nearbyFlocks" value="nearbyFlocks sort_by (length ((ant_flock each).components))"/>
					<let var="largestFlock" type="ant_flock" value="nearbyFlocks at ((length nearbyFlocks) - 1)"/>
					<remove item="largestFlock" from="nearbyFlocks"/>
						
					<let var="added_components" value="[]"/>
					<loop over="nearbyFlocks" var="oneFlock">
						<loop over="oneFlock.components" var="com">
							<add item="com" to="added_components"/>
						</loop>
					</loop>
						
					<if condition="!(empty added_components)">
						<ask target="largestFlock">
							<capture target="added_components" />
						</ask>
	
	 					<loop over="nearbyFlocks" var="oneFlock">
	 						<ask target="oneFlock">
	 							<release target="oneFlock.components" />
	 							<do action="die"/>
	 						</ask>
	 					</loop>
					</if>
				</if>
			</reflex>
	 			
 			<aspect name="default">
  				<draw shape="geometry" color="color"/>
 			</aspect>
		</species>
	</entities>

	<output>
	   <display name="Ants" refresh_every="1">
	       <grid name="ant_grid" transparency="0.5"/>
	       <species name="ant" transparency="0.5"/>
	   </display>
	   <display name="Ants_Flock" refresh_every="1">
	       <species name="ant_flock" transparency="0.5" />
	   </display>
	</output>
</model>
