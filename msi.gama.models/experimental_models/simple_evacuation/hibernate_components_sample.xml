<model name="hibernate_components_sample">
	<global>
		<var name="environment_size" type="int" init="100" const="true" />
		<var name="micro_agent_number" type="int" init="10" const="true" />
		<var name="micro_agent_colors" type="list" of="rgb" init="[rgb 'red', rgb 'green', rgb 'blue', rgb 'yellow']" const="true" />
		<var name="macro_agent_color" type="rgb" init="rgb 'cyan'" const="true" />
		<var name="macro_agent_size" type="float" init="40" min="10" max="environment_size" const="true" depends_on="environment_size" />
		
		<init>
			<create species="macro_species" number="1" />
			
			<do action="write">
				<arg name="message" value="'Step the simulation to see the effect of (freeze) and (unfreeze) commands'" />
			</do>
		</init>
	</global>
	
	<entities>
		<species name="micro_species" skills="situated">
			<var name="color" type="rgb" init="one_of micro_agent_colors" const="true" />
			<var name="size" type="float" init="1 + (rnd 1.5)" />
			<var name="location" type="point" freezable="true" /> <!-- cause this attribute is freezable, hence it can be saved using the 'freeze' operator -->
			<var name="name" type="string" freezable="true" />
			<var name="shape" type="geometry" init="self get_micro_agent_shape [ size :: size ]" depends_on="size" />
		
			<action name="get_micro_agent_shape">
				<arg name="size" type="float" />
				
				<let var="shape_type" value="rnd 3" />
				<if condition="shape_type = 0">
					<return value="circle size" />
				
					<else>
						<if condition="shape_type = 1">
							<return value="square size" />
						
							<else>
								<return value="triangle size" />
							</else>
						</if>
					</else>
				</if>
			</action> 

			<aspect name="default">
				<draw shape="geometry" color="color" />
			</aspect>
		</species>
		
		<species name="macro_species" skills="situated" control="fsm">
			<var name="shape" type="geometry" init="(square 40.0) at_location {environment_size / 2, environment_size / 2}" />
			<var name="freezed_micro_agents" type="list" of="map" init="[]" />
		
			<init>
				<create species="micro_species" number="micro_agent_number" return="micro_agents" />
				<set var="components" value="micro_agents" />
				<loop over="micro_agents" var="one_micro">
					<set var="one_micro.location" value="any_location_in shape" />
				</loop>
			</init>
			
			<state name="freeze_micro_agents" initial="true">
				<if condition="!(empty components)">
					<let var="micro_agent_to_be_freezed" type="micro_species" value="components at 0" />
					<set var="components" value="components - micro_agent_to_be_freezed" />
					<do action="write">
						<arg name="message" value="'At time : ' + (string time) + ': freezes agent : ' + (micro_agent_to_be_freezed.name)" />
					</do> 

					<add item="freeze micro_agent_to_be_freezed" to="freezed_micro_agents" />
				</if>
			
				<transition to="unfreeze_micro_agents" when="empty components" />
			</state>
			
			<state name="unfreeze_micro_agents">
				<if condition="!(empty freezed_micro_agents)">
					<let var="micro_agent_to_be_unfreezed" type="map" value="freezed_micro_agents at ((length freezed_micro_agents) - 1)" />
					<remove item="micro_agent_to_be_unfreezed" from="freezed_micro_agents" />
					<let var="unfreeze_micro_agent" type="micro_species" value="unfreeze micro_agent_to_be_unfreezed" />
					<set var="components" value="components + unfreeze_micro_agent" />

					<do action="write">
						<arg name="message" value="'At time : ' + (string time) + ': unfreezes agent : ' + (string unfreeze_micro_agent.name)" />
					</do> 
				</if>
			
				<transition to="freeze_micro_agents" when="(length components) = micro_agent_number" />
			</state>
			
			<aspect name="default">
				<draw shape="geometry" color="macro_agent_color" />
			</aspect>
		</species>
	</entities>
	
	<environment width="environment_size" height="environment_size" />
	
	<output>
		<display name="Display">
			<species name="macro_species" transparency="0.5" />
			<species name="micro_species" transparency="0.5" />
		</display>
	</output>
</model>