<model name="stupid_evacuation">
	<global>
		<var name="bounds_data" type="string" init="'bounds_600_600.shp'" const="true" />
		<var name="roads_data" type="string" init="'RoadNetwork.shp'" const="true" />
		
		<var name="people_group_height" type="float" init="10" min="4" max="10" parameter="Height" category="People group" />
		<var name="people_group_length_proba" type="float" init="0.6" min="0.2" max="1" parameter="People group length / Road length" category="People group" />
		<var name="people_group_color" type="rgb" init="rgb 'blue'" parameter="Color" category="People group" />
		<var name="hibernating_proba" type="float" init="0.4" min="0.1" max="0.8" parameter="Hibernating probability" category="People group" />

		<var name="people_size" type="float" init="2" min="0.5" max="6" parameter="Size" category="People" />
		<var name="people_number" type="int" init="1000" min="1" max="5000" parameter="Number" category="People" />
		<var name="people_color" type="rgb" init="rgb 'green'" parameter="Color" category="People" />
		
		<init>
			<create species="bounds" from="bounds_data" />
			<create species="road" from="roads_data" with="[ id :: read 'id', is_source :: ( ( (int (read 'source')) = 1) ? (bool 'true') : (bool 'false') ), is_destination :: ( ( (int (read 'destination')) = 1) ? (bool 'true') : (bool 'false') ), next_lines :: ( (read 'next_lines') tokenize ',' ) ]"  />
		</init>
	</global>
	
	<entities>
		<species name="bounds" skills="situated">
			<aspect name="default">
				<draw text="'Total people : ' + ( string ( ( length (list people)) + ( sum ( (list people_group) collect each.hibernating_people  ) ) ) ) " at="{40, 450}" color="rgb 'red'" size="20" />
				<draw text="'Actively moving people : ' + (string (length (list people)))" at="{40, 470}" color="rgb 'red'" size="20" />
				<draw text="'Hibernating people in group : ' + (string  ( sum ( (list people_group) collect each.hibernating_people  ) ) )" at="{40, 490}" color="rgb 'red'" size="20" />
			</aspect>
		</species>

		<species name="road" skills="situated">
			<var name="id" type="int" />
			<var name="next_lines" type="list" of="int" init="[]" />
			<var name="is_source" type="bool" />
			<var name="is_destination" type="bool" />
			
			<var name="road_starting_point" type="point" depends_on="shape" />
			<var name="road_end_point" type="point" depends_on="shape" />
		
			<init>
				<create species="people_group" with="[ my_road :: self ]" />
				
				 <set var="road_starting_point" value="shape.points at 0" />
				 <set var="road_end_point" value="shape.points at 1" />
			</init>
			
			<reflex name="create_people" when="is_source and ( ( ( length (list people)) + ( sum ( (list people_group) collect each.hibernating_people  ) ) ) &lt; people_number )">
				<create species="people" number="1" with="[ current_road :: self, first_creation :: true ]" />
			</reflex>
		
			<aspect name="default">
				<draw shape="geometry" color="rgb 'black'" />
			</aspect>
		</species>
		
		<species name="people" skills="situated">
			<var name="current_road" type="road" />
			<var name="source" type="point" depends_on="current_road" />
			<var name="destination" type="point" depends_on="current_road" />
			<var name="speed" type="float" />
			<var name="heading" type="int" />
			
			<var name="first_creation" type="bool" />
			
			<init>
				
				<if condition="first_creation">
					<set var="source" value="(current_road.shape).points at 0" />
					<set var="destination" value="(current_road.shape).points at 1" />
					<set var="location" value="source" />
					<set var="heading" value="location towards destination" />
				</if>
				
				<set var="speed" value="0.3 + (rnd 1.7)" />
			</init>
			
			<action name="next_road">
				<let var="ret_val" type="list" of="road" value="[]" />
			
				<loop over="list road" var="r">					 
					<loop over="current_road.next_lines" var="l_id">
						<if condition="(int r.id) = (int l_id)"> <!-- casting PROBLEM -->
							<add item="r" to="ret_val" />
						</if>
					</loop>
				</loop>
				
				<return value="one_of ret_val" />
			</action>
		
			<reflex name="move">
				<set var="heading" value="location towards destination" />
			
				<if condition="location = destination">
					<if condition="current_road.is_destination">
						<do action="die" />
						
						<else>
							<if condition="!(empty (current_road.next_lines))">
								<set var="current_road" value="(self next_road [])" />
								<set var="source" value="(current_road.shape).points at 0" />
								<set var="destination" value="(current_road.shape).points at 1" />
								<set var="heading" value="source towards destination" />
								<set var="location" value="source" />
							</if>
						</else>
					</if>
					
					<else>
						<let var="dx" type="float" value="speed * (cos heading)" />
						<let var="dy" type="float" value="speed * (sin heading)" />
						<let var="moving_distance" type="float" value="location distance_to {location.x + dx, location.y + dy}" />
						<let var="distance_to_destination" type="float" value="location distance_to destination" />
						
						<if condition="(moving_distance &gt; distance_to_destination) or (moving_distance = distance_to_destination)">
							<set var="location" value="destination" />
						
							<else>
								<set var="location" value="(current_road.shape closest_points_with {location.x + dx, location.y + dy}) at 0" />
							</else>
						</if>
					</else>
				</if>
			</reflex>
			
			<aspect name="default">
				<draw shape="geometry" color="people_color" at="location" />
			</aspect>
		</species>


		<species name="people_group" skills="situated">
			<var name="my_road" type="road" />
			<var name="hibernating_people" type="int" init="0" />
			<var name="has_moving_people_on_road" type="bool" value="!(empty ( ( (list people) collect each.shape ) where (each intersects my_road.shape) ) )" />
			
			<init>
				<let var="length" type="float" value="(my_road.shape).perimeter * people_group_length_proba" />
				<let var="rect" type="geometry" value="(rectangle {length, people_group_height}) at_location (my_road.location)" />
				<let var="point0" type="point" value="rect.points at 0" />
				<let var="point1" type="point" value="rect.points at 1" />
				<let var="rect_angle" type="int" value="point0 towards point1" />
				<let var="road_angle" type="int" value="( (my_road.shape).points at 0 ) towards ( (my_road.shape).points at 1 )" />
				<set var="rect" value="rect rotated_by ( road_angle - rect_angle )" />
				
				<set var="shape" value="rect" />
			</init>

			<action name="hibernate_incoming_people">
				<let var="incoming_people" type="list" of="people" value="((list people) overlapping self)" />
				<if condition="!(empty incoming_people)">
					<set var="hibernating_people" value="hibernating_people + (length incoming_people)" />
					<ask target="incoming_people">
						<do action="die" />
					</ask>
				</if>
			</action>
			
			<action name="recreate_outgoing_people">
				<create species="people" number="1" with="[ current_road :: my_road ]">
					<set var="source" value="(current_road.shape).points at 0" />
					<set var="destination" value="(current_road.shape).points at 1" />
					
					<let var="x_magnitude" type="float" value="people_group_length_proba * (destination.x - (current_road.location).x)" />
					<let var="y_magnitude" type="float" value="people_group_length_proba * (destination.y - (current_road.location).y)" />
 					<set var="location" value="{(current_road.location).x + x_magnitude + people_size + (rnd (2 * (int people_size))), (current_road.location).y + y_magnitude + people_size + (rnd (2 * (int people_size)))}" />
					<set var="heading" value="location towards destination" />
				</create>
						
				<set var="hibernating_people" value="hibernating_people - 1" />
			</action>
			
			<update>
				<do action="hibernate_incoming_people" />
				
				<if condition="( (hibernating_people &gt; 0) and (!has_moving_people_on_road) ) or (hibernating_people &gt; (hibernating_proba * people_number)) ">
					<do action="recreate_outgoing_people" />
				</if>
			</update>

			<aspect>
				<draw shape="geometry" color="people_group_color" at="location" />
			</aspect>
		</species>
	</entities>
	
	<environment bounds="bounds_data" />
	
	<output>
		<display name="Display">
			<species name="road" aspect="default" transparency="0.5" />
			<species name="people_group" aspect="default" transparency="0.5" />
			<species name="people" aspect="default" transparency="0.5" />
			<species name="bounds" aspect="default" transparency="0.5" />
		</display>
	</output>
</model>