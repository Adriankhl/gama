<?xml version="1.0" encoding="UTF-8"?>
<!-- 
this file is the result of the Gaml2JDOM on fire_tutorial_6v4.gaml
the simulation should be the same since we inject the JDOM model in the ModelFileManager
but it is not... (not the same grid, not the same agents)
 -->
<model name="fire">
	<global>
		<var name="text_position" type="point" parameter="'Position of text:'"
			init="{0.1,0.1}" category="'Display'" />
		<var name="tree_transparency" type="float" parameter="'Transparency of trees'"
			init="0.5" min="0" max="1" category="'Display'" />
		<var name="width" type="int" parameter="'Width of the environment (in meters):'"
			init="500" min="10" max="1000" category="'Environment'" />
		<var name="height" type="int" parameter="'Height of the environment (in meters):'"
			init="500" min="10" max="1000" category="'Environment'" />
		<var name="fires_number" type="int" parameter="'Number of fire starting points:'"
			init="10" min="0" category="'Environment'" />
		<var name="trees_number" type="int" parameter="'Number of trees:'"
			init="5000" min="1" category="'Trees'" />
		<var name="tree_burning_time" type="int" init="100"
			parameter="'Number of steps taken by a tree to burn entirely:'"
			category="'Trees'" />
		<var name="tree_propagating_time" type="int" init="35"
			parameter="'Number of steps before a tree begins to propagate the fire:'"
			category="'Trees'" />
		<var name="tree_drying_time" type="int" init="100"
			parameter="'Number of steps before a tree dries after having been watered:'"
			category="'Trees'" />
		<var name="tree_max_size" type="float"
			parameter="'Max. diameter of trees (in meters):'" init="12 m" min="1 m"
			max="30 m" category="'Trees'" />
		<var name="tree_propagation_probability" type="float" init="0.7"
			parameter="'Probability for each burning tree to propagate fire:'"
			category="'Trees'" />
		<var name="tree_propagation_distance" type="int" init="6"
			parameter="'Max. propagation distance for fire between trees (in meters):'"
			category="'Trees'" />
		<var name="fireman_perception_range" type="int" init="30"
			parameter="'Range of vision of firemen (in meters):'" min="1"
			category="'Firemen'" />
		<var name="fireman_watering_range" type="int" init="3"
			parameter="'Max. range of watering of firemen (in meters):'" min="1"
			category="'Firemen'" />
		<var name="fireman_watering_distance" type="int" init="6"
			parameter="'Distance to a fire at which firemen begin to water (in meters):'"
			min="1" category="'Firemen'" />
		<var name="fireman_speed" type="float" parameter="'Speed of firemen (in m/s):'"
			init="3" min="0" category="'Firemen'" />
		<var name="firemen_number" type="int" parameter="'Number of firemen:'"
			init="8" min="0" category="'Firemen'" />
		<var name="fireman_security_distance" type="int"
			parameter="'Security distance for firemen (in meters):'" init="3"
			min="1" category="'Firemen'" />
		<var name="fireman_color" type="rgb" parameter="'Display color of firemen:'"
			init="rgb([255, 255, 255])" category="'Firemen'" />
		<init>
			<create species="tree" number="trees_number" />
			<ask target="(fires_number among (tree as list))">
				<set name="state" value="'burning'" />
			</ask>
			<create species="fireman" number="firemen_number" />
		</init>
	</global>
	<environment width="width" height="height" torus="false" />
	<entities>
		<species name="tree" skills="situated, visible" control="fsm">
			<var type="rgb" const="true" name="original_color" init="rgb([0, (rnd(200) + 55), 0])" />
			<var name="color" type="rgb" init="original_color" />
			<var type="float" const="true" name="size"
				init="(((rnd(100) / 100) * tree_max_size) + 1)" />
			<var type="point" const="true" name="location" init="{rnd(width),rnd(height)}" />
			<var type="float" const="true" name="range"
				init="(tree_propagation_distance + (size / 2))" />
			<var type="int" const="true" name="own_max_burning_time"
				init="(tree_burning_time - (tree_burning_time / size))" />
			<state name="intact" initial="true">
				<enter>
					<set name="color" value="original_color" />
				</enter>
			</state>
			<state name="burning">
				<enter>
					<let var="duration" value="0" />
				</enter>
				<set name="duration" value="(duration + 1)" />
				<set name="color" value="rgb([255, rnd(255), 0])" />
				<if
					condition="((duration &gt; tree_propagating_time) and flip(tree_propagation_probability))">
					<ask
						target="(((self neighbours_at range) of_species tree) where (each.state='intact'))">
						<set name="state" value="'burning'" />
					</ask>
				</if>
				<transition to="destroyed" when="(duration &gt;= own_max_burning_time)" />
			</state>
			<state name="destroyed">
				<create species="dead_tree" number="1"
					with="[location::(my location)]" />
				<do action="die" />
			</state>
			<state name="protected">
				<enter>
					<set name="color" value="rgb([0, 0, (100 + rnd(155))])" />
					<let var="duration" value="0" />
				</enter>
				<set name="duration" value="(duration + 1)" />
				<transition to="intact" when="(duration &gt;= tree_drying_time)" />
			</state>
			<aspect>
				<draw shape="circle" size="size" color="color" />
			</aspect>
		</species>
		<species name="dead_tree" skills="situated, visible">
			<var type="rgb" const="true" name="color"
				init="rgb([rnd(100), rnd(30), rnd(30)])" />
			<var type="float" const="true" name="size" value="3" />
			<aspect name="default">
				<draw shape="square" color="color" size="3" />
			</aspect>
		</species>
		<species name="fireman" skills="visible, moving">
			<var name="range" type="float" value="fireman_perception_range" />
			<var name="dynamic_range" type="float" init="0"
				value="((dynamic_range &gt; range)?10:(dynamic_range + 10))" />
			<var name="speed" type="float" value="fireman_speed" />
			<var name="goal" type="tree" />
			<var name="location" type="point"
				init="{((rnd(1000) / 1000) * width),((rnd(1000) / 1000) * height)}" />
			<action name="communicate_goal">
				<let var="others" value="((fireman as list) - self)" />
				<ask target="others">
					<do action="receive_goal">
						<arg name="new_goal" value="myself.goal" />
					</do>
				</ask>
			</action>
			<action name="receive_goal">
				<arg name="new_goal" />
				<if condition="(goal=nil)">
					<set name="goal" value="new_goal" />
				</if>
			</action>
			<action name="water">
				<ask
					target="((self neighbours_at rnd(fireman_watering_range)) of_species tree)">
					<set name="state" value="'protected'" />
				</ask>
			</action>
			<reflex name="updating" when="(goal != nil)">
				<set name="goal" value="((! (goal.state != 'burning'))?goal:nil)" />
			</reflex>
			<reflex name="patrolling" when="(goal=nil)">
				<do action="wander">
					<arg name="amplitude" value="180" />
				</do>
				<let var="burning_neighbours"
					value="(((self neighbours_at range) of_species tree) where (each.state='burning'))" />
				<let var="possible_goal"
					value="first((burning_neighbours sort_by (self distance_to each)))" />
				<if
					condition="((goal=nil) or (((goal != nil) and (possible_goal != nil)) and ((self distance_to goal) &gt; (self distance_to possible_goal))))">
					<set name="goal" value="possible_goal" />
					<do action="communicate_goal" />
				</if>
			</reflex>
			<reflex name="targeting"
				when="((goal != nil) and ((self distance_to goal) &gt; fireman_security_distance))">
				<do action="goto">
					<arg name="target" value="goal" />
				</do>
			</reflex>
			<reflex name="watering"
				when="((goal != nil) and ((self distance_to goal) &lt; fireman_watering_distance))">
				<do action="water" />
			</reflex>
			<aspect>
				<draw shape="circle" color="fireman_color" size="4" />
				<if condition="(goal=nil)">
					<draw shape="circle" color="fireman_color" size="dynamic_range"
						empty="true" />
					<else>
						<draw shape="line" to="goal" color="fireman_color" />
					</else>
				</if>
			</aspect>
		</species>
	</entities>
	<output>
		<display name="Forest">
			<image name="'background'" file="'../images/soil.jpg'" />
			<species name="dead_tree" aspect="default" />
			<species name="tree" transparency="tree_transparency" />
			<species name="fireman" />
			<text name="Legend" value="('Number of burnt trees : ' + (dead_tree as int))"
				position="text_position" color="rgb('white')" size="0.04" />
		</display>
		<display name="Chart" refresh_every="10">
			<chart name="'Distribution of sizes'" type="pie" style="exploded">
				<data name="'under 4m'" value="((tree as list) count (each.size &lt;= 4))" />
				<data name="'between 4m - 7m'"
					value="((tree as list) count ((each.size &gt; 4) and (each.size &lt;= 7)))" />
				<data name="'above 7m'" value="((tree as list) count (each.size &gt; 7))" />
			</chart>
		</display>
		<monitor name="'% burnt'"
			value="((((((dead_tree as int) * 100) / trees_number) as int) as string) + '%')" />
		<monitor name="'Time'" value="time" />
	</output>
</model>
