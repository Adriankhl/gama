<?xml version="1.0" encoding="UTF-8"?>

<sortie>
	<global>
		<!-- number of cells vertically and horizontally -->
		<int name="nbCellsVertically" init="50" parameter="true" />
		<int name="nbCellsHorizontally" init="50" parameter="true" />
		<int name="Initial_Nb_Of_Tree_Per_Species" init="25" parameter="true" />
		<float name="New_Seedling_Radius_cm" init="0.1" parameter="true" />
		<float name="Adult_Radius_cm" init="10" parameter="true" />
		<float name="Mortality_rate_basis" init="0.01" parameter="true" />
		<map name="to_create" init="specieslist as_map [each::[]]" />
		
		<list name="specieslist" init="[Hm, YB, Be, SM, RM, BC, WP, WA, RO]"
			const="true" />
		
		<reflex when="!empty to_create">
			<loop over="to_create.pairs" var="entry">

				<let name="sp" type="species" value="( entry.key) as species" />
				<let name="locations" type="list" of="point" value=" (entry.value) as list" />
				<create species="sp" as="Tree" number="length locations"
					with="[location::locations]" />


			</loop>
			<let name="to_create" value="specieslist as_map [each::[]]"/>
		</reflex>
		<!-- Each turn, the possible candidates for reproduction -->
		<map name="candidates"
			value="((agents of_generic_species Tree)  where ((Tree each).r > Adult_Radius_cm)) group_by (species each)" />
		<map name="colors"
			init="[WP::rgb 'pink', WA::rgb 'magenta', RO:: rgb 'gray', BC::rgb 'cyan',RM::rgb 'orange', SM::rgb 'yellow', Be::rgb 'blue', YB::rgb 'green', Hm::rgb 'red']"
			const="true" />


		<!-- Fake global variables used to limit the creation of temps in agents -->
		<matrix name="canopy_openness" type="matrix" size="{24,20}"
			fill_with="1.0" of="float" />
		<list name="neighbours2" init="[]" of="Tree" />
		<list name="speciesMembers" init="[]" of="Tree" />
		<list name="intersecting_ibeams" init="[]" of="int" />
		<list name="poisson_cdf" of="float" />
		<int name="k" />
		<float name="meanNbChildren" />
		<float name="T" />
		<float name="distance" />
		<bool name="too_close" />
		<bool name="on_the_right" />
		<float name="dist" />
		<float name="neigh_height" />
		<float name="neigh_cr" />
		<float name="second_term" />
		<float name="first_term" />
		<float name="zenith_angle_deg" />
		<float name="U" />
		<float name="m_" />
		<float name="x0" />
		<float name="x1" />
		<float name="y0" />
		<float name="y1" />
		<float name="h1" />
		<float name="h2" />
		<float name="neighb_cr" />
		<float name="neighb_height" />
		<float name="random01" />
		<float name="d1" />

		<float name="average_zenith_angle_of_sun" init="28.956" const="true" />
		<float name="b" init="0.009" const="true" />

		<var name="nbDeadTrees" init="0" type="int" />

		<!-- spatial resolution of cells = 1 meter -->
		<int name="cellSizeX" init="1" />
		<int name="cellSizeY" init="1" />

		<init>
			<loop over="specieslist" var="spec">
				<create species="spec" number="Initial_Nb_Of_Tree_Per_Species"
					as="Tree" with="[r::(rnd 50)/10]">
				</create>
			</loop>
		</init>
	</global>

	<entities>
		<species name="Tree" skills="situated, visible">
			<!-- Main and secondary state variables updated synchronously -->
			<!-- radius at breast height in centimeters -->
			<float name="r" init="New_Seedling_Radius_cm" value="r + p_delta_r" />
			<!-- global light index (amount of light received by a tree each year -->
			<float name="GLI" init="0" value="p_GLI" />
			<!-- height of the tree in meters -->
			<float name="height" init="0"
				value="float (parameters at 'H1') * (1 - (exp (- float (parameters at 'H2')/float (parameters at 'H1')*2*r)))" /> <!-- h -->
			<!-- canopy radius in meters -->
			<float name="cr" init="0" value="float (parameters at 'C1') * r" />
			<!-- canopy depth = height of the canopy alone (without the trunk) in 
				meters -->
			<float name="cd" init="0" value="float (parameters at 'C2') * r" />

			<!-- Private agent's variables updated asynchronously by set commands 
				(must not be accessed outside of the owner agent) -->
			<float name="p_GLI" init="0" />
			<float name="p_delta_r" init="0.0" />

			<aspect name="default">
				<!-- <draw shape="circle" size="cr" color="color"/> -->
				<draw image="'original.png'" size="cr" color="colors at (species self)"
					rotate="rnd 360" at="my location"/>
			</aspect>

			<!-- Species parameters redefined by each child species -->
			<map name="parameters"
				init="['H1'::0.0, 'H2'::0.0,'C1'::0.0,'C2'::0.0,'G1'::0.0,'G2'::0.0,'M1'::0.0,'M2'::0.0,'R1'::0.0,'expmE1'::0.0]"
				const="true"  />

			<!-- Private agent's actions -->

			<action name="LightInterception">

				<!-- the upside down cone is discretized in 24 * 20 beams (see model 
					description). We need to count for each beam the number of tree canopies 
					intersecting it. canopy_openness @ {i, j} = the value exp(-a * sum(E1i*pi)) 
					(see model description) for the beam (i,j), where i represents the 24 azimuth 
					divisions and j the 20 zenith divisions. the azimuth (degrees from the north) 
					represented is given by i*15° - 15°/2 (horizontal angle between 2 beams is 
					15°) the angle in degrees between the beam and the horizontal plane is given 
					by (20 -j +1)*4.5 - (4.5/2) (vertical angle between 2 beamx is 4.5°, j=1 
					are the most vertical beams) -->

				<put item="1.0" in="canopy_openness" all="true" />

				<!-- We start by looking at the possible intersections in the horizontal 
					plane. There are 24 azimuth divisions, but only 12 equations are needed to 
					represent the beams -->
				<!-- OPTIMISATION: faire le calcul par voisin plutôt que par division 
					angulaire: *prendre un voisin, *calculer les valeurs de i pour lesquelles 
					le rayon ibeam coupe la canopée du voisin (trouver une méthode directe, ça 
					sert à rien si on teste toutes les valeurs de i une à une) *etc. -->
				<set name="neighbours2" value="[]" />
				<loop over="(self neighbours_at 1) of_generic_species Tree"
					var="neigh">
					<set name="dist" value="self.location distance_to neigh.location" />
					<set name="neigh_height" value="neigh.height" />
					<set name="neigh_cr" value="neigh.cr" />
					<if
						condition="(((dist) &gt; neigh_cr) ?  (neigh_height &gt; (height + (((dist) - neigh_cr) * tan 45 ))) : (neigh_height &gt; height))">
						<add item="neigh" to="neighbours2" />
					</if>
				</loop>



				<loop from="1" to="12" var="i">

					<!-- test possibility of intersection between each tree and the beams 
						horizontally. We compute the distance between the horizontal beam with direction 
						i and i+12 and each tree, and if it's less than the tree canopy's radius, 
						it intersects. (see http://mathworld.wolfram.com/Point-LineDistance2-Dimensional.html 
						for the computation of the distance) -->
					<loop over="neighbours2" var="neighb">
						<set name="x0" value="first location" />
						<set name="y0" value="last location" />
						<set name="x1" value="first (neighb.location)" />
						<set name="y1" value="last (neighb.location)" />
						<set name="T" value="tan ((15*i) - (15/2))" />
						<set name="neighb_cr" value="neighb.cr" />
						<set name="distance"
							value="(abs (x1 - (T*y1) + (T*y0) - x0)) / (sqrt (1 + (T^2)))" />
						<set name="d1" value="self.location distance_to neighb.location" />
						<if condition="distance &lt; neighb_cr">
							<!-- the canopy of the tree neighb intersects the line drawn by the 
								two beams with azimuth indexes i and i+12. We need now to know which beam 
								is actually concerned. Both are if the distance between neighb and the current 
								tree (self) is smaller than neighb's canopy radius. Otherwise, we compute 
								a line perpendicular to the beam and passing through self, and we look at 
								whether neighb is situated on the right or left of this line. If it is on 
								the right, the beam with azimuth index i is concerned. Else, it's i+12 -->
							<!-- OPTIMIZE: when a tree is "too close", the beams in all directions 
								are concerned, thus we could probably arrange the algo to pour the test for 
								too close before testing the separate directions -->
							<set name="too_close" value="neighb_cr &gt; d1" />
							<set name="on_the_right" value="x1 &gt; ((-1/T) * y1) + x0 + (y0/T)" />
							<set name="intersecting_ibeams" value="[]" />
							<if condition="too_close or on_the_right">
								<add to="intersecting_ibeams" item="i - 1" />
							</if>
							<if condition="too_close or !on_the_right">
								<add to="intersecting_ibeams" item="i+12 - 1" />
							</if>
							<!-- for each value of i (= each direction of beam in which there 
								is a tree intersecting), we test intersections with vertical divisions. -->
							<loop over="intersecting_ibeams" var="inters_i">
								<!-- we're interested only in the upside-down cone making an angle 
									of 45° with the vertical axis, thus j is in [1,10] -->
								<loop from="1" to="10" var="j">
									<!-- distance between the centers of the two trees -->
									<!--<let name="d1" value="sqrt (((x1 - x0)^2) + ((y1 - (last location))^2))" 
										/> -->
									<!-- distance between the center of the neighbour tree and the "ibeam" 
										(projection of the beam on the horizontal plane) -->
									<!-- the ibeams enters the vertical projection (on horiz plane) 
										of the neighbour's canopy at spot S1, and leaves at spot S2. h1 (resp. h2) 
										gives the distance between the center of the current tree and S1 (resp. S2) -->
									<set name="first_term" value="sqrt ((d1^2) - (distance^2))" />
									<set name="second_term" value="sqrt ((neighb_cr^2) - (distance^2))" />
									<set name="h1" value="first_term - (second_term)" />
									<set name="h2" value="first_term + (second_term)" />

									<!-- zenith angle in degrees from the horizontal. j = 1 -> 87.75° 
										is the most vertical beam, corresponding to index j-1 in canopy_openness -->
									<set name="zenith_angle_deg" value="92.25 - (j * 4.5)" />
									<!-- U gives the vertical slope of the jbeam -->
									<set name="U" value="tan zenith_angle_deg" />
									<set name="neighb_height" value="neighb.height" />
									<!-- test intersection -->
									<if
										condition="(neighb_height &gt; (U * h1) + height) and ((neighb_height - (neighb.cd)) &lt; (U * h2) + height)">
										<!-- by doing the following multiplication each time, we end up 
											in each cell of the matrix with the quantity CO = exp(-a * sum(E1i*pi)) as 
											in the model description -->
										<put
											item="(float (canopy_openness @ {inters_i, j})) * (((neighb.parameters) at 'expmE1') ^ ( 0.73936 + (0.009 * zenith_angle_deg))) "
											in="canopy_openness" at="{inters_i, j-1}" />
									</if>
								</loop>
							</loop>
						</if>
					</loop>
				</loop>




				<!-- sum total canopy openness -->
				<set name="p_GLI" value="sum canopy_openness * 0.462962962962963 " />
				<!-- je sais pas trop si il faut diviser par 24*20 ou 24*9 -->
				<!-- <do action="debug" > -->
				<!-- <arg name="message" value=" string p_GLI" /> -->
				<!-- </do> -->

			</action>

			<action name="Growth">
				<set name="p_delta_r"
					value="r * (float (parameters at 'G1') * p_GLI)/((float (parameters at 'G1')/ float (parameters at 'G2')) + p_GLI) " />
			</action>

			<action name="Death">
				<!-- see equation 3 in the article (pacala et al 1996): "Also, because -->
				<!-- the probability of mortality given by Eq. 6 corresponds to a period -->
				<!-- of 2.5 yr, this funtion is applied twice during each 5-yr iteration -->
				<!-- of SORTIE" -->

				<!-- Moreover "Runs described in this paper correspond to a baseline -->
				<!-- scenario of low disturbance. Each individual has a constant annual -->
				<!-- probability of mortality of 0.01 in addition to the growth-dependent -->
				<!-- mortality specified by Eq. 6." -->

				<!-- NOT YET IMPLEMENTED: "Canopy trees growing in full sun generally -->
				<!-- have growth rates large enough to make m(g) negligible. However, -->
				<!-- because of the Constant Area Increment Law, very large trees do 
					grow -->
				<!-- slowly. To prevent mortality characteristic of saplings from -->
				<!-- affecting these large trees, SORTIE does not implement (Eq. 6) for -->
				<!-- trees >20 m in height if they are growing in full sun." -->

				<!-- mortality probability in 2.5yr -->
				<set name="m_"
					value="float (parameters at 'M1') * exp (- float (parameters at 'M2') * p_delta_r)" />
				<!-- mortality probability taking into account the 0.01 base probability 
					and the need to apply the probability function 2 times (equation worked out 
					with a probability decision tree) -->
				<set name="m_" value=" Mortality_rate_basis + (0.99 * ((2 * m_) - (m_^2)))" />
				<if condition="flip m_">
					<set name="nbDeadTrees" value="nbDeadTrees + 1" />
					<do action="die" />
				</if>
			</action>

			<reflex>
				<do action="LightInterception" />
				<do action="Growth" />
				<do action="Death" />
			</reflex>
		</species>

		<species name="Hm" parent="Tree" skills="situated, visible">
			<map name="parameters"
				init="['H1'::0.73, 'H2'::29.6,'C1'::0.1,'C2'::0.846,'G1'::0.229,'G2'::0.051,'M1'::0.077,'M2'::59.7,'R1'::5.991,'expmE1'::(0.000064)]"
				const="true" />
		</species>

		<species name="YB" parent="Tree" skills="situated, visible">
			<map name="parameters"
				init="['H1'::1.89, 'H2'::23.2,'C1'::0.109,'C2'::0.540,'G1'::0.169,'G2'::0.137,'M1'::0.555,'M2'::26.7,'R1'::0.001,'expmE1'::(0.000399)]"
				const="true" />
		</species>

		<species name="Be" parent="Tree" skills="situated, visible">
			<map name="parameters"
				init="['H1'::1.06, 'H2'::34.6,'C1'::0.152,'C2'::0.664,'G1'::0.152,'G2'::0.075,'M1'::0.014,'M2'::2.0,'R1'::1.957,'expmE1'::(0.000064)]"
				const="true" />
		</species>

		<species name="SM" parent="Tree" skills="situated, visible">
			<map name="parameters"
				init="['H1'::24.8, 'H2'::1.87,'C1'::0.107,'C2'::0.580,'G1'::0.125,'G2'::0.159,'M1'::0.998,'M2'::47.9,'R1'::(0.000744),'expmE1'::0.399]"
				const="true" />
		</species>

		<species name="RM" parent="Tree" skills="situated, visible">
			<map name="parameters"
				init="['H1'::25.7, 'H2'::1.89,'C1'::0.108,'C2'::0.490,'G1'::0.167,'G2'::0.027,'M1'::0.912,'M2'::68.8,'R1'::(0.000363),'expmE1'::0.399]"
				const="true" />
		</species>

		<species name="BC" parent="Tree" skills="situated, visible">
			<map name="parameters"
				init="['H1'::30.8, 'H2'::1.35,'C1'::0.116,'C2'::0.370,'G1'::0.249,'G2'::0.064,'M1'::0.998,'M2'::48.5,'R1'::(0.000775),'expmE1'::0.399]"
				const="true" />
		</species>

		<species name="WP" parent="Tree" skills="situated, visible">
			<map name="parameters"
				init="['H1'::38.4, 'H2'::1.0,'C1'::0.087,'C2'::0.413,'G1'::0.230,'G2'::0.019,'M1'::0.268,'M2'::46.7,'R1'::0.000103,'expmE1'::0.399]"
				const="true" />
		</species>

		<species name="WA" parent="Tree" skills="situated, visible">
			<map name="parameters"
				init="['H1'::32.4, 'H2'::1.68,'C1'::0.095,'C2'::0.319,'G1'::0.225,'G2'::0.025,'M1'::0.999,'M2'::51.5,'R1'::(0.092*(0.001)),'expmE1'::0.399]"
				const="true" />
		</species>

		<species name="RO" parent="Tree" skills="situated, visible">
			<map name="parameters"
				init="['H1'::33.6, 'H2'::1.26,'C1'::0.119,'C2'::0.413,'G1'::0.266,'G2'::0.022,'M1'::0.985,'M2'::93.8,'R1'::(0.607*(0.001)),'expmE1'::0.566]"
				const="true" />
		</species>
	</entities>

	<environment width="nbCellsHorizontally * cellSizeX"
		height="nbCellsVertically * cellSizeY">
		<grid name="forest_grid" width="nbCellsHorizontally" height="nbCellsVertically"
			torus="false">
			<rgb name="color" init="rgb [255, 255, 225 + rnd 30]" const="true" />

			<reflex name="Reproduction">

				<loop over="specieslist" var="sp">
					<!-- Only adults (radius > 10) reproduce -->
					<set name="speciesMembers" value="candidates at sp" />
					<set name="meanNbChildren" value="0.0" />
					<loop over="speciesMembers" var="treei">
						<if condition="int treei != -1">
						<set name="meanNbChildren"
							value="meanNbChildren + (((2*((treei).r)/100)^2) * exp (-1 * float ((treei.parameters) at 'R1') * ((self.location distance_to (treei.location))^3)))" />
					</if>
					</loop>
					<!-- sampling poisson distribution -->
					<set name="poisson_cdf" value="[(exp (-meanNbChildren))]" />
					<set name="k" value="1" />
					<loop while="(last poisson_cdf) &lt; 0.9999">
						<add
							item="(poisson_cdf @ ((length poisson_cdf)-1)) + ((meanNbChildren^k)*(exp (-meanNbChildren))/fact k)"
							to="poisson_cdf" />
						<set name="k" value="k+1" />
					</loop>
					<set name="random01" value="(rnd 10000)/10000" />
					<set name="k" value="0" />
					<loop
						while="(k &lt; length poisson_cdf) and ((poisson_cdf @ k) &lt;= random01) ">

						<set name="k" value="k+1" />
					</loop>
					<loop from="1" to="k" var="i">
						<add item="any_location_in shape" to="to_create at sp" />
					</loop>
					<!-- <create species="sp" as="Tree" number="k"
						with="[location :: any_location_in shape]" /> -->

				</loop>
			</reflex>

		</grid>
	</environment>

	<output>
		<display name="view" refresh_every="1">
			<grid name="forest_grid" />
			<species name="Hm" transparency="0.4" />
			<species name="YB" transparency="0.4" />
			<species name="Be" transparency="0.4" />	
			<species name="SM" transparency="0.4" />	
			<species name="RM" transparency="0.4" />
			<species name="BC" transparency="0.4" />
			<species name="WP" transparency="0.4" />
			<species name="WA" transparency="0.4" />
			<species name="RO" transparency="0.4" />
		</display>
		<display refresh_every="1" name="Chart">
			<chart name="Number of trees" type="series" background="rgb 'black'">
				<data name="Hm" value="length (list Hm)" color="rgb 'red'" />
				<data name="YB" value="length (list YB)" color="rgb 'green'" />
				<data name="Be" value="length (list Be)" color="rgb 'blue'" />
				<data name="SM" value="length (list SM)" color="rgb 'yellow'" />
				<data name="RM" value="length (list RM)" color="rgb 'orange'" />
				<data name="BC" value="length (list BC)" color="rgb 'cyan'" />
				<data name="WP" value="length (list WP)" color="rgb 'pink'" />
				<data name="WA" value="length (list WA)" color="rgb 'magenta'" />
				<data name="RO" value="length (list RO)" color="rgb 'gray'" />
			</chart>
		</display>
		<monitor name="time" value="string int (time * 5) + ' years'" />
		<monitor name="trees" value="length agents" />
		<monitor name="dead trees" value="nbDeadTrees" />
	</output>
</sortie>
