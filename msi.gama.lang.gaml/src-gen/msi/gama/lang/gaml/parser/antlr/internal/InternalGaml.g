/*
* generated by Xtext
*/
grammar InternalGaml;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package msi.gama.lang.gaml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package msi.gama.lang.gaml.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import msi.gama.lang.gaml.services.GamlGrammarAccess;

}

@parser::members {

 	private GamlGrammarAccess grammarAccess;
 	
    public InternalGamlParser(TokenStream input, GamlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected GamlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='model' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelKeyword_0_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_2_0()); 
	    }
		lv_imports_2_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_2_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_0_3_0()); 
	    }
		lv_statements_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getStringEvaluatorAction_1_0(),
            $current);
    }
)(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
)	otherlv_6='<-' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getModelAccess().getLessThanSignHyphenMinusKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getExprExpressionParserRuleCall_1_3_0()); 
	    }
		lv_expr_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleS_Assignment)=>
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getS_AssignmentParserRuleCall_0()); 
    }
    this_S_Assignment_0=ruleS_Assignment
    { 
        $current = $this_S_Assignment_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(((	ruleS_Declaration)=>
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getS_DeclarationParserRuleCall_1_0()); 
    }
    this_S_Declaration_1=ruleS_Declaration
    { 
        $current = $this_S_Declaration_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getS_1Expr_Facets_BlockOrEndParserRuleCall_1_1()); 
    }
    this_S_1Expr_Facets_BlockOrEnd_2=ruleS_1Expr_Facets_BlockOrEnd
    { 
        $current = $this_S_1Expr_Facets_BlockOrEnd_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getS_OtherParserRuleCall_1_2()); 
    }
    this_S_Other_3=ruleS_Other
    { 
        $current = $this_S_Other_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getS_DoParserRuleCall_1_3()); 
    }
    this_S_Do_4=ruleS_Do
    { 
        $current = $this_S_Do_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getS_ReturnParserRuleCall_1_4()); 
    }
    this_S_Return_5=ruleS_Return
    { 
        $current = $this_S_Return_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getS_IfParserRuleCall_1_5()); 
    }
    this_S_If_6=ruleS_If
    { 
        $current = $this_S_If_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getS_EquationsParserRuleCall_1_6()); 
    }
    this_S_Equations_7=ruleS_Equations
    { 
        $current = $this_S_Equations_7.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleS_1Expr_Facets_BlockOrEnd
entryRuleS_1Expr_Facets_BlockOrEnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_1Expr_Facets_BlockOrEndRule()); }
	 iv_ruleS_1Expr_Facets_BlockOrEnd=ruleS_1Expr_Facets_BlockOrEnd 
	 { $current=$iv_ruleS_1Expr_Facets_BlockOrEnd.current; } 
	 EOF 
;

// Rule S_1Expr_Facets_BlockOrEnd
ruleS_1Expr_Facets_BlockOrEnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getS_1Expr_Facets_BlockOrEndAccess().getKey_1Expr_Facets_BlockOrEnd_KeyParserRuleCall_0_0()); 
	    }
		lv_key_0_0=rule_1Expr_Facets_BlockOrEnd_Key		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_1Expr_Facets_BlockOrEndRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"_1Expr_Facets_BlockOrEnd_Key");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getS_1Expr_Facets_BlockOrEndAccess().getFirstFacetKeyParserRuleCall_1()); 
    }
ruleFirstFacetKey
    { 
        afterParserOrEnumRuleCall();
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getS_1Expr_Facets_BlockOrEndAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_1Expr_Facets_BlockOrEndRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getS_1Expr_Facets_BlockOrEndAccess().getFacetsFacetParserRuleCall_3_0()); 
	    }
		lv_facets_3_0=ruleFacet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_1Expr_Facets_BlockOrEndRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_3_0, 
        		"Facet");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getS_1Expr_Facets_BlockOrEndAccess().getBlockBlockParserRuleCall_4_0_0()); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_1Expr_Facets_BlockOrEndRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getS_1Expr_Facets_BlockOrEndAccess().getSemicolonKeyword_4_1());
    }
))
;





// Entry rule entryRuleS_Do
entryRuleS_Do returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_DoRule()); }
	 iv_ruleS_Do=ruleS_Do 
	 { $current=$iv_ruleS_Do.current; } 
	 EOF 
;

// Rule S_Do
ruleS_Do returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getS_DoAccess().getKey_DoKeyParserRuleCall_0_0()); 
	    }
		lv_key_0_0=rule_DoKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_DoRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"_DoKey");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='action:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getS_DoAccess().getActionKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getS_DoAccess().getExprAbstractRefParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleAbstractRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_DoRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"AbstractRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getS_DoAccess().getFacetsFacetParserRuleCall_3_0()); 
	    }
		lv_facets_3_0=ruleFacet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_DoRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_3_0, 
        		"Facet");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getS_DoAccess().getBlockBlockParserRuleCall_4_0_0()); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_DoRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getS_DoAccess().getSemicolonKeyword_4_1());
    }
))
;





// Entry rule entryRuleS_Loop
entryRuleS_Loop returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_LoopRule()); }
	 iv_ruleS_Loop=ruleS_Loop 
	 { $current=$iv_ruleS_Loop.current; } 
	 EOF 
;

// Rule S_Loop
ruleS_Loop returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=	'loop' 
    {
        newLeafNode(lv_key_0_0, grammarAccess.getS_LoopAccess().getKeyLoopKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_LoopRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_0_0, "loop");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getS_LoopAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_LoopRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getS_LoopAccess().getFacetsFacetParserRuleCall_2_0()); 
	    }
		lv_facets_2_0=ruleFacet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_LoopRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_2_0, 
        		"Facet");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getS_LoopAccess().getBlockBlockParserRuleCall_3_0()); 
	    }
		lv_block_3_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_LoopRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_3_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleS_If
entryRuleS_If returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_IfRule()); }
	 iv_ruleS_If=ruleS_If 
	 { $current=$iv_ruleS_If.current; } 
	 EOF 
;

// Rule S_If
ruleS_If returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=	'if' 
    {
        newLeafNode(lv_key_0_0, grammarAccess.getS_IfAccess().getKeyIfKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_IfRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_0_0, "if");
	    }

)
)(	otherlv_1='condition:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getS_IfAccess().getConditionKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getS_IfAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_IfRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getS_IfAccess().getBlockBlockParserRuleCall_3_0()); 
	    }
		lv_block_3_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_IfRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_3_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getS_IfAccess().getElseKeyword_4_0());
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getS_IfAccess().getElseS_IfParserRuleCall_4_1_0_0()); 
	    }
		lv_else_5_1=ruleS_If		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_IfRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_5_1, 
        		"S_If");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getS_IfAccess().getElseBlockParserRuleCall_4_1_0_1()); 
	    }
		lv_else_5_2=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_IfRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_5_2, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)

)
))?)
;





// Entry rule entryRuleS_Other
entryRuleS_Other returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_OtherRule()); }
	 iv_ruleS_Other=ruleS_Other 
	 { $current=$iv_ruleS_Other.current; } 
	 EOF 
;

// Rule S_Other
ruleS_Other returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=RULE_ID
		{
			newLeafNode(lv_key_0_0, grammarAccess.getS_OtherAccess().getKeyIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_OtherRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getS_OtherAccess().getFacetsFacetParserRuleCall_1_0()); 
	    }
		lv_facets_1_0=ruleFacet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_OtherRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_1_0, 
        		"Facet");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getS_OtherAccess().getBlockBlockParserRuleCall_2_0_0()); 
	    }
		lv_block_2_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_OtherRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_2_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getS_OtherAccess().getSemicolonKeyword_2_1());
    }
))
;





// Entry rule entryRuleS_Return
entryRuleS_Return returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_ReturnRule()); }
	 iv_ruleS_Return=ruleS_Return 
	 { $current=$iv_ruleS_Return.current; } 
	 EOF 
;

// Rule S_Return
ruleS_Return returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=	'return' 
    {
        newLeafNode(lv_key_0_0, grammarAccess.getS_ReturnAccess().getKeyReturnKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_ReturnRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_0_0, "return");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getS_ReturnAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_ReturnRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getS_ReturnAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleS_Declaration
entryRuleS_Declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_DeclarationRule()); }
	 iv_ruleS_Declaration=ruleS_Declaration 
	 { $current=$iv_ruleS_Declaration.current; } 
	 EOF 
;

// Rule S_Declaration
ruleS_Declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getS_DeclarationAccess().getS_SpeciesParserRuleCall_0()); 
    }
    this_S_Species_0=ruleS_Species
    { 
        $current = $this_S_Species_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getS_DeclarationAccess().getS_ExperimentParserRuleCall_1()); 
    }
    this_S_Experiment_1=ruleS_Experiment
    { 
        $current = $this_S_Experiment_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getS_DeclarationAccess().getS_ReflexParserRuleCall_2()); 
    }
    this_S_Reflex_2=ruleS_Reflex
    { 
        $current = $this_S_Reflex_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((
(
ruleTypeRef
)
)=>
    { 
        newCompositeNode(grammarAccess.getS_DeclarationAccess().getS_DefinitionParserRuleCall_3()); 
    }
    this_S_Definition_3=ruleS_Definition
    { 
        $current = $this_S_Definition_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getS_DeclarationAccess().getS_ActionParserRuleCall_4()); 
    }
    this_S_Action_4=ruleS_Action
    { 
        $current = $this_S_Action_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getS_DeclarationAccess().getS_VarParserRuleCall_5()); 
    }
    this_S_Var_5=ruleS_Var
    { 
        $current = $this_S_Var_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getS_DeclarationAccess().getS_LoopParserRuleCall_6()); 
    }
    this_S_Loop_6=ruleS_Loop
    { 
        $current = $this_S_Loop_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleS_Species
entryRuleS_Species returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_SpeciesRule()); }
	 iv_ruleS_Species=ruleS_Species 
	 { $current=$iv_ruleS_Species.current; } 
	 EOF 
;

// Rule S_Species
ruleS_Species returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getS_SpeciesAccess().getKey_SpeciesKeyParserRuleCall_0_0()); 
	    }
		lv_key_0_0=rule_SpeciesKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_SpeciesRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"_SpeciesKey");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='name:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getS_SpeciesAccess().getNameKeyword_1());
    }
)?(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getS_SpeciesAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_SpeciesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getS_SpeciesAccess().getFacetsFacetParserRuleCall_3_0()); 
	    }
		lv_facets_3_0=ruleFacet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_SpeciesRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_3_0, 
        		"Facet");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getS_SpeciesAccess().getBlockBlockParserRuleCall_4_0_0()); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_SpeciesRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getS_SpeciesAccess().getSemicolonKeyword_4_1());
    }
))
;





// Entry rule entryRuleS_Experiment
entryRuleS_Experiment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_ExperimentRule()); }
	 iv_ruleS_Experiment=ruleS_Experiment 
	 { $current=$iv_ruleS_Experiment.current; } 
	 EOF 
;

// Rule S_Experiment
ruleS_Experiment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=	'experiment' 
    {
        newLeafNode(lv_key_0_0, grammarAccess.getS_ExperimentAccess().getKeyExperimentKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_ExperimentRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_0_0, "experiment");
	    }

)
)(	otherlv_1='name:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getS_ExperimentAccess().getNameKeyword_1());
    }
)?(
(
(
		{ 
	        newCompositeNode(grammarAccess.getS_ExperimentAccess().getNameValid_IDParserRuleCall_2_0_0()); 
	    }
		lv_name_2_1=ruleValid_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_ExperimentRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_1, 
        		"Valid_ID");
	        afterParserOrEnumRuleCall();
	    }

    |		lv_name_2_2=RULE_STRING
		{
			newLeafNode(lv_name_2_2, grammarAccess.getS_ExperimentAccess().getNameSTRINGTerminalRuleCall_2_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_ExperimentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_2, 
        		"STRING");
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getS_ExperimentAccess().getFacetsFacetParserRuleCall_3_0()); 
	    }
		lv_facets_3_0=ruleFacet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_ExperimentRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_3_0, 
        		"Facet");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getS_ExperimentAccess().getBlockBlockParserRuleCall_4_0()); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_ExperimentRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleS_Reflex
entryRuleS_Reflex returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_ReflexRule()); }
	 iv_ruleS_Reflex=ruleS_Reflex 
	 { $current=$iv_ruleS_Reflex.current; } 
	 EOF 
;

// Rule S_Reflex
ruleS_Reflex returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getS_ReflexAccess().getKey_ReflexKeyParserRuleCall_0_0()); 
	    }
		lv_key_0_0=rule_ReflexKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_ReflexRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"_ReflexKey");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='name:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getS_ReflexAccess().getNameKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getS_ReflexAccess().getNameValid_IDParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleValid_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_ReflexRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Valid_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_3='when:' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getS_ReflexAccess().getWhenKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getS_ReflexAccess().getExprExpressionParserRuleCall_3_1_0()); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_ReflexRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getS_ReflexAccess().getBlockBlockParserRuleCall_4_0()); 
	    }
		lv_block_5_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_ReflexRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_5_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleS_Definition
entryRuleS_Definition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_DefinitionRule()); }
	 iv_ruleS_Definition=ruleS_Definition 
	 { $current=$iv_ruleS_Definition.current; } 
	 EOF 
;

// Rule S_Definition
ruleS_Definition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
ruleTypeRef
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getS_DefinitionAccess().getTkeyTypeRefParserRuleCall_0_0()); 
	    }
		lv_tkey_0_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_DefinitionRule());
	        }
       		set(
       			$current, 
       			"tkey",
        		lv_tkey_0_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='name:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getS_DefinitionAccess().getNameKeyword_1());
    }
)?(
(
(
		{ 
	        newCompositeNode(grammarAccess.getS_DefinitionAccess().getNameValid_IDParserRuleCall_2_0_0()); 
	    }
		lv_name_2_1=ruleValid_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_DefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_1, 
        		"Valid_ID");
	        afterParserOrEnumRuleCall();
	    }

    |		lv_name_2_2=RULE_STRING
		{
			newLeafNode(lv_name_2_2, grammarAccess.getS_DefinitionAccess().getNameSTRINGTerminalRuleCall_2_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_DefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_2, 
        		"STRING");
	    }

)

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getS_DefinitionAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getS_DefinitionAccess().getArgsActionArgumentsParserRuleCall_3_1_0()); 
	    }
		lv_args_4_0=ruleActionArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_DefinitionRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"ActionArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getS_DefinitionAccess().getRightParenthesisKeyword_3_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getS_DefinitionAccess().getFacetsFacetParserRuleCall_4_0()); 
	    }
		lv_facets_6_0=ruleFacet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_DefinitionRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_6_0, 
        		"Facet");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getS_DefinitionAccess().getBlockBlockParserRuleCall_5_0_0()); 
	    }
		lv_block_7_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_DefinitionRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_7_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getS_DefinitionAccess().getSemicolonKeyword_5_1());
    }
))
;





// Entry rule entryRuleS_Action
entryRuleS_Action returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_ActionRule()); }
	 iv_ruleS_Action=ruleS_Action 
	 { $current=$iv_ruleS_Action.current; } 
	 EOF 
;

// Rule S_Action
ruleS_Action returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getS_ActionAccess().getS_ActionAction_0(),
            $current);
    }
)(
(
		lv_key_1_0=	'action' 
    {
        newLeafNode(lv_key_1_0, grammarAccess.getS_ActionAccess().getKeyActionKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_ActionRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_0, "action");
	    }

)
)(	otherlv_2='name:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getS_ActionAccess().getNameKeyword_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getS_ActionAccess().getNameValid_IDParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleValid_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_ActionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Valid_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getS_ActionAccess().getLeftParenthesisKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getS_ActionAccess().getArgsActionArgumentsParserRuleCall_4_1_0()); 
	    }
		lv_args_5_0=ruleActionArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_ActionRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"ActionArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getS_ActionAccess().getRightParenthesisKeyword_4_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getS_ActionAccess().getFacetsFacetParserRuleCall_5_0()); 
	    }
		lv_facets_7_0=ruleFacet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_ActionRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_7_0, 
        		"Facet");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getS_ActionAccess().getBlockBlockParserRuleCall_6_0_0()); 
	    }
		lv_block_8_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_ActionRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_8_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getS_ActionAccess().getSemicolonKeyword_6_1());
    }
))
;





// Entry rule entryRuleS_Var
entryRuleS_Var returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_VarRule()); }
	 iv_ruleS_Var=ruleS_Var 
	 { $current=$iv_ruleS_Var.current; } 
	 EOF 
;

// Rule S_Var
ruleS_Var returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getS_VarAccess().getS_VarAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getS_VarAccess().getKey_VarOrConstKeyParserRuleCall_1_0()); 
	    }
		lv_key_1_0=rule_VarOrConstKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_VarRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_1_0, 
        		"_VarOrConstKey");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='name:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getS_VarAccess().getNameKeyword_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getS_VarAccess().getNameValid_IDParserRuleCall_3_0()); 
	    }
		lv_name_3_0=ruleValid_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_VarRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"Valid_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getS_VarAccess().getFacetsFacetParserRuleCall_4_0()); 
	    }
		lv_facets_4_0=ruleFacet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_VarRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_4_0, 
        		"Facet");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getS_VarAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleS_Assignment
entryRuleS_Assignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_AssignmentRule()); }
	 iv_ruleS_Assignment=ruleS_Assignment 
	 { $current=$iv_ruleS_Assignment.current; } 
	 EOF 
;

// Rule S_Assignment
ruleS_Assignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getS_AssignmentAccess().getS_DirectAssignmentParserRuleCall_0()); 
    }
    this_S_DirectAssignment_0=ruleS_DirectAssignment
    { 
        $current = $this_S_DirectAssignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getS_AssignmentAccess().getS_SetParserRuleCall_1()); 
    }
    this_S_Set_1=ruleS_Set
    { 
        $current = $this_S_Set_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleS_DirectAssignment
entryRuleS_DirectAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_DirectAssignmentRule()); }
	 iv_ruleS_DirectAssignment=ruleS_DirectAssignment 
	 { $current=$iv_ruleS_DirectAssignment.current; } 
	 EOF 
;

// Rule S_DirectAssignment
ruleS_DirectAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getS_DirectAssignmentAccess().getExprExpressionParserRuleCall_0_0_0()); 
	    }
		lv_expr_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_DirectAssignmentRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		lv_key_1_1=	'<-' 
    {
        newLeafNode(lv_key_1_1, grammarAccess.getS_DirectAssignmentAccess().getKeyLessThanSignHyphenMinusKeyword_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_DirectAssignmentRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_1, null);
	    }

    |		lv_key_1_2=	'<<' 
    {
        newLeafNode(lv_key_1_2, grammarAccess.getS_DirectAssignmentAccess().getKeyLessThanSignLessThanSignKeyword_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_DirectAssignmentRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_2, null);
	    }

    |		lv_key_1_3=	'>>' 
    {
        newLeafNode(lv_key_1_3, grammarAccess.getS_DirectAssignmentAccess().getKeyGreaterThanSignGreaterThanSignKeyword_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_DirectAssignmentRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_3, null);
	    }

    |		lv_key_1_4=	'+=' 
    {
        newLeafNode(lv_key_1_4, grammarAccess.getS_DirectAssignmentAccess().getKeyPlusSignEqualsSignKeyword_0_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_DirectAssignmentRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_4, null);
	    }

    |		lv_key_1_5=	'-=' 
    {
        newLeafNode(lv_key_1_5, grammarAccess.getS_DirectAssignmentAccess().getKeyHyphenMinusEqualsSignKeyword_0_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_DirectAssignmentRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_5, null);
	    }

    |		lv_key_1_6=	'++' 
    {
        newLeafNode(lv_key_1_6, grammarAccess.getS_DirectAssignmentAccess().getKeyPlusSignPlusSignKeyword_0_1_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_DirectAssignmentRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_6, null);
	    }

    |		lv_key_1_7=	'--' 
    {
        newLeafNode(lv_key_1_7, grammarAccess.getS_DirectAssignmentAccess().getKeyHyphenMinusHyphenMinusKeyword_0_1_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_DirectAssignmentRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_7, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getS_DirectAssignmentAccess().getValueExpressionParserRuleCall_0_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_DirectAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getS_DirectAssignmentAccess().getFacetsFacetParserRuleCall_0_3_0()); 
	    }
		lv_facets_3_0=ruleFacet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_DirectAssignmentRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_3_0, 
        		"Facet");
	        afterParserOrEnumRuleCall();
	    }

)
)*)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getS_DirectAssignmentAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleS_Set
entryRuleS_Set returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_SetRule()); }
	 iv_ruleS_Set=ruleS_Set 
	 { $current=$iv_ruleS_Set.current; } 
	 EOF 
;

// Rule S_Set
ruleS_Set returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=	'set' 
    {
        newLeafNode(lv_key_0_0, grammarAccess.getS_SetAccess().getKeySetKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_SetRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_0_0, "set");
	    }

)
)(	otherlv_1='var:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getS_SetAccess().getVarKeyword_1_0());
    }

    |	otherlv_2='name:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getS_SetAccess().getNameKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getS_SetAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_SetRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='value:' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getS_SetAccess().getValueKeyword_3_0());
    }

    |	otherlv_5='<-' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getS_SetAccess().getLessThanSignHyphenMinusKeyword_3_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getS_SetAccess().getValueExpressionParserRuleCall_4_0()); 
	    }
		lv_value_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_SetRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getS_SetAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleS_Equations
entryRuleS_Equations returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_EquationsRule()); }
	 iv_ruleS_Equations=ruleS_Equations 
	 { $current=$iv_ruleS_Equations.current; } 
	 EOF 
;

// Rule S_Equations
ruleS_Equations returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getS_EquationsAccess().getKey_EquationsKeyParserRuleCall_0_0()); 
	    }
		lv_key_0_0=rule_EquationsKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_EquationsRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"_EquationsKey");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getS_EquationsAccess().getNameValid_IDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValid_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_EquationsRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Valid_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getS_EquationsAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getS_EquationsAccess().getEquationsS_EquationParserRuleCall_3_0_0()); 
	    }
		lv_equations_3_0=ruleS_Equation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_EquationsRule());
	        }
       		add(
       			$current, 
       			"equations",
        		lv_equations_3_0, 
        		"S_Equation");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getS_EquationsAccess().getSemicolonKeyword_3_1());
    }
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getS_EquationsAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleS_Equation
entryRuleS_Equation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getS_EquationRule()); }
	 iv_ruleS_Equation=ruleS_Equation 
	 { $current=$iv_ruleS_Equation.current; } 
	 EOF 
;

// Rule S_Equation
ruleS_Equation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getS_EquationAccess().getExprFunctionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_EquationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_key_1_0=	'=' 
    {
        newLeafNode(lv_key_1_0, grammarAccess.getS_EquationAccess().getKeyEqualsSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getS_EquationRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_0, "=");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getS_EquationAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getS_EquationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRule_EquationsKey
entryRule_EquationsKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.get_EquationsKeyRule()); } 
	 iv_rule_EquationsKey=rule_EquationsKey 
	 { $current=$iv_rule_EquationsKey.current.getText(); }  
	 EOF 
;

// Rule _EquationsKey
rule_EquationsKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='equation' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_EquationsKeyAccess().getEquationKeyword()); 
    }

    ;





// Entry rule entryRule_SpeciesKey
entryRule_SpeciesKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.get_SpeciesKeyRule()); } 
	 iv_rule_SpeciesKey=rule_SpeciesKey 
	 { $current=$iv_rule_SpeciesKey.current.getText(); }  
	 EOF 
;

// Rule _SpeciesKey
rule_SpeciesKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='species' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_SpeciesKeyAccess().getSpeciesKeyword_0()); 
    }

    |
	kw='grid' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_SpeciesKeyAccess().getGridKeyword_1()); 
    }
)
    ;





// Entry rule entryRule_1Expr_Facets_BlockOrEnd_Key
entryRule_1Expr_Facets_BlockOrEnd_Key returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyRule()); } 
	 iv_rule_1Expr_Facets_BlockOrEnd_Key=rule_1Expr_Facets_BlockOrEnd_Key 
	 { $current=$iv_rule_1Expr_Facets_BlockOrEnd_Key.current.getText(); }  
	 EOF 
;

// Rule _1Expr_Facets_BlockOrEnd_Key
rule_1Expr_Facets_BlockOrEnd_Key returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='ask' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getAskKeyword_0()); 
    }

    |
	kw='release' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getReleaseKeyword_1()); 
    }

    |
	kw='capture' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getCaptureKeyword_2()); 
    }

    |
	kw='create' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getCreateKeyword_3()); 
    }

    |
	kw='write' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getWriteKeyword_4()); 
    }

    |
	kw='error' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getErrorKeyword_5()); 
    }

    |
	kw='warn' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getWarnKeyword_6()); 
    }

    |
	kw='exception' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getExceptionKeyword_7()); 
    }

    |
	kw='save' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getSaveKeyword_8()); 
    }

    |
	kw='draw' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getDrawKeyword_9()); 
    }

    |
	kw='display_population' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getDisplay_populationKeyword_10()); 
    }

    |
	kw='display_grid' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getDisplay_gridKeyword_11()); 
    }

    |
	kw='add' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getAddKeyword_12()); 
    }

    |
	kw='remove' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getRemoveKeyword_13()); 
    }

    |
	kw='put' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getPutKeyword_14()); 
    }

    |
	kw='using' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getUsingKeyword_15()); 
    }

    |
	kw='switch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getSwitchKeyword_16()); 
    }

    |
	kw='match' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getMatchKeyword_17()); 
    }

    |
	kw='match_between' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getMatch_betweenKeyword_18()); 
    }

    |
	kw='match_one' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_1Expr_Facets_BlockOrEnd_KeyAccess().getMatch_oneKeyword_19()); 
    }
)
    ;





// Entry rule entryRule_DoKey
entryRule_DoKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.get_DoKeyRule()); } 
	 iv_rule_DoKey=rule_DoKey 
	 { $current=$iv_rule_DoKey.current.getText(); }  
	 EOF 
;

// Rule _DoKey
rule_DoKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='do' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_DoKeyAccess().getDoKeyword()); 
    }

    ;





// Entry rule entryRule_VarOrConstKey
entryRule_VarOrConstKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.get_VarOrConstKeyRule()); } 
	 iv_rule_VarOrConstKey=rule_VarOrConstKey 
	 { $current=$iv_rule_VarOrConstKey.current.getText(); }  
	 EOF 
;

// Rule _VarOrConstKey
rule_VarOrConstKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='var' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_VarOrConstKeyAccess().getVarKeyword_0()); 
    }

    |
	kw='const' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_VarOrConstKeyAccess().getConstKeyword_1()); 
    }

    |
	kw='let' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_VarOrConstKeyAccess().getLetKeyword_2()); 
    }

    |
	kw='arg' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_VarOrConstKeyAccess().getArgKeyword_3()); 
    }
)
    ;





// Entry rule entryRule_ReflexKey
entryRule_ReflexKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.get_ReflexKeyRule()); } 
	 iv_rule_ReflexKey=rule_ReflexKey 
	 { $current=$iv_rule_ReflexKey.current.getText(); }  
	 EOF 
;

// Rule _ReflexKey
rule_ReflexKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='init' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_ReflexKeyAccess().getInitKeyword_0()); 
    }

    |
	kw='reflex' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.get_ReflexKeyAccess().getReflexKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleParameters
entryRuleParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	 iv_ruleParameters=ruleParameters 
	 { $current=$iv_ruleParameters.current; } 
	 EOF 
;

// Rule Parameters
ruleParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParametersAccess().getParametersAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParametersAccess().getParamsParameterListParserRuleCall_1_0()); 
	    }
		lv_params_1_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParametersRule());
	        }
       		set(
       			$current, 
       			"params",
        		lv_params_1_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleActionArguments
entryRuleActionArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionArgumentsRule()); }
	 iv_ruleActionArguments=ruleActionArguments 
	 { $current=$iv_ruleActionArguments.current; } 
	 EOF 
;

// Rule ActionArguments
ruleActionArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getActionArgumentsAccess().getArgsArgumentDefinitionParserRuleCall_0_0()); 
	    }
		lv_args_0_0=ruleArgumentDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionArgumentsRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_0_0, 
        		"ArgumentDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActionArgumentsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionArgumentsAccess().getArgsArgumentDefinitionParserRuleCall_1_1_0()); 
	    }
		lv_args_2_0=ruleArgumentDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionArgumentsRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"ArgumentDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleArgumentDefinition
entryRuleArgumentDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentDefinitionRule()); }
	 iv_ruleArgumentDefinition=ruleArgumentDefinition 
	 { $current=$iv_ruleArgumentDefinition.current; } 
	 EOF 
;

// Rule ArgumentDefinition
ruleArgumentDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentDefinitionAccess().getTypeTypeRefParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentDefinitionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentDefinitionAccess().getNameValid_IDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValid_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Valid_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='<-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getArgumentDefinitionAccess().getLessThanSignHyphenMinusKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentDefinitionAccess().getDefaultExpressionParserRuleCall_2_1_0()); 
	    }
		lv_default_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentDefinitionRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFacet
entryRuleFacet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFacetRule()); }
	 iv_ruleFacet=ruleFacet 
	 { $current=$iv_ruleFacet.current; } 
	 EOF 
;

// Rule Facet
ruleFacet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
ruleDefinitionFacetKey
)
)=>
    { 
        newCompositeNode(grammarAccess.getFacetAccess().getDefinitionFacetParserRuleCall_0()); 
    }
    this_DefinitionFacet_0=ruleDefinitionFacet
    { 
        $current = $this_DefinitionFacet_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getFacetAccess().getFunctionFacetParserRuleCall_1()); 
    }
    this_FunctionFacet_1=ruleFunctionFacet
    { 
        $current = $this_FunctionFacet_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFacetAccess().getClassicFacetParserRuleCall_2()); 
    }
    this_ClassicFacet_2=ruleClassicFacet
    { 
        $current = $this_ClassicFacet_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFacetAccess().getTypeFacetParserRuleCall_3()); 
    }
    this_TypeFacet_3=ruleTypeFacet
    { 
        $current = $this_TypeFacet_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFacetAccess().getActionFacetParserRuleCall_4()); 
    }
    this_ActionFacet_4=ruleActionFacet
    { 
        $current = $this_ActionFacet_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFirstFacetKey
entryRuleFirstFacetKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFirstFacetKeyRule()); } 
	 iv_ruleFirstFacetKey=ruleFirstFacetKey 
	 { $current=$iv_ruleFirstFacetKey.current.getText(); }  
	 EOF 
;

// Rule FirstFacetKey
ruleFirstFacetKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFirstFacetKeyAccess().getDefinitionFacetKeyParserRuleCall_0()); 
    }
    this_DefinitionFacetKey_0=ruleDefinitionFacetKey    {
		$current.merge(this_DefinitionFacetKey_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFirstFacetKeyAccess().getTypeFacetKeyParserRuleCall_1()); 
    }
    this_TypeFacetKey_1=ruleTypeFacetKey    {
		$current.merge(this_TypeFacetKey_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFirstFacetKeyAccess().getSpecialFacetKeyParserRuleCall_2()); 
    }
    this_SpecialFacetKey_2=ruleSpecialFacetKey    {
		$current.merge(this_SpecialFacetKey_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFirstFacetKeyAccess().getActionFacetKeyParserRuleCall_3()); 
    }
    this_ActionFacetKey_3=ruleActionFacetKey    {
		$current.merge(this_ActionFacetKey_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getFirstFacetKeyAccess().getIDTerminalRuleCall_4_0()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFirstFacetKeyAccess().getColonKeyword_4_1()); 
    }
))
    ;





// Entry rule entryRuleDefinitionFacetKey
entryRuleDefinitionFacetKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionFacetKeyRule()); } 
	 iv_ruleDefinitionFacetKey=ruleDefinitionFacetKey 
	 { $current=$iv_ruleDefinitionFacetKey.current.getText(); }  
	 EOF 
;

// Rule DefinitionFacetKey
ruleDefinitionFacetKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='name:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefinitionFacetKeyAccess().getNameKeyword_0()); 
    }

    |
	kw='returns:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefinitionFacetKeyAccess().getReturnsKeyword_1()); 
    }

    |
	kw='var:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefinitionFacetKeyAccess().getVarKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleTypeFacetKey
entryRuleTypeFacetKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeFacetKeyRule()); } 
	 iv_ruleTypeFacetKey=ruleTypeFacetKey 
	 { $current=$iv_ruleTypeFacetKey.current.getText(); }  
	 EOF 
;

// Rule TypeFacetKey
ruleTypeFacetKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='as:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeFacetKeyAccess().getAsKeyword_0()); 
    }

    |
	kw='parent:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeFacetKeyAccess().getParentKeyword_1()); 
    }

    |
	kw='of:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeFacetKeyAccess().getOfKeyword_2()); 
    }

    |
	kw='species:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeFacetKeyAccess().getSpeciesKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleSpecialFacetKey
entryRuleSpecialFacetKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpecialFacetKeyRule()); } 
	 iv_ruleSpecialFacetKey=ruleSpecialFacetKey 
	 { $current=$iv_ruleSpecialFacetKey.current.getText(); }  
	 EOF 
;

// Rule SpecialFacetKey
ruleSpecialFacetKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='data:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpecialFacetKeyAccess().getDataKeyword_0()); 
    }

    |
	kw='when:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpecialFacetKeyAccess().getWhenKeyword_1()); 
    }

    |
	kw='const:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpecialFacetKeyAccess().getConstKeyword_2()); 
    }

    |
	kw='value:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpecialFacetKeyAccess().getValueKeyword_3()); 
    }

    |
	kw='topology:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpecialFacetKeyAccess().getTopologyKeyword_4()); 
    }

    |
	kw='item:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpecialFacetKeyAccess().getItemKeyword_5()); 
    }

    |
	kw='init:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpecialFacetKeyAccess().getInitKeyword_6()); 
    }

    |
	kw='message:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpecialFacetKeyAccess().getMessageKeyword_7()); 
    }

    |
	kw='control:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpecialFacetKeyAccess().getControlKeyword_8()); 
    }

    |
	kw='environment:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSpecialFacetKeyAccess().getEnvironmentKeyword_9()); 
    }
)
    ;





// Entry rule entryRuleActionFacetKey
entryRuleActionFacetKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionFacetKeyRule()); } 
	 iv_ruleActionFacetKey=ruleActionFacetKey 
	 { $current=$iv_ruleActionFacetKey.current.getText(); }  
	 EOF 
;

// Rule ActionFacetKey
ruleActionFacetKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='action:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getActionFacetKeyAccess().getActionKeyword()); 
    }

    ;





// Entry rule entryRuleClassicFacet
entryRuleClassicFacet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassicFacetRule()); }
	 iv_ruleClassicFacet=ruleClassicFacet 
	 { $current=$iv_ruleClassicFacet.current; } 
	 EOF 
;

// Rule ClassicFacet
ruleClassicFacet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
		lv_key_0_0=RULE_ID
		{
			newLeafNode(lv_key_0_0, grammarAccess.getClassicFacetAccess().getKeyIDTerminalRuleCall_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassicFacetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClassicFacetAccess().getColonKeyword_0_0_1());
    }
)
    |(
(
		lv_key_2_0=	'<-' 
    {
        newLeafNode(lv_key_2_0, grammarAccess.getClassicFacetAccess().getKeyLessThanSignHyphenMinusKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassicFacetRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_2_0, "<-");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getClassicFacetAccess().getKeySpecialFacetKeyParserRuleCall_0_2_0()); 
	    }
		lv_key_3_0=ruleSpecialFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassicFacetRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_3_0, 
        		"SpecialFacetKey");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getClassicFacetAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassicFacetRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDefinitionFacet
entryRuleDefinitionFacet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionFacetRule()); }
	 iv_ruleDefinitionFacet=ruleDefinitionFacet 
	 { $current=$iv_ruleDefinitionFacet.current; } 
	 EOF 
;

// Rule DefinitionFacet
ruleDefinitionFacet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
ruleDefinitionFacetKey
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionFacetAccess().getKeyDefinitionFacetKeyParserRuleCall_0_0()); 
	    }
		lv_key_0_0=ruleDefinitionFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionFacetRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"DefinitionFacetKey");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionFacetAccess().getNameValid_IDParserRuleCall_1_0_0()); 
	    }
		lv_name_1_1=ruleValid_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionFacetRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_1, 
        		"Valid_ID");
	        afterParserOrEnumRuleCall();
	    }

    |		lv_name_1_2=RULE_STRING
		{
			newLeafNode(lv_name_1_2, grammarAccess.getDefinitionFacetAccess().getNameSTRINGTerminalRuleCall_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionFacetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_2, 
        		"STRING");
	    }

)

)
))
;





// Entry rule entryRuleFunctionFacet
entryRuleFunctionFacet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionFacetRule()); }
	 iv_ruleFunctionFacet=ruleFunctionFacet 
	 { $current=$iv_ruleFunctionFacet.current; } 
	 EOF 
;

// Rule FunctionFacet
ruleFunctionFacet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_key_0_0=	'function:' 
    {
        newLeafNode(lv_key_0_0, grammarAccess.getFunctionFacetAccess().getKeyFunctionKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionFacetRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_0_0, "function:");
	    }

)
)
    |(
(
		lv_key_1_0=	'->' 
    {
        newLeafNode(lv_key_1_0, grammarAccess.getFunctionFacetAccess().getKeyHyphenMinusGreaterThanSignKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionFacetRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_0, "->");
	    }

)
))	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionFacetAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionFacetAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionFacetRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionFacetAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleTypeFacet
entryRuleTypeFacet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeFacetRule()); }
	 iv_ruleTypeFacet=ruleTypeFacet 
	 { $current=$iv_ruleTypeFacet.current; } 
	 EOF 
;

// Rule TypeFacet
ruleTypeFacet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeFacetAccess().getKeyTypeFacetKeyParserRuleCall_0_0()); 
	    }
		lv_key_0_0=ruleTypeFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeFacetRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"TypeFacetKey");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeFacetAccess().getExprTypeRefParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeFacetRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleActionFacet
entryRuleActionFacet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionFacetRule()); }
	 iv_ruleActionFacet=ruleActionFacet 
	 { $current=$iv_ruleActionFacet.current; } 
	 EOF 
;

// Rule ActionFacet
ruleActionFacet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getActionFacetAccess().getKeyActionFacetKeyParserRuleCall_0_0()); 
	    }
		lv_key_0_0=ruleActionFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionFacetRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"ActionFacetKey");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActionFacetAccess().getExprActionRefParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleActionRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionFacetRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"ActionRef");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(((((
(
ruleExpression
)
)	'}' 
))=>((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getFunctionExpressionParserRuleCall_2_0_0_0_0()); 
	    }
		lv_function_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2_0_0_1());
    }
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_1_0_0()); 
	    }
		lv_statements_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2_1_1());
    }
)))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((((
(
ruleValid_ID
)
)	'::' 
)
    |((
(
(
ruleDefinitionFacetKey
    |ruleTypeFacetKey
    |ruleSpecialFacetKey
    |ruleActionFacetKey
)

)
)	':' 
)))=>
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getArgumentPairParserRuleCall_0()); 
    }
    this_ArgumentPair_0=ruleArgumentPair
    { 
        $current = $this_ArgumentPair_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getPairParserRuleCall_1()); 
    }
    this_Pair_1=rulePair
    { 
        $current = $this_Pair_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArgumentPair
entryRuleArgumentPair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentPairRule()); }
	 iv_ruleArgumentPair=ruleArgumentPair 
	 { $current=$iv_ruleArgumentPair.current; } 
	 EOF 
;

// Rule ArgumentPair
ruleArgumentPair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((((
(
ruleValid_ID
)
)	'::' 
)
    |((
(
(
ruleDefinitionFacetKey
    |ruleTypeFacetKey
    |ruleSpecialFacetKey
    |ruleActionFacetKey
)

)
)	':' 
)))=>(((
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentPairAccess().getOpValid_IDParserRuleCall_0_0_0_0_0()); 
	    }
		lv_op_0_0=ruleValid_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentPairRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"Valid_ID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentPairAccess().getColonColonKeyword_0_0_0_1());
    }
)
    |((
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentPairAccess().getOpDefinitionFacetKeyParserRuleCall_0_0_1_0_0_0()); 
	    }
		lv_op_2_1=ruleDefinitionFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentPairRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_1, 
        		"DefinitionFacetKey");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArgumentPairAccess().getOpTypeFacetKeyParserRuleCall_0_0_1_0_0_1()); 
	    }
		lv_op_2_2=ruleTypeFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentPairRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_2, 
        		"TypeFacetKey");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArgumentPairAccess().getOpSpecialFacetKeyParserRuleCall_0_0_1_0_0_2()); 
	    }
		lv_op_2_3=ruleSpecialFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentPairRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_3, 
        		"SpecialFacetKey");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArgumentPairAccess().getOpActionFacetKeyParserRuleCall_0_0_1_0_0_3()); 
	    }
		lv_op_2_4=ruleActionFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentPairRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_4, 
        		"ActionFacetKey");
	        afterParserOrEnumRuleCall();
	    }

)

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArgumentPairAccess().getColonKeyword_0_0_1_1());
    }
)))?(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentPairAccess().getRightIfParserRuleCall_1_0()); 
	    }
		lv_right_4_0=ruleIf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentPairRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"If");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePair
entryRulePair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPairRule()); }
	 iv_rulePair=rulePair 
	 { $current=$iv_rulePair.current; } 
	 EOF 
;

// Rule Pair
rulePair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPairAccess().getIfParserRuleCall_0()); 
    }
    this_If_0=ruleIf
    { 
        $current = $this_If_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPairAccess().getPairLeftAction_1_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'::' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getPairAccess().getOpColonColonKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPairRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "::");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getPairAccess().getRightIfParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleIf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPairRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"If");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	 iv_ruleIf=ruleIf 
	 { $current=$iv_ruleIf.current; } 
	 EOF 
;

// Rule If
ruleIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIfAccess().getOrParserRuleCall_0()); 
    }
    this_Or_0=ruleOr
    { 
        $current = $this_Or_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getIfAccess().getIfLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'?' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getIfAccess().getOpQuestionMarkKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIfRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "?");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getRightOrParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getIfFalseOrParserRuleCall_1_4_0()); 
	    }
		lv_ifFalse_5_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"ifFalse",
        		lv_ifFalse_5_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAccess().getExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'or' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getOrAccess().getOpOrKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "or");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndAccess().getComparisonParserRuleCall_0()); 
    }
    this_Comparison_0=ruleComparison
    { 
        $current = $this_Comparison_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAccess().getExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'and' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getAndAccess().getOpAndKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "and");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRightComparisonParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getAdditionParserRuleCall_0()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getExpressionLeftAction_1_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'!=' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getComparisonAccess().getOpExclamationMarkEqualsSignKeyword_1_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getComparisonAccess().getOpEqualsSignKeyword_1_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'>=' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'<=' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_0_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

    |		lv_op_2_5=	'<' 
    {
        newLeafNode(lv_op_2_5, grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_0_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_5, null);
	    }

    |		lv_op_2_6=	'>' 
    {
        newLeafNode(lv_op_2_6, grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_0_1_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_6, null);
	    }

)

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightAdditionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Addition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getExpressionLeftAction_1_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getAdditionAccess().getOpPlusSignKeyword_1_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'-' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getAdditionAccess().getOpHyphenMinusKeyword_1_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getBinaryParserRuleCall_0()); 
    }
    this_Binary_0=ruleBinary
    { 
        $current = $this_Binary_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getExpressionLeftAction_1_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getMultiplicationAccess().getOpAsteriskKeyword_1_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'/' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getMultiplicationAccess().getOpSolidusKeyword_1_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'^' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getMultiplicationAccess().getOpCircumflexAccentKeyword_1_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

)

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightBinaryParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleBinary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Binary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBinary
entryRuleBinary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryRule()); }
	 iv_ruleBinary=ruleBinary 
	 { $current=$iv_ruleBinary.current; } 
	 EOF 
;

// Rule Binary
ruleBinary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinaryAccess().getUnitParserRuleCall_0()); 
    }
    this_Unit_0=ruleUnit
    { 
        $current = $this_Unit_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinaryAccess().getBinaryLeftAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryAccess().getOpValid_IDParserRuleCall_1_0_1_0()); 
	    }
		lv_op_2_0=ruleValid_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"Valid_ID");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryAccess().getRightUnitParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Unit");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnit
entryRuleUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitRule()); }
	 iv_ruleUnit=ruleUnit 
	 { $current=$iv_ruleUnit.current; } 
	 EOF 
;

// Rule Unit
ruleUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnitAccess().getUnaryParserRuleCall_0()); 
    }
    this_Unary_0=ruleUnary
    { 
        $current = $this_Unary_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUnitAccess().getUnitLeftAction_1_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'\u00B0' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getUnitAccess().getOpDegreeSignKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "\u00B0");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitAccess().getRightUnitRefParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleUnitRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UnitRef");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleUnary
entryRuleUnary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryRule()); }
	 iv_ruleUnary=ruleUnary 
	 { $current=$iv_ruleUnary.current; } 
	 EOF 
;

// Rule Unary
ruleUnary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnaryAccess().getAccessParserRuleCall_0()); 
    }
    this_Access_0=ruleAccess
    { 
        $current = $this_Access_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryAccess().getUnaryAction_1_0(),
            $current);
    }
)(((
(
		lv_op_2_0=	'\u00B0' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getUnaryAccess().getOpDegreeSignKeyword_1_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "\u00B0");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryAccess().getRightUnitRefParserRuleCall_1_1_0_1_0()); 
	    }
		lv_right_3_0=ruleUnitRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UnitRef");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
(
		lv_op_4_1=	'-' 
    {
        newLeafNode(lv_op_4_1, grammarAccess.getUnaryAccess().getOpHyphenMinusKeyword_1_1_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_1, null);
	    }

    |		lv_op_4_2=	'!' 
    {
        newLeafNode(lv_op_4_2, grammarAccess.getUnaryAccess().getOpExclamationMarkKeyword_1_1_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_2, null);
	    }

    |		lv_op_4_3=	'my' 
    {
        newLeafNode(lv_op_4_3, grammarAccess.getUnaryAccess().getOpMyKeyword_1_1_1_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_3, null);
	    }

    |		lv_op_4_4=	'the' 
    {
        newLeafNode(lv_op_4_4, grammarAccess.getUnaryAccess().getOpTheKeyword_1_1_1_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_4, null);
	    }

    |		lv_op_4_5=	'not' 
    {
        newLeafNode(lv_op_4_5, grammarAccess.getUnaryAccess().getOpNotKeyword_1_1_1_0_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_5, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryAccess().getRightUnaryParserRuleCall_1_1_1_1_0()); 
	    }
		lv_right_5_0=ruleUnary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"Unary");
	        afterParserOrEnumRuleCall();
	    }

)
)))))
;





// Entry rule entryRuleAccess
entryRuleAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessRule()); }
	 iv_ruleAccess=ruleAccess 
	 { $current=$iv_ruleAccess.current; } 
	 EOF 
;

// Rule Access
ruleAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAccessAccess().getDotParserRuleCall_0()); 
    }
    this_Dot_0=ruleDot
    { 
        $current = $this_Dot_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessAccess().getAccessLeftAction_1_0_0(),
            $current);
    }
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAccessAccess().getLeftSquareBracketKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessAccess().getArgsExpressionListParserRuleCall_1_1_0()); 
	    }
		lv_args_3_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAccessAccess().getRightSquareBracketKeyword_1_2());
    }
)*)
;





// Entry rule entryRuleDot
entryRuleDot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDotRule()); }
	 iv_ruleDot=ruleDot 
	 { $current=$iv_ruleDot.current; } 
	 EOF 
;

// Rule Dot
ruleDot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDotAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDotAccess().getDotLeftAction_1_0(),
            $current);
    }
)((
(
		lv_op_2_0=	'.' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getDotAccess().getOpFullStopKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDotRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, ".");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDotAccess().getRightAbstractRefParserRuleCall_1_1_1_0()); 
	    }
		lv_right_3_0=ruleAbstractRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDotRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AbstractRef");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getTerminalExpressionParserRuleCall_0()); 
    }
    this_TerminalExpression_0=ruleTerminalExpression
    { 
        $current = $this_TerminalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getAbstractRefParserRuleCall_1()); 
    }
    this_AbstractRef_1=ruleAbstractRef
    { 
        $current = $this_AbstractRef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionListParserRuleCall_2_1()); 
    }
    this_ExpressionList_3=ruleExpressionList
    { 
        $current = $this_ExpressionList_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2());
    }
)
    |(	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getParametersAction_3_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getParamsParameterListParserRuleCall_3_2_0()); 
	    }
		lv_params_7_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"params",
        		lv_params_7_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_3());
    }
)
    |(	otherlv_9='[' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPrimaryAccess().getLeftSquareBracketKeyword_4_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getArrayAction_4_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getExprsExpressionListParserRuleCall_4_2_0()); 
	    }
		lv_exprs_11_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"exprs",
        		lv_exprs_11_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_12=']' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPrimaryAccess().getRightSquareBracketKeyword_4_3());
    }
)
    |(	otherlv_13='{' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getPrimaryAccess().getLeftCurlyBracketKeyword_5_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getPointAction_5_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getLeftExpressionParserRuleCall_5_2_0()); 
	    }
		lv_left_15_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_15_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_op_16_0=	',' 
    {
        newLeafNode(lv_op_16_0, grammarAccess.getPrimaryAccess().getOpCommaKeyword_5_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_16_0, ",");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getRightExpressionParserRuleCall_5_4_0()); 
	    }
		lv_right_17_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_17_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_18=',' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getPrimaryAccess().getCommaKeyword_5_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getZExpressionParserRuleCall_5_5_1_0()); 
	    }
		lv_z_19_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"z",
        		lv_z_19_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_20='}' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getPrimaryAccess().getRightCurlyBracketKeyword_5_6());
    }
))
;





// Entry rule entryRuleAbstractRef
entryRuleAbstractRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractRefRule()); }
	 iv_ruleAbstractRef=ruleAbstractRef 
	 { $current=$iv_ruleAbstractRef.current; } 
	 EOF 
;

// Rule AbstractRef
ruleAbstractRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractRefAccess().getFunctionParserRuleCall_0()); 
    }
    this_Function_0=ruleFunction
    { 
        $current = $this_Function_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractRefAccess().getVariableRefParserRuleCall_1()); 
    }
    this_VariableRef_1=ruleVariableRef
    { 
        $current = $this_VariableRef_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionAccess().getFunctionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getActionActionRefParserRuleCall_1_0()); 
	    }
		lv_action_1_0=ruleActionRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_1_0, 
        		"ActionRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2());
    }
(((
(
ruleParameters
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getParametersParametersParserRuleCall_3_0_0()); 
	    }
		lv_parameters_3_0=ruleParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Parameters");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getArgsExpressionListParserRuleCall_3_1_0()); 
	    }
		lv_args_4_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterAccess().getParameterAction_0(),
            $current);
    }
)((
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getBuiltInFacetKeyDefinitionFacetKeyParserRuleCall_1_0_0_0()); 
	    }
		lv_builtInFacetKey_1_1=ruleDefinitionFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"builtInFacetKey",
        		lv_builtInFacetKey_1_1, 
        		"DefinitionFacetKey");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getBuiltInFacetKeyTypeFacetKeyParserRuleCall_1_0_0_1()); 
	    }
		lv_builtInFacetKey_1_2=ruleTypeFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"builtInFacetKey",
        		lv_builtInFacetKey_1_2, 
        		"TypeFacetKey");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getBuiltInFacetKeySpecialFacetKeyParserRuleCall_1_0_0_2()); 
	    }
		lv_builtInFacetKey_1_3=ruleSpecialFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"builtInFacetKey",
        		lv_builtInFacetKey_1_3, 
        		"SpecialFacetKey");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getBuiltInFacetKeyActionFacetKeyParserRuleCall_1_0_0_3()); 
	    }
		lv_builtInFacetKey_1_4=ruleActionFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"builtInFacetKey",
        		lv_builtInFacetKey_1_4, 
        		"ActionFacetKey");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getLeftVariableRefParserRuleCall_1_1_0_0()); 
	    }
		lv_left_2_0=ruleVariableRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"VariableRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getColonKeyword_1_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getRightExpressionParserRuleCall_2_0()); 
	    }
		lv_right_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current; } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExprsExpressionParserRuleCall_0_0()); 
	    }
		lv_exprs_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExprsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exprs_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current; } 
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getExprsParameterParserRuleCall_0_0()); 
	    }
		lv_exprs_0_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_0_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getExprsParameterParserRuleCall_1_1_0()); 
	    }
		lv_exprs_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnitRef
entryRuleUnitRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitRefRule()); }
	 iv_ruleUnitRef=ruleUnitRef 
	 { $current=$iv_ruleUnitRef.current; } 
	 EOF 
;

// Rule UnitRef
ruleUnitRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnitRefAccess().getUnitNameAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitRefRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getUnitRefAccess().getRefUnitFakeDefinitionCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleVariableRef
entryRuleVariableRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRefRule()); }
	 iv_ruleVariableRef=ruleVariableRef 
	 { $current=$iv_ruleVariableRef.current; } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableRefAccess().getVariableRefAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getVariableRefAccess().getRefVarDefinitionCrossReference_1_0()); 
	    }
		ruleValid_ID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeRef
entryRuleTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRefRule()); }
	 iv_ruleTypeRef=ruleTypeRef 
	 { $current=$iv_ruleTypeRef.current; } 
	 EOF 
;

// Rule TypeRef
ruleTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeRefAccess().getTypeRefAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRefRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getTypeRefAccess().getRefTypeDefinitionCrossReference_1_0()); 
	}

)
)(	otherlv_2='<' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeRefAccess().getLessThanSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeRefAccess().getOfTypeRefParserRuleCall_2_1_0()); 
	    }
		lv_of_3_0=ruleTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRefRule());
	        }
       		set(
       			$current, 
       			"of",
        		lv_of_3_0, 
        		"TypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeRefAccess().getGreaterThanSignKeyword_2_2());
    }
)?)
;







// Entry rule entryRuleActionRef
entryRuleActionRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRefRule()); }
	 iv_ruleActionRef=ruleActionRef 
	 { $current=$iv_ruleActionRef.current; } 
	 EOF 
;

// Rule ActionRef
ruleActionRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionRefAccess().getActionRefAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getActionRefAccess().getRefActionDefinitionCrossReference_1_0()); 
	    }
		ruleValid_ID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleTypeDefinition
entryRuleTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefinitionRule()); }
	 iv_ruleTypeDefinition=ruleTypeDefinition 
	 { $current=$iv_ruleTypeDefinition.current; } 
	 EOF 
;

// Rule TypeDefinition
ruleTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getS_SpeciesParserRuleCall_0()); 
    }
    this_S_Species_0=ruleS_Species
    { 
        $current = $this_S_Species_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefinitionAccess().getTypeFakeDefinitionParserRuleCall_1()); 
    }
    this_TypeFakeDefinition_1=ruleTypeFakeDefinition
    { 
        $current = $this_TypeFakeDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVarDefinition
entryRuleVarDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDefinitionRule()); }
	 iv_ruleVarDefinition=ruleVarDefinition 
	 { $current=$iv_ruleVarDefinition.current; } 
	 EOF 
;

// Rule VarDefinition
ruleVarDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleS_Declaration)=>
    { 
        newCompositeNode(grammarAccess.getVarDefinitionAccess().getS_DeclarationParserRuleCall_0()); 
    }
    this_S_Declaration_0=ruleS_Declaration
    { 
        $current = $this_S_Declaration_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getVarDefinitionAccess().getArgumentDefinitionParserRuleCall_1_0()); 
    }
    this_ArgumentDefinition_1=ruleArgumentDefinition
    { 
        $current = $this_ArgumentDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |((
(
ruleDefinitionFacetKey
)
)=>
    { 
        newCompositeNode(grammarAccess.getVarDefinitionAccess().getDefinitionFacetParserRuleCall_1_1()); 
    }
    this_DefinitionFacet_2=ruleDefinitionFacet
    { 
        $current = $this_DefinitionFacet_2.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getVarDefinitionAccess().getVarFakeDefinitionParserRuleCall_1_2()); 
    }
    this_VarFakeDefinition_3=ruleVarFakeDefinition
    { 
        $current = $this_VarFakeDefinition_3.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleActionDefinition
entryRuleActionDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionDefinitionRule()); }
	 iv_ruleActionDefinition=ruleActionDefinition 
	 { $current=$iv_ruleActionDefinition.current; } 
	 EOF 
;

// Rule ActionDefinition
ruleActionDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getActionDefinitionAccess().getS_ActionParserRuleCall_0()); 
    }
    this_S_Action_0=ruleS_Action
    { 
        $current = $this_S_Action_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getActionDefinitionAccess().getActionFakeDefinitionParserRuleCall_1()); 
    }
    this_ActionFakeDefinition_1=ruleActionFakeDefinition
    { 
        $current = $this_ActionFakeDefinition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |((
(
ruleTypeRef
)
)=>
    { 
        newCompositeNode(grammarAccess.getActionDefinitionAccess().getS_DefinitionParserRuleCall_2()); 
    }
    this_S_Definition_2=ruleS_Definition
    { 
        $current = $this_S_Definition_2.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getActionDefinitionAccess().getTypeDefinitionParserRuleCall_3()); 
    }
    this_TypeDefinition_3=ruleTypeDefinition
    { 
        $current = $this_TypeDefinition_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUnitFakeDefinition
entryRuleUnitFakeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitFakeDefinitionRule()); }
	 iv_ruleUnitFakeDefinition=ruleUnitFakeDefinition 
	 { $current=$iv_ruleUnitFakeDefinition.current; } 
	 EOF 
;

// Rule UnitFakeDefinition
ruleUnitFakeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='**unit*' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnitFakeDefinitionAccess().getUnitKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getUnitFakeDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitFakeDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleTypeFakeDefinition
entryRuleTypeFakeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeFakeDefinitionRule()); }
	 iv_ruleTypeFakeDefinition=ruleTypeFakeDefinition 
	 { $current=$iv_ruleTypeFakeDefinition.current; } 
	 EOF 
;

// Rule TypeFakeDefinition
ruleTypeFakeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='**type*' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeFakeDefinitionAccess().getTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeFakeDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeFakeDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleActionFakeDefinition
entryRuleActionFakeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionFakeDefinitionRule()); }
	 iv_ruleActionFakeDefinition=ruleActionFakeDefinition 
	 { $current=$iv_ruleActionFakeDefinition.current; } 
	 EOF 
;

// Rule ActionFakeDefinition
ruleActionFakeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='**action*' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getActionFakeDefinitionAccess().getActionKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionFakeDefinitionAccess().getNameValid_IDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValid_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionFakeDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Valid_ID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSkillFakeDefinition
entryRuleSkillFakeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSkillFakeDefinitionRule()); }
	 iv_ruleSkillFakeDefinition=ruleSkillFakeDefinition 
	 { $current=$iv_ruleSkillFakeDefinition.current; } 
	 EOF 
;

// Rule SkillFakeDefinition
ruleSkillFakeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='**skill*' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSkillFakeDefinitionAccess().getSkillKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSkillFakeDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSkillFakeDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleVarFakeDefinition
entryRuleVarFakeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarFakeDefinitionRule()); }
	 iv_ruleVarFakeDefinition=ruleVarFakeDefinition 
	 { $current=$iv_ruleVarFakeDefinition.current; } 
	 EOF 
;

// Rule VarFakeDefinition
ruleVarFakeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='**var*' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVarFakeDefinitionAccess().getVarKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVarFakeDefinitionAccess().getNameValid_IDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValid_ID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarFakeDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Valid_ID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValid_ID
entryRuleValid_ID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValid_IDRule()); } 
	 iv_ruleValid_ID=ruleValid_ID 
	 { $current=$iv_ruleValid_ID.current.getText(); }  
	 EOF 
;

// Rule Valid_ID
ruleValid_ID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValid_IDAccess().get_SpeciesKeyParserRuleCall_0()); 
    }
    this__SpeciesKey_0=rule_SpeciesKey    {
		$current.merge(this__SpeciesKey_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValid_IDAccess().get_DoKeyParserRuleCall_1()); 
    }
    this__DoKey_1=rule_DoKey    {
		$current.merge(this__DoKey_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValid_IDAccess().get_ReflexKeyParserRuleCall_2()); 
    }
    this__ReflexKey_2=rule_ReflexKey    {
		$current.merge(this__ReflexKey_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValid_IDAccess().get_VarOrConstKeyParserRuleCall_3()); 
    }
    this__VarOrConstKey_3=rule_VarOrConstKey    {
		$current.merge(this__VarOrConstKey_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValid_IDAccess().get_1Expr_Facets_BlockOrEnd_KeyParserRuleCall_4()); 
    }
    this__1Expr_Facets_BlockOrEnd_Key_4=rule_1Expr_Facets_BlockOrEnd_Key    {
		$current.merge(this__1Expr_Facets_BlockOrEnd_Key_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValid_IDAccess().get_EquationsKeyParserRuleCall_5()); 
    }
    this__EquationsKey_5=rule_EquationsKey    {
		$current.merge(this__EquationsKey_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_ID_6=RULE_ID    {
		$current.merge(this_ID_6);
    }

    { 
    newLeafNode(this_ID_6, grammarAccess.getValid_IDAccess().getIDTerminalRuleCall_6()); 
    }
)
    ;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getIntLiteralAction_0_0(),
            $current);
    }
)(
(
		lv_op_1_0=RULE_INTEGER
		{
			newLeafNode(lv_op_1_0, grammarAccess.getTerminalExpressionAccess().getOpINTEGERTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"INTEGER");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getDoubleLiteralAction_1_0(),
            $current);
    }
)(
(
		lv_op_3_0=RULE_DOUBLE
		{
			newLeafNode(lv_op_3_0, grammarAccess.getTerminalExpressionAccess().getOpDOUBLETerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"DOUBLE");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getColorLiteralAction_2_0(),
            $current);
    }
)(
(
		lv_op_5_0=RULE_COLOR
		{
			newLeafNode(lv_op_5_0, grammarAccess.getTerminalExpressionAccess().getOpCOLORTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_5_0, 
        		"COLOR");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getStringLiteralAction_3_0(),
            $current);
    }
)(
(
		lv_op_7_0=RULE_STRING
		{
			newLeafNode(lv_op_7_0, grammarAccess.getTerminalExpressionAccess().getOpSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_7_0, 
        		"STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getBooleanLiteralAction_4_0(),
            $current);
    }
)(
(
		lv_op_9_0=RULE_BOOLEAN
		{
			newLeafNode(lv_op_9_0, grammarAccess.getTerminalExpressionAccess().getOpBOOLEANTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_9_0, 
        		"BOOLEAN");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getReservedLiteralAction_5_0(),
            $current);
    }
)(
(
		lv_op_11_0=RULE_KEYWORD
		{
			newLeafNode(lv_op_11_0, grammarAccess.getTerminalExpressionAccess().getOpKEYWORDTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_11_0, 
        		"KEYWORD");
	    }

)
)))
;





RULE_KEYWORD : ('each'|'self'|'myself'|'nil'|'world');

RULE_INTEGER : ('0'|'1'..'9' ('0'..'9')*);

RULE_BOOLEAN : ('true'|'false');

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'$'|'0'..'9')*;

RULE_COLOR : '#' ('0'..'9'|'A'..'F')+;

RULE_DOUBLE : ('1'..'9' ('0'..'9')* ('.' ('0'..'9')+)? (('E'|'e') ('+'|'-')? ('0'..'9')+)?|'0' ('.' ('0'..'9')+)? (('E'|'e') ('+'|'-')? ('0'..'9')+)?);

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


