/*
* generated by Xtext
*/
grammar InternalGaml;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package msi.gama.lang.gaml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package msi.gama.lang.gaml.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import msi.gama.lang.gaml.services.GamlGrammarAccess;

}

@parser::members {

 	private GamlGrammarAccess grammarAccess;
 	
    public InternalGamlParser(TokenStream input, GamlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected GamlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='model' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelKeyword_0_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_0_2_0()); 
	    }
		lv_imports_2_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_2_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_0_3_0()); 
	    }
		lv_statements_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getModelAccess().getStringEvaluatorAction_1_0(),
            $current);
    }
)(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
)	otherlv_6='<-' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getModelAccess().getLessThanSignHyphenMinusKeyword_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getExprExpressionParserRuleCall_1_3_0()); 
	    }
		lv_expr_7_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_7_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleBuiltInStatementKey
entryRuleBuiltInStatementKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBuiltInStatementKeyRule()); } 
	 iv_ruleBuiltInStatementKey=ruleBuiltInStatementKey 
	 { $current=$iv_ruleBuiltInStatementKey.current.getText(); }  
	 EOF 
;

// Rule BuiltInStatementKey
ruleBuiltInStatementKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='add' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getAddKeyword_0()); 
    }

    |
	kw='ask' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getAskKeyword_1()); 
    }

    |
	kw='capture' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getCaptureKeyword_2()); 
    }

    |
	kw='create' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getCreateKeyword_3()); 
    }

    |
	kw='draw' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getDrawKeyword_4()); 
    }

    |
	kw='error' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getErrorKeyword_5()); 
    }

    |
	kw='match' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getMatchKeyword_6()); 
    }

    |
	kw='match_between' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getMatch_betweenKeyword_7()); 
    }

    |
	kw='match_one' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getMatch_oneKeyword_8()); 
    }

    |
	kw='put' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getPutKeyword_9()); 
    }

    |
	kw='release' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getReleaseKeyword_10()); 
    }

    |
	kw='remove' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getRemoveKeyword_11()); 
    }

    |
	kw='save' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getSaveKeyword_12()); 
    }

    |
	kw='set' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getSetKeyword_13()); 
    }

    |
	kw='switch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getSwitchKeyword_14()); 
    }

    |
	kw='warn' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getWarnKeyword_15()); 
    }

    |
	kw='write' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getWriteKeyword_16()); 
    }

    |
	kw='display_population' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getDisplay_populationKeyword_17()); 
    }

    |
	kw='display_grid' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getDisplay_gridKeyword_18()); 
    }

    |
	kw='using' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBuiltInStatementKeyAccess().getUsingKeyword_19()); 
    }
)
    ;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
(
ruleExpression
)
)(
(
(
	'<-' 
 

    |			'<<' 
 

    |			'>>' 
 

    |			'+=' 
 

    |			'-=' 
 

    |			'++' 
 

    |			'--' 
 

)

)
)))=>
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAssignmentStatementParserRuleCall_0()); 
    }
    this_AssignmentStatement_0=ruleAssignmentStatement
    { 
        $current = $this_AssignmentStatement_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_1_0()); 
    }
    this_ReturnStatement_1=ruleReturnStatement
    { 
        $current = $this_ReturnStatement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_1_1()); 
    }
    this_IfStatement_2=ruleIfStatement
    { 
        $current = $this_IfStatement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getClassicStatementParserRuleCall_1_2()); 
    }
    this_ClassicStatement_3=ruleClassicStatement
    { 
        $current = $this_ClassicStatement_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDefinitionStatementParserRuleCall_1_3()); 
    }
    this_DefinitionStatement_4=ruleDefinitionStatement
    { 
        $current = $this_DefinitionStatement_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getEquationParserRuleCall_1_4()); 
    }
    this_Equation_5=ruleEquation
    { 
        $current = $this_Equation_5.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleEquation
entryRuleEquation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEquationRule()); }
	 iv_ruleEquation=ruleEquation 
	 { $current=$iv_ruleEquation.current; } 
	 EOF 
;

// Rule Equation
ruleEquation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEquationAccess().getFunctionFunctionParserRuleCall_0_0()); 
	    }
		lv_function_0_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquationRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_0_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_key_1_0=	'=' 
    {
        newLeafNode(lv_key_1_0, grammarAccess.getEquationAccess().getKeyEqualsSignKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEquationRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_0, "=");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEquationAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquationRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEquationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=	'if' 
    {
        newLeafNode(lv_key_0_0, grammarAccess.getIfStatementAccess().getKeyIfKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIfStatementRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_0_0, "if");
	    }

)
)(	otherlv_1='condition:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getConditionKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getBlockBlockParserRuleCall_3_0()); 
	    }
		lv_block_3_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_3_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_4='else' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfStatementAccess().getElseKeyword_4_0());
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseIfStatementParserRuleCall_4_1_0_0()); 
	    }
		lv_else_5_1=ruleIfStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_5_1, 
        		"IfStatement");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseBlockParserRuleCall_4_1_0_1()); 
	    }
		lv_else_5_2=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_5_2, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)

)
))?)
;





// Entry rule entryRuleClassicStatement
entryRuleClassicStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassicStatementRule()); }
	 iv_ruleClassicStatement=ruleClassicStatement 
	 { $current=$iv_ruleClassicStatement.current; } 
	 EOF 
;

// Rule ClassicStatement
ruleClassicStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getClassicStatementAccess().getKeyBuiltInStatementKeyParserRuleCall_0_0()); 
	    }
		lv_key_0_0=ruleBuiltInStatementKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassicStatementRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"BuiltInStatementKey");
	        afterParserOrEnumRuleCall();
	    }

)
)(this_ID_1=RULE_ID
    { 
    newLeafNode(this_ID_1, grammarAccess.getClassicStatementAccess().getIDTerminalRuleCall_1_0()); 
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassicStatementAccess().getColonKeyword_1_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getClassicStatementAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassicStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassicStatementAccess().getFacetsFacetParserRuleCall_3_0()); 
	    }
		lv_facets_4_0=ruleFacet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassicStatementRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_4_0, 
        		"Facet");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getClassicStatementAccess().getBlockBlockParserRuleCall_4_0_0()); 
	    }
		lv_block_5_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassicStatementRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_5_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassicStatementAccess().getSemicolonKeyword_4_1());
    }
))
;





// Entry rule entryRuleDefinitionStatement
entryRuleDefinitionStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionStatementRule()); }
	 iv_ruleDefinitionStatement=ruleDefinitionStatement 
	 { $current=$iv_ruleDefinitionStatement.current; } 
	 EOF 
;

// Rule DefinitionStatement
ruleDefinitionStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=RULE_ID
		{
			newLeafNode(lv_key_0_0, grammarAccess.getDefinitionStatementAccess().getKeyIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionStatementAccess().getOfContentsParserRuleCall_1_0()); 
	    }
		lv_of_1_0=ruleContents		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionStatementRule());
	        }
       		set(
       			$current, 
       			"of",
        		lv_of_1_0, 
        		"Contents");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
(
		lv_name_2_1=RULE_ID
		{
			newLeafNode(lv_name_2_1, grammarAccess.getDefinitionStatementAccess().getNameIDTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_1, 
        		"ID");
	    }

    |		lv_name_2_2=RULE_STRING
		{
			newLeafNode(lv_name_2_2, grammarAccess.getDefinitionStatementAccess().getNameSTRINGTerminalRuleCall_2_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionStatementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_2, 
        		"STRING");
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getDefinitionStatementAccess().getNameBuiltInStatementKeyParserRuleCall_2_0_2()); 
	    }
		lv_name_2_3=ruleBuiltInStatementKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionStatementRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_3, 
        		"BuiltInStatementKey");
	        afterParserOrEnumRuleCall();
	    }

)

)
)?(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefinitionStatementAccess().getLeftParenthesisKeyword_3_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionStatementAccess().getArgsActionArgumentsParserRuleCall_3_1_0_0()); 
	    }
		lv_args_4_0=ruleActionArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionStatementRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_4_0, 
        		"ActionArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
ruleParameters
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionStatementAccess().getParamsParametersParserRuleCall_3_1_1_0()); 
	    }
		lv_params_5_0=ruleParameters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionStatementRule());
	        }
       		set(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"Parameters");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDefinitionStatementAccess().getRightParenthesisKeyword_3_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionStatementAccess().getFacetsFacetParserRuleCall_4_0()); 
	    }
		lv_facets_7_0=ruleFacet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionStatementRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_7_0, 
        		"Facet");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionStatementAccess().getBlockBlockParserRuleCall_5_0_0()); 
	    }
		lv_block_8_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionStatementRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_8_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDefinitionStatementAccess().getSemicolonKeyword_5_1());
    }
))
;





// Entry rule entryRuleContents
entryRuleContents returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContentsRule()); }
	 iv_ruleContents=ruleContents 
	 { $current=$iv_ruleContents.current; } 
	 EOF 
;

// Rule Contents
ruleContents returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getContentsAccess().getLessThanSignKeyword_0());
    }
(
(
		lv_type_1_0=RULE_ID
		{
			newLeafNode(lv_type_1_0, grammarAccess.getContentsAccess().getTypeIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContentsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"ID");
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getContentsAccess().getCommaKeyword_2_0());
    }
(
(
		lv_type2_3_0=RULE_ID
		{
			newLeafNode(lv_type2_3_0, grammarAccess.getContentsAccess().getType2IDTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContentsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type2",
        		lv_type2_3_0, 
        		"ID");
	    }

)
))?	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getContentsAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	 iv_ruleReturnStatement=ruleReturnStatement 
	 { $current=$iv_ruleReturnStatement.current; } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_key_0_0=	'return' 
    {
        newLeafNode(lv_key_0_0, grammarAccess.getReturnStatementAccess().getKeyReturnKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReturnStatementRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_0_0, "return");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnStatementAccess().getExprExpressionParserRuleCall_1_0()); 
	    }
		lv_expr_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleAssignmentStatement
entryRuleAssignmentStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentStatementRule()); }
	 iv_ruleAssignmentStatement=ruleAssignmentStatement 
	 { $current=$iv_ruleAssignmentStatement.current; } 
	 EOF 
;

// Rule AssignmentStatement
ruleAssignmentStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
(
ruleExpression
)
)(
(
(
	'<-' 
 

    |			'<<' 
 

    |			'>>' 
 

    |			'+=' 
 

    |			'-=' 
 

    |			'++' 
 

    |			'--' 
 

)

)
)))=>((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentStatementAccess().getExprExpressionParserRuleCall_0_0_0_0()); 
	    }
		lv_expr_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		lv_key_1_1=	'<-' 
    {
        newLeafNode(lv_key_1_1, grammarAccess.getAssignmentStatementAccess().getKeyLessThanSignHyphenMinusKeyword_0_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentStatementRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_1, null);
	    }

    |		lv_key_1_2=	'<<' 
    {
        newLeafNode(lv_key_1_2, grammarAccess.getAssignmentStatementAccess().getKeyLessThanSignLessThanSignKeyword_0_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentStatementRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_2, null);
	    }

    |		lv_key_1_3=	'>>' 
    {
        newLeafNode(lv_key_1_3, grammarAccess.getAssignmentStatementAccess().getKeyGreaterThanSignGreaterThanSignKeyword_0_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentStatementRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_3, null);
	    }

    |		lv_key_1_4=	'+=' 
    {
        newLeafNode(lv_key_1_4, grammarAccess.getAssignmentStatementAccess().getKeyPlusSignEqualsSignKeyword_0_0_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentStatementRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_4, null);
	    }

    |		lv_key_1_5=	'-=' 
    {
        newLeafNode(lv_key_1_5, grammarAccess.getAssignmentStatementAccess().getKeyHyphenMinusEqualsSignKeyword_0_0_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentStatementRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_5, null);
	    }

    |		lv_key_1_6=	'++' 
    {
        newLeafNode(lv_key_1_6, grammarAccess.getAssignmentStatementAccess().getKeyPlusSignPlusSignKeyword_0_0_1_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentStatementRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_6, null);
	    }

    |		lv_key_1_7=	'--' 
    {
        newLeafNode(lv_key_1_7, grammarAccess.getAssignmentStatementAccess().getKeyHyphenMinusHyphenMinusKeyword_0_0_1_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAssignmentStatementRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_7, null);
	    }

)

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentStatementAccess().getValueExpressionParserRuleCall_1_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentStatementAccess().getFacetsFacetParserRuleCall_2_0()); 
	    }
		lv_facets_3_0=ruleFacet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentStatementRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_3_0, 
        		"Facet");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssignmentStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleParameters
entryRuleParameters returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	 iv_ruleParameters=ruleParameters 
	 { $current=$iv_ruleParameters.current; } 
	 EOF 
;

// Rule Parameters
ruleParameters returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParametersAccess().getParametersAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParametersAccess().getParamsParameterListParserRuleCall_1_0()); 
	    }
		lv_params_1_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParametersRule());
	        }
       		set(
       			$current, 
       			"params",
        		lv_params_1_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleActionArguments
entryRuleActionArguments returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionArgumentsRule()); }
	 iv_ruleActionArguments=ruleActionArguments 
	 { $current=$iv_ruleActionArguments.current; } 
	 EOF 
;

// Rule ActionArguments
ruleActionArguments returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getActionArgumentsAccess().getArgsArgumentDefinitionParserRuleCall_0_0()); 
	    }
		lv_args_0_0=ruleArgumentDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionArgumentsRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_0_0, 
        		"ArgumentDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActionArgumentsAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionArgumentsAccess().getArgsArgumentDefinitionParserRuleCall_1_1_0()); 
	    }
		lv_args_2_0=ruleArgumentDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionArgumentsRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"ArgumentDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleArgumentDefinition
entryRuleArgumentDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentDefinitionRule()); }
	 iv_ruleArgumentDefinition=ruleArgumentDefinition 
	 { $current=$iv_ruleArgumentDefinition.current; } 
	 EOF 
;

// Rule ArgumentDefinition
ruleArgumentDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_type_0_0=RULE_ID
		{
			newLeafNode(lv_type_0_0, grammarAccess.getArgumentDefinitionAccess().getTypeIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentDefinitionAccess().getOfContentsParserRuleCall_1_0()); 
	    }
		lv_of_1_0=ruleContents		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentDefinitionRule());
	        }
       		set(
       			$current, 
       			"of",
        		lv_of_1_0, 
        		"Contents");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
(
		lv_name_2_1=RULE_ID
		{
			newLeafNode(lv_name_2_1, grammarAccess.getArgumentDefinitionAccess().getNameIDTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_1, 
        		"ID");
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArgumentDefinitionAccess().getNameBuiltInStatementKeyParserRuleCall_2_0_1()); 
	    }
		lv_name_2_2=ruleBuiltInStatementKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_2, 
        		"BuiltInStatementKey");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(	otherlv_3='<-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArgumentDefinitionAccess().getLessThanSignHyphenMinusKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentDefinitionAccess().getDefaultExpressionParserRuleCall_3_1_0()); 
	    }
		lv_default_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentDefinitionRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFacet
entryRuleFacet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFacetRule()); }
	 iv_ruleFacet=ruleFacet 
	 { $current=$iv_ruleFacet.current; } 
	 EOF 
;

// Rule Facet
ruleFacet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFacetAccess().getFunctionFacetParserRuleCall_0()); 
    }
    this_FunctionFacet_0=ruleFunctionFacet
    { 
        $current = $this_FunctionFacet_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFacetAccess().getClassicFacetParserRuleCall_1()); 
    }
    this_ClassicFacet_1=ruleClassicFacet
    { 
        $current = $this_ClassicFacet_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDefinitionFacetKey
entryRuleDefinitionFacetKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionFacetKeyRule()); } 
	 iv_ruleDefinitionFacetKey=ruleDefinitionFacetKey 
	 { $current=$iv_ruleDefinitionFacetKey.current.getText(); }  
	 EOF 
;

// Rule DefinitionFacetKey
ruleDefinitionFacetKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='name:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefinitionFacetKeyAccess().getNameKeyword_0()); 
    }

    |
	kw='returns:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefinitionFacetKeyAccess().getReturnsKeyword_1()); 
    }

    |
	kw='action:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefinitionFacetKeyAccess().getActionKeyword_2()); 
    }

    |
	kw='type:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDefinitionFacetKeyAccess().getTypeKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleClassicFacet
entryRuleClassicFacet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassicFacetRule()); }
	 iv_ruleClassicFacet=ruleClassicFacet 
	 { $current=$iv_ruleClassicFacet.current; } 
	 EOF 
;

// Rule ClassicFacet
ruleClassicFacet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
(
		lv_key_0_0=RULE_ID
		{
			newLeafNode(lv_key_0_0, grammarAccess.getClassicFacetAccess().getKeyIDTerminalRuleCall_0_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassicFacetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClassicFacetAccess().getColonKeyword_0_0_0_1());
    }
)
    |(
(
		lv_key_2_0=	'<-' 
    {
        newLeafNode(lv_key_2_0, grammarAccess.getClassicFacetAccess().getKeyLessThanSignHyphenMinusKeyword_0_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassicFacetRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_2_0, "<-");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getClassicFacetAccess().getExprExpressionParserRuleCall_0_1_0()); 
	    }
		lv_expr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassicFacetRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((((
(
ruleDefinitionFacetKey
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getClassicFacetAccess().getKeyDefinitionFacetKeyParserRuleCall_1_0_0_0()); 
	    }
		lv_key_4_0=ruleDefinitionFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassicFacetRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_4_0, 
        		"DefinitionFacetKey");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		lv_name_5_1=RULE_ID
		{
			newLeafNode(lv_name_5_1, grammarAccess.getClassicFacetAccess().getNameIDTerminalRuleCall_1_0_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassicFacetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_1, 
        		"ID");
	    }

    |		lv_name_5_2=RULE_STRING
		{
			newLeafNode(lv_name_5_2, grammarAccess.getClassicFacetAccess().getNameSTRINGTerminalRuleCall_1_0_1_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassicFacetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_2, 
        		"STRING");
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getClassicFacetAccess().getNameBuiltInStatementKeyParserRuleCall_1_0_1_0_2()); 
	    }
		lv_name_5_3=ruleBuiltInStatementKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassicFacetRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_5_3, 
        		"BuiltInStatementKey");
	        afterParserOrEnumRuleCall();
	    }

)

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getClassicFacetAccess().getOfContentsParserRuleCall_1_1_0()); 
	    }
		lv_of_6_0=ruleContents		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassicFacetRule());
	        }
       		set(
       			$current, 
       			"of",
        		lv_of_6_0, 
        		"Contents");
	        afterParserOrEnumRuleCall();
	    }

)
)?))
;





// Entry rule entryRuleFunctionFacet
entryRuleFunctionFacet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionFacetRule()); }
	 iv_ruleFunctionFacet=ruleFunctionFacet 
	 { $current=$iv_ruleFunctionFacet.current; } 
	 EOF 
;

// Rule FunctionFacet
ruleFunctionFacet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_key_0_0=	'function:' 
    {
        newLeafNode(lv_key_0_0, grammarAccess.getFunctionFacetAccess().getKeyFunctionKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionFacetRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_0_0, "function:");
	    }

)
)
    |(
(
		lv_key_1_0=	'->' 
    {
        newLeafNode(lv_key_1_0, grammarAccess.getFunctionFacetAccess().getKeyHyphenMinusGreaterThanSignKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionFacetRule());
	        }
       		setWithLastConsumed($current, "key", lv_key_1_0, "->");
	    }

)
))	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionFacetAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionFacetAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionFacetRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionFacetAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(((((
(
ruleExpression
)
)	'}' 
))=>((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getFunctionExpressionParserRuleCall_2_0_0_0_0()); 
	    }
		lv_function_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2_0_0_1());
    }
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_1_0_0()); 
	    }
		lv_statements_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2_1_1());
    }
)))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((((
(
(
RULE_ID

    |ruleBuiltInStatementKey
)

)
)	'::' 
)
    |((
(
ruleDefinitionFacetKey
)
)	':' 
)))=>
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getArgumentPairParserRuleCall_0()); 
    }
    this_ArgumentPair_0=ruleArgumentPair
    { 
        $current = $this_ArgumentPair_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getPairParserRuleCall_1()); 
    }
    this_Pair_1=rulePair
    { 
        $current = $this_Pair_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArgumentPair
entryRuleArgumentPair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgumentPairRule()); }
	 iv_ruleArgumentPair=ruleArgumentPair 
	 { $current=$iv_ruleArgumentPair.current; } 
	 EOF 
;

// Rule ArgumentPair
ruleArgumentPair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((((
(
(
RULE_ID

    |ruleBuiltInStatementKey
)

)
)	'::' 
)
    |((
(
ruleDefinitionFacetKey
)
)	':' 
)))=>(((
(
(
		lv_op_0_1=RULE_ID
		{
			newLeafNode(lv_op_0_1, grammarAccess.getArgumentPairAccess().getOpIDTerminalRuleCall_0_0_0_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArgumentPairRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_0_1, 
        		"ID");
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getArgumentPairAccess().getOpBuiltInStatementKeyParserRuleCall_0_0_0_0_0_1()); 
	    }
		lv_op_0_2=ruleBuiltInStatementKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentPairRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_2, 
        		"BuiltInStatementKey");
	        afterParserOrEnumRuleCall();
	    }

)

)
)	otherlv_1='::' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgumentPairAccess().getColonColonKeyword_0_0_0_1());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentPairAccess().getOpDefinitionFacetKeyParserRuleCall_0_0_1_0_0()); 
	    }
		lv_op_2_0=ruleDefinitionFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentPairRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"DefinitionFacetKey");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArgumentPairAccess().getColonKeyword_0_0_1_1());
    }
)))?(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentPairAccess().getRightIfParserRuleCall_1_0()); 
	    }
		lv_right_4_0=ruleIf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentPairRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"If");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePair
entryRulePair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPairRule()); }
	 iv_rulePair=rulePair 
	 { $current=$iv_rulePair.current; } 
	 EOF 
;

// Rule Pair
rulePair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPairAccess().getIfParserRuleCall_0()); 
    }
    this_If_0=ruleIf
    { 
        $current = $this_If_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPairAccess().getPairLeftAction_1_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'::' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getPairAccess().getOpColonColonKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPairRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "::");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getPairAccess().getRightIfParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleIf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPairRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"If");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	 iv_ruleIf=ruleIf 
	 { $current=$iv_ruleIf.current; } 
	 EOF 
;

// Rule If
ruleIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIfAccess().getOrParserRuleCall_0()); 
    }
    this_Or_0=ruleOr
    { 
        $current = $this_Or_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getIfAccess().getIfLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'?' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getIfAccess().getOpQuestionMarkKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIfRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "?");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getRightOrParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfAccess().getIfFalseOrParserRuleCall_1_4_0()); 
	    }
		lv_ifFalse_5_0=ruleOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfRule());
	        }
       		set(
       			$current, 
       			"ifFalse",
        		lv_ifFalse_5_0, 
        		"Or");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAccess().getExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'or' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getOrAccess().getOpOrKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOrRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "or");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndAccess().getComparisonParserRuleCall_0()); 
    }
    this_Comparison_0=ruleComparison
    { 
        $current = $this_Comparison_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAccess().getExpressionLeftAction_1_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'and' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getAndAccess().getOpAndKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAndRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "and");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRightComparisonParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getAdditionParserRuleCall_0()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getExpressionLeftAction_1_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'!=' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getComparisonAccess().getOpExclamationMarkEqualsSignKeyword_1_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getComparisonAccess().getOpEqualsSignKeyword_1_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'>=' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'<=' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_0_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

    |		lv_op_2_5=	'<' 
    {
        newLeafNode(lv_op_2_5, grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_0_1_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_5, null);
	    }

    |		lv_op_2_6=	'>' 
    {
        newLeafNode(lv_op_2_6, grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_0_1_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_6, null);
	    }

)

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightAdditionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Addition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getExpressionLeftAction_1_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'+' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getAdditionAccess().getOpPlusSignKeyword_1_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'-' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getAdditionAccess().getOpHyphenMinusKeyword_1_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAdditionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getBinaryParserRuleCall_0()); 
    }
    this_Binary_0=ruleBinary
    { 
        $current = $this_Binary_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getExpressionLeftAction_1_0_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getMultiplicationAccess().getOpAsteriskKeyword_1_0_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'/' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getMultiplicationAccess().getOpSolidusKeyword_1_0_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'^' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getMultiplicationAccess().getOpCircumflexAccentKeyword_1_0_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMultiplicationRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

)

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightBinaryParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleBinary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Binary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleBinary
entryRuleBinary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryRule()); }
	 iv_ruleBinary=ruleBinary 
	 { $current=$iv_ruleBinary.current; } 
	 EOF 
;

// Rule Binary
ruleBinary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBinaryAccess().getUnitParserRuleCall_0()); 
    }
    this_Unit_0=ruleUnit
    { 
        $current = $this_Unit_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBinaryAccess().getBinaryLeftAction_1_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=RULE_ID
		{
			newLeafNode(lv_op_2_0, grammarAccess.getBinaryAccess().getOpIDTerminalRuleCall_1_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBinaryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"ID");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryAccess().getRightUnitParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Unit");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnit
entryRuleUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitRule()); }
	 iv_ruleUnit=ruleUnit 
	 { $current=$iv_ruleUnit.current; } 
	 EOF 
;

// Rule Unit
ruleUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnitAccess().getUnaryParserRuleCall_0()); 
    }
    this_Unary_0=ruleUnary
    { 
        $current = $this_Unary_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUnitAccess().getUnitLeftAction_1_0_0(),
            $current);
    }
)(
(
		lv_op_2_0=	'\u00B0' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getUnitAccess().getOpDegreeSignKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "\u00B0");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getUnitAccess().getRightUnitNameParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleUnitName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnitRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UnitName");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleUnary
entryRuleUnary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryRule()); }
	 iv_ruleUnary=ruleUnary 
	 { $current=$iv_ruleUnary.current; } 
	 EOF 
;

// Rule Unary
ruleUnary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUnaryAccess().getAccessParserRuleCall_0()); 
    }
    this_Access_0=ruleAccess
    { 
        $current = $this_Access_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnaryAccess().getUnaryAction_1_0(),
            $current);
    }
)(((
(
		lv_op_2_0=	'\u00B0' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getUnaryAccess().getOpDegreeSignKeyword_1_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, "\u00B0");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryAccess().getRightUnitNameParserRuleCall_1_1_0_1_0()); 
	    }
		lv_right_3_0=ruleUnitName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UnitName");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
(
		lv_op_4_1=	'-' 
    {
        newLeafNode(lv_op_4_1, grammarAccess.getUnaryAccess().getOpHyphenMinusKeyword_1_1_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_1, null);
	    }

    |		lv_op_4_2=	'!' 
    {
        newLeafNode(lv_op_4_2, grammarAccess.getUnaryAccess().getOpExclamationMarkKeyword_1_1_1_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_2, null);
	    }

    |		lv_op_4_3=	'my' 
    {
        newLeafNode(lv_op_4_3, grammarAccess.getUnaryAccess().getOpMyKeyword_1_1_1_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_3, null);
	    }

    |		lv_op_4_4=	'the' 
    {
        newLeafNode(lv_op_4_4, grammarAccess.getUnaryAccess().getOpTheKeyword_1_1_1_0_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_4, null);
	    }

    |		lv_op_4_5=	'not' 
    {
        newLeafNode(lv_op_4_5, grammarAccess.getUnaryAccess().getOpNotKeyword_1_1_1_0_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_4_5, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryAccess().getRightUnaryParserRuleCall_1_1_1_1_0()); 
	    }
		lv_right_5_0=ruleUnary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"Unary");
	        afterParserOrEnumRuleCall();
	    }

)
)))))
;





// Entry rule entryRuleAccess
entryRuleAccess returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessRule()); }
	 iv_ruleAccess=ruleAccess 
	 { $current=$iv_ruleAccess.current; } 
	 EOF 
;

// Rule Access
ruleAccess returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAccessAccess().getDotParserRuleCall_0()); 
    }
    this_Dot_0=ruleDot
    { 
        $current = $this_Dot_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAccessAccess().getAccessLeftAction_1_0_0(),
            $current);
    }
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAccessAccess().getLeftSquareBracketKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAccessAccess().getArgsExpressionListParserRuleCall_1_1_0()); 
	    }
		lv_args_3_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAccessRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAccessAccess().getRightSquareBracketKeyword_1_2());
    }
)*)
;





// Entry rule entryRuleDot
entryRuleDot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDotRule()); }
	 iv_ruleDot=ruleDot 
	 { $current=$iv_ruleDot.current; } 
	 EOF 
;

// Rule Dot
ruleDot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDotAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getDotAccess().getDotLeftAction_1_0(),
            $current);
    }
)((
(
		lv_op_2_0=	'.' 
    {
        newLeafNode(lv_op_2_0, grammarAccess.getDotAccess().getOpFullStopKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDotRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_0, ".");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDotAccess().getRightPrimaryParserRuleCall_1_1_1_0()); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDotRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getTerminalExpressionParserRuleCall_0()); 
    }
    this_TerminalExpression_0=ruleTerminalExpression
    { 
        $current = $this_TerminalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getAbstractRefParserRuleCall_1()); 
    }
    this_AbstractRef_1=ruleAbstractRef
    { 
        $current = $this_AbstractRef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_2_1()); 
    }
    this_Expression_3=ruleExpression
    { 
        $current = $this_Expression_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2());
    }
)
    |(	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getParametersAction_3_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getParamsParameterListParserRuleCall_3_2_0()); 
	    }
		lv_params_7_0=ruleParameterList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"params",
        		lv_params_7_0, 
        		"ParameterList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_3());
    }
)
    |(	otherlv_9='[' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPrimaryAccess().getLeftSquareBracketKeyword_4_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getArrayAction_4_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getExprsExpressionListParserRuleCall_4_2_0()); 
	    }
		lv_exprs_11_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"exprs",
        		lv_exprs_11_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_12=']' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getPrimaryAccess().getRightSquareBracketKeyword_4_3());
    }
)
    |(	otherlv_13='{' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getPrimaryAccess().getLeftCurlyBracketKeyword_5_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getPointAction_5_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getLeftExpressionParserRuleCall_5_2_0()); 
	    }
		lv_left_15_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_15_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_op_16_0=	',' 
    {
        newLeafNode(lv_op_16_0, grammarAccess.getPrimaryAccess().getOpCommaKeyword_5_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_16_0, ",");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getRightExpressionParserRuleCall_5_4_0()); 
	    }
		lv_right_17_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_17_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_18=',' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getPrimaryAccess().getCommaKeyword_5_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getZExpressionParserRuleCall_5_5_1_0()); 
	    }
		lv_z_19_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"z",
        		lv_z_19_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_20='}' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getPrimaryAccess().getRightCurlyBracketKeyword_5_6());
    }
))
;





// Entry rule entryRuleAbstractRef
entryRuleAbstractRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractRefRule()); }
	 iv_ruleAbstractRef=ruleAbstractRef 
	 { $current=$iv_ruleAbstractRef.current; } 
	 EOF 
;

// Rule AbstractRef
ruleAbstractRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractRefAccess().getVariableRefParserRuleCall_0()); 
    }
    this_VariableRef_0=ruleVariableRef
    { 
        $current = $this_VariableRef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractRefAccess().getFunctionParserRuleCall_1()); 
    }
    this_Function_1=ruleFunction
    { 
        $current = $this_Function_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionAccess().getFunctionAction_0(),
            $current);
    }
)(
(
		lv_op_1_0=RULE_ID
		{
			newLeafNode(lv_op_1_0, grammarAccess.getFunctionAccess().getOpIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionAccess().getArgsExpressionListParserRuleCall_3_0()); 
	    }
		lv_args_3_0=ruleExpressionList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionRule());
	        }
       		set(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"ExpressionList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterAccess().getParameterAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getBuiltInFacetKeyDefinitionFacetKeyParserRuleCall_1_0_0()); 
	    }
		lv_builtInFacetKey_1_0=ruleDefinitionFacetKey		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"builtInFacetKey",
        		lv_builtInFacetKey_1_0, 
        		"DefinitionFacetKey");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getLeftVariableRefParserRuleCall_1_1_0_0()); 
	    }
		lv_left_2_0=ruleVariableRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"VariableRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getColonKeyword_1_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getRightExpressionParserRuleCall_2_0()); 
	    }
		lv_right_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); }
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current; } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExprsExpressionParserRuleCall_0_0()); 
	    }
		lv_exprs_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpressionListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionListAccess().getExprsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exprs_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionListRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current; } 
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getExprsParameterParserRuleCall_0_0()); 
	    }
		lv_exprs_0_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_0_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getExprsParameterParserRuleCall_1_1_0()); 
	    }
		lv_exprs_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleUnitName
entryRuleUnitName returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnitNameRule()); }
	 iv_ruleUnitName=ruleUnitName 
	 { $current=$iv_ruleUnitName.current; } 
	 EOF 
;

// Rule UnitName
ruleUnitName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnitNameAccess().getUnitNameAction_0(),
            $current);
    }
)(
(
		lv_op_1_0=RULE_ID
		{
			newLeafNode(lv_op_1_0, grammarAccess.getUnitNameAccess().getOpIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnitNameRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleVariableRef
entryRuleVariableRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRefRule()); }
	 iv_ruleVariableRef=ruleVariableRef 
	 { $current=$iv_ruleVariableRef.current; } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableRefAccess().getVariableRefAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRefRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getVariableRefAccess().getRefGamlVarRefCrossReference_1_0()); 
	}

)
))
;







// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getIntLiteralAction_0_0(),
            $current);
    }
)(
(
		lv_op_1_0=RULE_INTEGER
		{
			newLeafNode(lv_op_1_0, grammarAccess.getTerminalExpressionAccess().getOpINTEGERTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"INTEGER");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getDoubleLiteralAction_1_0(),
            $current);
    }
)(
(
		lv_op_3_0=RULE_DOUBLE
		{
			newLeafNode(lv_op_3_0, grammarAccess.getTerminalExpressionAccess().getOpDOUBLETerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_3_0, 
        		"DOUBLE");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getColorLiteralAction_2_0(),
            $current);
    }
)(
(
		lv_op_5_0=RULE_COLOR
		{
			newLeafNode(lv_op_5_0, grammarAccess.getTerminalExpressionAccess().getOpCOLORTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_5_0, 
        		"COLOR");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getStringLiteralAction_3_0(),
            $current);
    }
)(
(
		lv_op_7_0=RULE_STRING
		{
			newLeafNode(lv_op_7_0, grammarAccess.getTerminalExpressionAccess().getOpSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_7_0, 
        		"STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getBooleanLiteralAction_4_0(),
            $current);
    }
)(
(
		lv_op_9_0=RULE_BOOLEAN
		{
			newLeafNode(lv_op_9_0, grammarAccess.getTerminalExpressionAccess().getOpBOOLEANTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"op",
        		lv_op_9_0, 
        		"BOOLEAN");
	    }

)
)))
;





RULE_INTEGER : ('0'|'1'..'9' ('0'..'9')*);

RULE_BOOLEAN : ('true'|'false');

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'$') ('a'..'z'|'A'..'Z'|'_'|'$'|'0'..'9')*;

RULE_COLOR : '#' ('0'..'9'|'A'..'F')+;

RULE_DOUBLE : ('1'..'9' ('0'..'9')* ('.' ('0'..'9')+)? (('E'|'e') ('+'|'-')? ('0'..'9')+)?|'0' ('.' ('0'..'9')+)? (('E'|'e') ('+'|'-')? ('0'..'9')+)?);

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


