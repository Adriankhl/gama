/*
* generated by Xtext
*/
grammar InternalGaml;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package msi.gama.lang.gaml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package msi.gama.lang.gaml.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import msi.gama.lang.gaml.services.GamlGrammarAccess;

}

@parser::members {

 	private GamlGrammarAccess grammarAccess;
 	
    public InternalGamlParser(TokenStream input, GamlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected GamlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='model' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getModelKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getNameFQNParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getImportsImportParserRuleCall_2_0()); 
	    }
		lv_imports_2_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_2_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getGamlGamlLangDefParserRuleCall_3_0()); 
	    }
		lv_gaml_3_0=ruleGamlLangDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"gaml",
        		lv_gaml_3_0, 
        		"GamlLangDef");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_4_0()); 
	    }
		lv_statements_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
))
;







// Entry rule entryRuleGamlLangDef
entryRuleGamlLangDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGamlLangDefRule()); }
	 iv_ruleGamlLangDef=ruleGamlLangDef 
	 { $current=$iv_ruleGamlLangDef.current; } 
	 EOF 
;

// Rule GamlLangDef
ruleGamlLangDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='_gaml' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGamlLangDefAccess().get_gamlKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGamlLangDefAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getGamlLangDefAccess().getKDefKeywordParserRuleCall_2_0_0()); 
	    }
		lv_k_2_0=ruleDefKeyword		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGamlLangDefRule());
	        }
       		add(
       			$current, 
       			"k",
        		lv_k_2_0, 
        		"DefKeyword");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getGamlLangDefAccess().getFDefFacetParserRuleCall_2_1_0()); 
	    }
		lv_f_3_0=ruleDefFacet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGamlLangDefRule());
	        }
       		add(
       			$current, 
       			"f",
        		lv_f_3_0, 
        		"DefFacet");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getGamlLangDefAccess().getBDefBinaryOpParserRuleCall_2_2_0()); 
	    }
		lv_b_4_0=ruleDefBinaryOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGamlLangDefRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_4_0, 
        		"DefBinaryOp");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getGamlLangDefAccess().getRDefReservedParserRuleCall_2_3_0()); 
	    }
		lv_r_5_0=ruleDefReserved		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGamlLangDefRule());
	        }
       		add(
       			$current, 
       			"r",
        		lv_r_5_0, 
        		"DefReserved");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getGamlLangDefAccess().getUDefUnitParserRuleCall_2_4_0()); 
	    }
		lv_u_6_0=ruleDefUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGamlLangDefRule());
	        }
       		add(
       			$current, 
       			"u",
        		lv_u_6_0, 
        		"DefUnit");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getGamlLangDefAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleDefKeyword
entryRuleDefKeyword returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefKeywordRule()); }
	 iv_ruleDefKeyword=ruleDefKeyword 
	 { $current=$iv_ruleDefKeyword.current; } 
	 EOF 
;

// Rule DefKeyword
ruleDefKeyword returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='_keyword' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefKeywordAccess().get_keywordKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDefKeywordAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefKeywordRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDefKeywordAccess().getBlockGamlBlockParserRuleCall_2_0_0()); 
	    }
		lv_block_2_0=ruleGamlBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefKeywordRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_2_0, 
        		"GamlBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDefKeywordAccess().getSemicolonKeyword_2_1());
    }
))
;





// Entry rule entryRuleGamlBlock
entryRuleGamlBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGamlBlockRule()); }
	 iv_ruleGamlBlock=ruleGamlBlock 
	 { $current=$iv_ruleGamlBlock.current; } 
	 EOF 
;

// Rule GamlBlock
ruleGamlBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGamlBlockAccess().getLeftCurlyBracketKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getGamlBlockAccess().getGamlBlockAction_1(),
            $current);
    }
)(	otherlv_2='_facets' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGamlBlockAccess().get_facetsKeyword_2_0());
    }
	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGamlBlockAccess().getLeftSquareBracketKeyword_2_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGamlBlockRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getGamlBlockAccess().getFacetsDefFacetCrossReference_2_2_0()); 
	}

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGamlBlockAccess().getCommaKeyword_2_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGamlBlockRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getGamlBlockAccess().getFacetsDefFacetCrossReference_2_3_1_0()); 
	}

)
))*	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getGamlBlockAccess().getRightSquareBracketKeyword_2_4());
    }
)?(	otherlv_8='_children' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getGamlBlockAccess().get_childrenKeyword_3_0());
    }
	otherlv_9='[' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getGamlBlockAccess().getLeftSquareBracketKeyword_3_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGamlBlockRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getGamlBlockAccess().getChildsDefKeywordCrossReference_3_2_0()); 
	}

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getGamlBlockAccess().getCommaKeyword_3_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGamlBlockRule());
	        }
        }
	otherlv_12=RULE_ID
	{
		newLeafNode(otherlv_12, grammarAccess.getGamlBlockAccess().getChildsDefKeywordCrossReference_3_3_1_0()); 
	}

)
))*	otherlv_13=']' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getGamlBlockAccess().getRightSquareBracketKeyword_3_4());
    }
)?	otherlv_14='}' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getGamlBlockAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleDefFacet
entryRuleDefFacet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefFacetRule()); }
	 iv_ruleDefFacet=ruleDefFacet 
	 { $current=$iv_ruleDefFacet.current; } 
	 EOF 
;

// Rule DefFacet
ruleDefFacet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='_facet' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefFacetAccess().get_facetKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDefFacetAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefFacetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefFacetAccess().getColonKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefFacetRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getDefFacetAccess().getTypeDefReservedCrossReference_2_1_0()); 
	}

)
))?(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefFacetAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefFacetAccess().getDefaultTerminalExpressionParserRuleCall_3_1_0()); 
	    }
		lv_default_5_0=ruleTerminalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefFacetRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_5_0, 
        		"TerminalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDefFacetAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleDefBinaryOp
entryRuleDefBinaryOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefBinaryOpRule()); }
	 iv_ruleDefBinaryOp=ruleDefBinaryOp 
	 { $current=$iv_ruleDefBinaryOp.current; } 
	 EOF 
;

// Rule DefBinaryOp
ruleDefBinaryOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='_binary' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefBinaryOpAccess().get_binaryKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDefBinaryOpAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefBinaryOpRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefBinaryOpAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleDefReserved
entryRuleDefReserved returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefReservedRule()); }
	 iv_ruleDefReserved=ruleDefReserved 
	 { $current=$iv_ruleDefReserved.current; } 
	 EOF 
;

// Rule DefReserved
ruleDefReserved returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='_reserved' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefReservedAccess().get_reservedKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDefReservedAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefReservedRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefReservedAccess().getColonKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefReservedRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getDefReservedAccess().getTypeDefReservedCrossReference_2_1_0()); 
	}

)
))?(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefReservedAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefReservedAccess().getValueTerminalExpressionParserRuleCall_3_1_0()); 
	    }
		lv_value_5_0=ruleTerminalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefReservedRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"TerminalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDefReservedAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleDefUnit
entryRuleDefUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefUnitRule()); }
	 iv_ruleDefUnit=ruleDefUnit 
	 { $current=$iv_ruleDefUnit.current; } 
	 EOF 
;

// Rule DefUnit
ruleDefUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='_unit' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefUnitAccess().get_unitKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDefUnitAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefUnitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDefUnitAccess().getEqualsSignKeyword_2_0());
    }
(
(
		lv_coef_3_0=RULE_DOUBLE
		{
			newLeafNode(lv_coef_3_0, grammarAccess.getDefUnitAccess().getCoefDOUBLETerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefUnitRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"coef",
        		lv_coef_3_0, 
        		"DOUBLE");
	    }

)
))?	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefUnitAccess().getSemicolonKeyword_3());
    }
)
;







// Entry rule entryRuleGamlKeywordRef
entryRuleGamlKeywordRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGamlKeywordRefRule()); }
	 iv_ruleGamlKeywordRef=ruleGamlKeywordRef 
	 { $current=$iv_ruleGamlKeywordRef.current; } 
	 EOF 
;

// Rule GamlKeywordRef
ruleGamlKeywordRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGamlKeywordRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getGamlKeywordRefAccess().getRefDefKeywordCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleGamlFacetRef
entryRuleGamlFacetRef returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getGamlFacetRefRule()); }
	 iv_ruleGamlFacetRef=ruleGamlFacetRef 
	 { $current=$iv_ruleGamlFacetRef.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule GamlFacetRef
ruleGamlFacetRef returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGamlFacetRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getGamlFacetRefAccess().getRefDefFacetCrossReference_0_0()); 
	}

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGamlFacetRefAccess().getColonKeyword_1());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleGamlBinarOpRef
entryRuleGamlBinarOpRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGamlBinarOpRefRule()); }
	 iv_ruleGamlBinarOpRef=ruleGamlBinarOpRef 
	 { $current=$iv_ruleGamlBinarOpRef.current; } 
	 EOF 
;

// Rule GamlBinarOpRef
ruleGamlBinarOpRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGamlBinarOpRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getGamlBinarOpRefAccess().getRefDefBinaryOpCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleGamlUnitRef
entryRuleGamlUnitRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGamlUnitRefRule()); }
	 iv_ruleGamlUnitRef=ruleGamlUnitRef 
	 { $current=$iv_ruleGamlUnitRef.current; } 
	 EOF 
;

// Rule GamlUnitRef
ruleGamlUnitRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGamlUnitRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getGamlUnitRefAccess().getRefDefUnitCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleGamlReservedRef
entryRuleGamlReservedRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGamlReservedRefRule()); }
	 iv_ruleGamlReservedRef=ruleGamlReservedRef 
	 { $current=$iv_ruleGamlReservedRef.current; } 
	 EOF 
;

// Rule GamlReservedRef
ruleGamlReservedRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGamlReservedRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getGamlReservedRefAccess().getRefDefReservedCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSetEvalParserRuleCall_0()); 
    }
    this_SetEval_0=ruleSetEval
    { 
        $current = $this_SetEval_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSubStatementParserRuleCall_1()); 
    }
    this_SubStatement_1=ruleSubStatement
    { 
        $current = $this_SubStatement_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSubStatement
entryRuleSubStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubStatementRule()); }
	 iv_ruleSubStatement=ruleSubStatement 
	 { $current=$iv_ruleSubStatement.current; } 
	 EOF 
;

// Rule SubStatement
ruleSubStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSubStatementAccess().getDefinitionParserRuleCall_0()); 
    }
    this_Definition_0=ruleDefinition
    { 
        $current = $this_Definition_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSubStatementAccess().getEvaluationParserRuleCall_1()); 
    }
    this_Evaluation_1=ruleEvaluation
    { 
        $current = $this_Evaluation_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSetEval
entryRuleSetEval returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetEvalRule()); }
	 iv_ruleSetEval=ruleSetEval 
	 { $current=$iv_ruleSetEval.current; } 
	 EOF 
;

// Rule SetEval
ruleSetEval returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='set' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetEvalAccess().getSetKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSetEvalAccess().getVarExpressionParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetEvalRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSetEvalAccess().getFacetsFacetExprParserRuleCall_2_0()); 
	    }
		lv_facets_2_0=ruleFacetExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetEvalRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_2_0, 
        		"FacetExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getSetEvalAccess().getBlockBlockParserRuleCall_3_0_0()); 
	    }
		lv_block_3_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetEvalRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_3_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSetEvalAccess().getSemicolonKeyword_3_1());
    }
))
;





// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	 iv_ruleDefinition=ruleDefinition 
	 { $current=$iv_ruleDefinition.current; } 
	 EOF 
;

// Rule Definition
ruleDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getKeyGamlKeywordRefParserRuleCall_0_0()); 
	    }
		lv_key_0_0=ruleGamlKeywordRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"GamlKeywordRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getFacetsFacetExprParserRuleCall_2_0()); 
	    }
		lv_facets_2_0=ruleFacetExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_2_0, 
        		"FacetExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getDefinitionAccess().getBlockBlockParserRuleCall_3_0_0()); 
	    }
		lv_block_3_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefinitionRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_3_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDefinitionAccess().getSemicolonKeyword_3_1());
    }
))
;





// Entry rule entryRuleEvaluation
entryRuleEvaluation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEvaluationRule()); }
	 iv_ruleEvaluation=ruleEvaluation 
	 { $current=$iv_ruleEvaluation.current; } 
	 EOF 
;

// Rule Evaluation
ruleEvaluation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEvaluationAccess().getKeyGamlKeywordRefParserRuleCall_0_0()); 
	    }
		lv_key_0_0=ruleGamlKeywordRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvaluationRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_0_0, 
        		"GamlKeywordRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEvaluationAccess().getColonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEvaluationAccess().getVarExpressionParserRuleCall_1_1_0()); 
	    }
		lv_var_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvaluationRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getEvaluationAccess().getFacetsFacetExprParserRuleCall_2_0()); 
	    }
		lv_facets_3_0=ruleFacetExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvaluationRule());
	        }
       		add(
       			$current, 
       			"facets",
        		lv_facets_3_0, 
        		"FacetExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getEvaluationAccess().getBlockBlockParserRuleCall_3_0_0()); 
	    }
		lv_block_4_0=ruleBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEvaluationRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_4_0, 
        		"Block");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEvaluationAccess().getSemicolonKeyword_3_1());
    }
))
;





// Entry rule entryRuleFacetExpr
entryRuleFacetExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFacetExprRule()); }
	 iv_ruleFacetExpr=ruleFacetExpr 
	 { $current=$iv_ruleFacetExpr.current; } 
	 EOF 
;

// Rule FacetExpr
ruleFacetExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='returns:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFacetExprAccess().getReturnsKeyword_0_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFacetExprAccess().getNameIDTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFacetExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getFacetExprAccess().getKeyGamlFacetRefParserRuleCall_1_0_0()); 
	    }
		lv_key_2_0=ruleGamlFacetRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFacetExprRule());
	        }
       		set(
       			$current, 
       			"key",
        		lv_key_2_0, 
        		"GamlFacetRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFacetExprAccess().getExprExpressionParserRuleCall_1_1_0()); 
	    }
		lv_expr_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFacetExprRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleBlock=ruleBlock 
	 { $current=$iv_ruleBlock.current; } 
	 EOF 
;

// Rule Block
ruleBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlockAccess().getBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;







// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentOpParserRuleCall()); 
    }
    this_AssignmentOp_0=ruleAssignmentOp
    { 
        $current = $this_AssignmentOp_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleAssignmentOp
entryRuleAssignmentOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentOpRule()); }
	 iv_ruleAssignmentOp=ruleAssignmentOp 
	 { $current=$iv_ruleAssignmentOp.current; } 
	 EOF 
;

// Rule AssignmentOp
ruleAssignmentOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAssignmentOpAccess().getTernExpParserRuleCall_0()); 
    }
    this_TernExp_0=ruleTernExp
    { 
        $current = $this_TernExp_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentOpAccess().getAssignPlusLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='+=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAssignmentOpAccess().getPlusSignEqualsSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentOpAccess().getAssignMinLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='-=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAssignmentOpAccess().getHyphenMinusEqualsSignKeyword_1_0_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentOpAccess().getAssignMultLeftAction_1_0_2_0(),
            $current);
    }
)	otherlv_6='*=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAssignmentOpAccess().getAsteriskEqualsSignKeyword_1_0_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAssignmentOpAccess().getAssignDivLeftAction_1_0_3_0(),
            $current);
    }
)	otherlv_8='/=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAssignmentOpAccess().getSolidusEqualsSignKeyword_1_0_3_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentOpAccess().getRightTernExpParserRuleCall_1_1_0()); 
	    }
		lv_right_9_0=ruleTernExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentOpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_9_0, 
        		"TernExp");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTernExp
entryRuleTernExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTernExpRule()); }
	 iv_ruleTernExp=ruleTernExp 
	 { $current=$iv_ruleTernExp.current; } 
	 EOF 
;

// Rule TernExp
ruleTernExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTernExpAccess().getOrExpParserRuleCall_0()); 
    }
    this_OrExp_0=ruleOrExp
    { 
        $current = $this_OrExp_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTernExpAccess().getTernaryConditionAction_1_0(),
            $current);
    }
)	otherlv_2='?' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTernExpAccess().getQuestionMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTernExpAccess().getIfTrueOrExpParserRuleCall_1_2_0()); 
	    }
		lv_ifTrue_3_0=ruleOrExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTernExpRule());
	        }
       		set(
       			$current, 
       			"ifTrue",
        		lv_ifTrue_3_0, 
        		"OrExp");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTernExpAccess().getColonKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTernExpAccess().getIfFalseOrExpParserRuleCall_1_4_0()); 
	    }
		lv_ifFalse_5_0=ruleOrExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTernExpRule());
	        }
       		set(
       			$current, 
       			"ifFalse",
        		lv_ifFalse_5_0, 
        		"OrExp");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOrExp
entryRuleOrExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrExpRule()); }
	 iv_ruleOrExp=ruleOrExp 
	 { $current=$iv_ruleOrExp.current; } 
	 EOF 
;

// Rule OrExp
ruleOrExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrExpAccess().getAndExpParserRuleCall_0()); 
    }
    this_AndExp_0=ruleAndExp
    { 
        $current = $this_AndExp_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrExpAccess().getOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='or' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrExpAccess().getOrKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrExpAccess().getRightAndExpParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAndExp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrExpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AndExp");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAndExp
entryRuleAndExp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndExpRule()); }
	 iv_ruleAndExp=ruleAndExp 
	 { $current=$iv_ruleAndExp.current; } 
	 EOF 
;

// Rule AndExp
ruleAndExp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndExpAccess().getRelationalParserRuleCall_0()); 
    }
    this_Relational_0=ruleRelational
    { 
        $current = $this_Relational_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndExpAccess().getAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='and' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndExpAccess().getAndKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndExpAccess().getRightRelationalParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleRelational		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndExpRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Relational");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelational
entryRuleRelational returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalRule()); }
	 iv_ruleRelational=ruleRelational 
	 { $current=$iv_ruleRelational.current; } 
	 EOF 
;

// Rule Relational
ruleRelational returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalAccess().getPairExprParserRuleCall_0()); 
    }
    this_PairExpr_0=rulePairExpr
    { 
        $current = $this_PairExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelNotEqLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='!=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRelationalAccess().getExclamationMarkEqualsSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelEqLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRelationalAccess().getEqualsSignKeyword_1_0_1_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelEqEqLeftAction_1_0_2_0(),
            $current);
    }
)	otherlv_6='==' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRelationalAccess().getEqualsSignEqualsSignKeyword_1_0_2_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelLtEqLeftAction_1_0_3_0(),
            $current);
    }
)	otherlv_8='>=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRelationalAccess().getGreaterThanSignEqualsSignKeyword_1_0_3_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelGtEqLeftAction_1_0_4_0(),
            $current);
    }
)	otherlv_10='<=' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getRelationalAccess().getLessThanSignEqualsSignKeyword_1_0_4_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelLtLeftAction_1_0_5_0(),
            $current);
    }
)	otherlv_12='<' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRelationalAccess().getLessThanSignKeyword_1_0_5_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalAccess().getRelGtLeftAction_1_0_6_0(),
            $current);
    }
)	otherlv_14='>' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getRelationalAccess().getGreaterThanSignKeyword_1_0_6_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalAccess().getRightPairExprParserRuleCall_1_1_0()); 
	    }
		lv_right_15_0=rulePairExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_15_0, 
        		"PairExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePairExpr
entryRulePairExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPairExprRule()); }
	 iv_rulePairExpr=rulePairExpr 
	 { $current=$iv_rulePairExpr.current; } 
	 EOF 
;

// Rule PairExpr
rulePairExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPairExprAccess().getAdditionParserRuleCall_0()); 
    }
    this_Addition_0=ruleAddition
    { 
        $current = $this_Addition_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPairExprAccess().getPairLeftAction_1_0_0(),
            $current);
    }
)	otherlv_2='::' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPairExprAccess().getColonColonKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPairExprAccess().getRightAdditionParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPairExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Addition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleAddition=ruleAddition 
	 { $current=$iv_ruleAddition.current; } 
	 EOF 
;

// Rule Addition
ruleAddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); 
    }
    this_Multiplication_0=ruleMultiplication
    { 
        $current = $this_Multiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getPlusLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAdditionAccess().getPlusSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditionAccess().getMinusLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAdditionAccess().getHyphenMinusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"Multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_ruleMultiplication=ruleMultiplication 
	 { $current=$iv_ruleMultiplication.current; } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getGamlBinExprParserRuleCall_0()); 
    }
    this_GamlBinExpr_0=ruleGamlBinExpr
    { 
        $current = $this_GamlBinExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getMultiLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMultiplicationAccess().getAsteriskKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicationAccess().getDivLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMultiplicationAccess().getSolidusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getRightGamlBinExprParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleGamlBinExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"GamlBinExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGamlBinExpr
entryRuleGamlBinExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGamlBinExprRule()); }
	 iv_ruleGamlBinExpr=ruleGamlBinExpr 
	 { $current=$iv_ruleGamlBinExpr.current; } 
	 EOF 
;

// Rule GamlBinExpr
ruleGamlBinExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGamlBinExprAccess().getPowerParserRuleCall_0()); 
    }
    this_Power_0=rulePower
    { 
        $current = $this_Power_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGamlBinExprAccess().getGamlBinaryLeftAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGamlBinExprAccess().getOpGamlBinarOpRefParserRuleCall_1_0_1_0()); 
	    }
		lv_op_2_0=ruleGamlBinarOpRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGamlBinExprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"GamlBinarOpRef");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getGamlBinExprAccess().getRightPowerParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=rulePower		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGamlBinExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Power");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePower
entryRulePower returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPowerRule()); }
	 iv_rulePower=rulePower 
	 { $current=$iv_rulePower.current; } 
	 EOF 
;

// Rule Power
rulePower returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPowerAccess().getGamlUnitExprParserRuleCall_0()); 
    }
    this_GamlUnitExpr_0=ruleGamlUnitExpr
    { 
        $current = $this_GamlUnitExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPowerAccess().getPowLeftAction_1_0_0(),
            $current);
    }
)	otherlv_2='^' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPowerAccess().getCircumflexAccentKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPowerAccess().getRightGamlUnitExprParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleGamlUnitExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPowerRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"GamlUnitExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleGamlUnitExpr
entryRuleGamlUnitExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGamlUnitExprRule()); }
	 iv_ruleGamlUnitExpr=ruleGamlUnitExpr 
	 { $current=$iv_ruleGamlUnitExpr.current; } 
	 EOF 
;

// Rule GamlUnitExpr
ruleGamlUnitExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGamlUnitExprAccess().getGamlUnaryExprParserRuleCall_0()); 
    }
    this_GamlUnaryExpr_0=ruleGamlUnaryExpr
    { 
        $current = $this_GamlUnaryExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getGamlUnitExprAccess().getUnitLeftAction_1_0_0(),
            $current);
    }
)	otherlv_2='#' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getGamlUnitExprAccess().getNumberSignKeyword_1_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGamlUnitExprAccess().getRightGamlUnitRefParserRuleCall_1_1_0()); 
	    }
		lv_right_3_0=ruleGamlUnitRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGamlUnitExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"GamlUnitRef");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleGamlUnaryExpr
entryRuleGamlUnaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGamlUnaryExprRule()); }
	 iv_ruleGamlUnaryExpr=ruleGamlUnaryExpr 
	 { $current=$iv_ruleGamlUnaryExpr.current; } 
	 EOF 
;

// Rule GamlUnaryExpr
ruleGamlUnaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGamlUnaryExprAccess().getPrePrimaryExprParserRuleCall_0()); 
    }
    this_PrePrimaryExpr_0=rulePrePrimaryExpr
    { 
        $current = $this_PrePrimaryExpr_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getGamlUnaryExprAccess().getGamlUnaryAction_1_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getGamlUnaryExprAccess().getOpUnarOpParserRuleCall_1_1_0_0()); 
	    }
		lv_op_2_0=ruleUnarOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGamlUnaryExprRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"UnarOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getGamlUnaryExprAccess().getRightGamlUnaryExprParserRuleCall_1_1_1_0()); 
	    }
		lv_right_3_0=ruleGamlUnaryExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGamlUnaryExprRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"GamlUnaryExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleUnarOp
entryRuleUnarOp returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnarOpRule()); } 
	 iv_ruleUnarOp=ruleUnarOp 
	 { $current=$iv_ruleUnarOp.current.getText(); }  
	 EOF 
;

// Rule UnarOp
ruleUnarOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnarOpAccess().getHyphenMinusKeyword_0()); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnarOpAccess().getExclamationMarkKeyword_1()); 
    }

    |
	kw='my' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnarOpAccess().getMyKeyword_2()); 
    }

    |
	kw='the' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnarOpAccess().getTheKeyword_3()); 
    }

    |
	kw='not' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnarOpAccess().getNotKeyword_4()); 
    }
)
    ;





// Entry rule entryRulePrePrimaryExpr
entryRulePrePrimaryExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrePrimaryExprRule()); }
	 iv_rulePrePrimaryExpr=rulePrePrimaryExpr 
	 { $current=$iv_rulePrePrimaryExpr.current; } 
	 EOF 
;

// Rule PrePrimaryExpr
rulePrePrimaryExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrePrimaryExprAccess().getTerminalExpressionParserRuleCall_0()); 
    }
    this_TerminalExpression_0=ruleTerminalExpression
    { 
        $current = $this_TerminalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrePrimaryExprAccess().getRightMemberRefParserRuleCall_1()); 
    }
    this_RightMemberRef_1=ruleRightMemberRef
    { 
        $current = $this_RightMemberRef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrePrimaryExprAccess().getMemberRefParserRuleCall_2()); 
    }
    this_MemberRef_2=ruleMemberRef
    { 
        $current = $this_MemberRef_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMemberRef
entryRuleMemberRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberRefRule()); }
	 iv_ruleMemberRef=ruleMemberRef 
	 { $current=$iv_ruleMemberRef.current; } 
	 EOF 
;

// Rule MemberRef
ruleMemberRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMemberRefAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMemberRefAccess().getMemberRefPLeftAction_1_0(),
            $current);
    }
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMemberRefAccess().getFullStopKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMemberRefAccess().getRightRightMemberRefParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleRightMemberRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMemberRefRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"RightMemberRef");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_0_2());
    }
)
    |(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryExpressionAccess().getLeftSquareBracketKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getMatrixParserRuleCall_1_1()); 
    }
    this_Matrix_4=ruleMatrix
    { 
        $current = $this_Matrix_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPrimaryExpressionAccess().getRightSquareBracketKeyword_1_2());
    }
)
    |(	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getPrimaryExpressionAccess().getLeftCurlyBracketKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPointParserRuleCall_2_1()); 
    }
    this_Point_7=rulePoint
    { 
        $current = $this_Point_7.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPrimaryExpressionAccess().getRightCurlyBracketKeyword_2_2());
    }
))
;





// Entry rule entryRulePoint
entryRulePoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPointRule()); }
	 iv_rulePoint=rulePoint 
	 { $current=$iv_rulePoint.current; } 
	 EOF 
;

// Rule Point
rulePoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPointAccess().getXExpressionParserRuleCall_0_0()); 
	    }
		lv_x_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointRule());
	        }
       		set(
       			$current, 
       			"x",
        		lv_x_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPointAccess().getCommaKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPointAccess().getYExpressionParserRuleCall_2_0()); 
	    }
		lv_y_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointRule());
	        }
       		set(
       			$current, 
       			"y",
        		lv_y_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMatrix
entryRuleMatrix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMatrixRule()); }
	 iv_ruleMatrix=ruleMatrix 
	 { $current=$iv_ruleMatrix.current; } 
	 EOF 
;

// Rule Matrix
ruleMatrix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMatrixAccess().getMatrixAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getMatrixAccess().getRowsRowParserRuleCall_1_0_0()); 
	    }
		lv_rows_1_0=ruleRow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMatrixRule());
	        }
       		add(
       			$current, 
       			"rows",
        		lv_rows_1_0, 
        		"Row");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMatrixAccess().getSemicolonKeyword_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMatrixAccess().getRowsRowParserRuleCall_1_1_1_0()); 
	    }
		lv_rows_3_0=ruleRow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMatrixRule());
	        }
       		add(
       			$current, 
       			"rows",
        		lv_rows_3_0, 
        		"Row");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleRow
entryRuleRow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRowRule()); }
	 iv_ruleRow=ruleRow 
	 { $current=$iv_ruleRow.current; } 
	 EOF 
;

// Rule Row
ruleRow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRowAccess().getExprsExpressionParserRuleCall_0_0()); 
	    }
		lv_exprs_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRowRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRowAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRowAccess().getExprsExpressionParserRuleCall_1_1_0()); 
	    }
		lv_exprs_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRowRule());
	        }
       		add(
       			$current, 
       			"exprs",
        		lv_exprs_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRightMemberRef
entryRuleRightMemberRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRightMemberRefRule()); }
	 iv_ruleRightMemberRef=ruleRightMemberRef 
	 { $current=$iv_ruleRightMemberRef.current; } 
	 EOF 
;

// Rule RightMemberRef
ruleRightMemberRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRightMemberRefAccess().getAbrstractRefParserRuleCall_0()); 
    }
    this_AbrstractRef_0=ruleAbrstractRef
    { 
        $current = $this_AbrstractRef_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRightMemberRefAccess().getMemberRefRLeftAction_1_0(),
            $current);
    }
)	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRightMemberRefAccess().getFullStopKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRightMemberRefAccess().getRightRightMemberRefParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleRightMemberRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRightMemberRefRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"RightMemberRef");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAbrstractRef
entryRuleAbrstractRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbrstractRefRule()); }
	 iv_ruleAbrstractRef=ruleAbrstractRef 
	 { $current=$iv_ruleAbrstractRef.current; } 
	 EOF 
;

// Rule AbrstractRef
ruleAbrstractRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbrstractRefAccess().getVariableRefParserRuleCall_0()); 
    }
    this_VariableRef_0=ruleVariableRef
    { 
        $current = $this_VariableRef_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAbrstractRefAccess().getFunctionRefFuncAction_1_0_0(),
            $current);
    }
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAbrstractRefAccess().getLeftParenthesisKeyword_1_0_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAbrstractRefAccess().getArgsExpressionParserRuleCall_1_0_2_0_0()); 
	    }
		lv_args_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbrstractRefRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getAbrstractRefAccess().getCommaKeyword_1_0_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbrstractRefAccess().getArgsExpressionParserRuleCall_1_0_2_1_1_0()); 
	    }
		lv_args_5_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbrstractRefRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_5_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAbrstractRefAccess().getRightParenthesisKeyword_1_0_3());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAbrstractRefAccess().getArrayRefArrayAction_1_1_0(),
            $current);
    }
)	otherlv_8='[' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAbrstractRefAccess().getLeftSquareBracketKeyword_1_1_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAbrstractRefAccess().getArgsExpressionParserRuleCall_1_1_2_0_0()); 
	    }
		lv_args_9_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbrstractRefRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_9_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getAbrstractRefAccess().getCommaKeyword_1_1_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAbrstractRefAccess().getArgsExpressionParserRuleCall_1_1_2_1_1_0()); 
	    }
		lv_args_11_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAbrstractRefRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_11_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12=']' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getAbrstractRefAccess().getRightSquareBracketKeyword_1_1_3());
    }
))?)
;





// Entry rule entryRuleVariableRef
entryRuleVariableRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRefRule()); }
	 iv_ruleVariableRef=ruleVariableRef 
	 { $current=$iv_ruleVariableRef.current; } 
	 EOF 
;

// Rule VariableRef
ruleVariableRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getVariableRefAccess().getRefAbstractDefinitionCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	 iv_ruleTerminalExpression=ruleTerminalExpression 
	 { $current=$iv_ruleTerminalExpression.current; } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getIntLiteralAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getTerminalExpressionAccess().getValueINTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getDoubleLiteralAction_1_0(),
            $current);
    }
)(
(
		lv_value_3_0=RULE_DOUBLE
		{
			newLeafNode(lv_value_3_0, grammarAccess.getTerminalExpressionAccess().getValueDOUBLETerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"DOUBLE");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getColorLiteralAction_2_0(),
            $current);
    }
)(
(
		lv_value_5_0=RULE_COLOR
		{
			newLeafNode(lv_value_5_0, grammarAccess.getTerminalExpressionAccess().getValueCOLORTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"COLOR");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getStringLiteralAction_3_0(),
            $current);
    }
)(
(
		lv_value_7_0=RULE_STRING
		{
			newLeafNode(lv_value_7_0, grammarAccess.getTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"STRING");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTerminalExpressionAccess().getBooleanLiteralAction_4_0(),
            $current);
    }
)(
(
		lv_value_9_0=RULE_BOOLEAN
		{
			newLeafNode(lv_value_9_0, grammarAccess.getTerminalExpressionAccess().getValueBOOLEANTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTerminalExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_9_0, 
        		"BOOLEAN");
	    }

)
)))
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





RULE_INT : ('0'|'1'..'9' ('0'..'9')*);

RULE_BOOLEAN : ('true'|'false');

RULE_ID : ('a'..'z'|'A'..'Z'|'_'|'0'..'9')+ ('$' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')+)?;

RULE_COLOR : '#' ('0'..'9'|'A'..'F')+;

RULE_DOUBLE : ('1'..'9' ('0'..'9')* ('.' ('0'..'9')+)? (('E'|'e') ('+'|'-')? ('0'..'9')+)?|'0' ('.' ('0'..'9')+)? (('E'|'e') ('+'|'-')? ('0'..'9')+)?);

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


