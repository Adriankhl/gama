/*
* generated by Xtext
*/

package msi.gama.lang.gaml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class GamlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		
		//Model:
		//	"model" name=ID imports+=Import* / * ('_gaml {' gaml=GamlLangDef '}')?* / statements+=Statement*;
		public ParserRule getRule() { return rule; }

		//"model" name=ID imports+=Import* / * ('_gaml {' gaml=GamlLangDef '}')?* / statements+=Statement*
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		
		//// must be named importURI
		//Import:
		//	"import" importURI=STRING;
		public ParserRule getRule() { return rule; }

		//"import" importURI=STRING
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importURI=STRING
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_0() { return cImportURISTRINGTerminalRuleCall_1_0; }
	}

	public class BuiltInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltIn");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cWriteKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cWarnKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cErrorKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cMatchKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMatch_oneKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMatch_betweenKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCaptureKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cReleaseKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAskKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cSwitchKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cCreateKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cAddKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cRemoveKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cPutKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cSaveKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cSetKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cReturnKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		
		/// **
		// * MetaGrammar: used to parse the tokens introduced automatically in the imports by GAMA (not used anymore)
		// * / //GamlLangDef: (b+=DefBinaryOp | r+=DefReserved | unaries+=DefUnary )+;
		////DefBinaryOp: '_binary &' name=ID'&;';
		////DefReserved: '_reserved &' name=ID'&;';
		////DefUnary: '_unary &'name=ID '&;';
		/// **
		// * Built-in keywords (corresponding to special statements)
		// * / BuiltIn:
		//	"write" | "warn" | "error" | "match" | "match_one" | "match_between" | "capture" | "release" | "ask" | "switch" |
		//	"create" | "add" | "remove" | "put" | "save" | "set" | "return";
		public ParserRule getRule() { return rule; }

		//"write" | "warn" | "error" | "match" | "match_one" | "match_between" | "capture" | "release" | "ask" | "switch" |
		//"create" | "add" | "remove" | "put" | "save" | "set" | "return"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"write"
		public Keyword getWriteKeyword_0() { return cWriteKeyword_0; }

		//"warn"
		public Keyword getWarnKeyword_1() { return cWarnKeyword_1; }

		//"error"
		public Keyword getErrorKeyword_2() { return cErrorKeyword_2; }

		//"match"
		public Keyword getMatchKeyword_3() { return cMatchKeyword_3; }

		//"match_one"
		public Keyword getMatch_oneKeyword_4() { return cMatch_oneKeyword_4; }

		//"match_between"
		public Keyword getMatch_betweenKeyword_5() { return cMatch_betweenKeyword_5; }

		//"capture"
		public Keyword getCaptureKeyword_6() { return cCaptureKeyword_6; }

		//"release"
		public Keyword getReleaseKeyword_7() { return cReleaseKeyword_7; }

		//"ask"
		public Keyword getAskKeyword_8() { return cAskKeyword_8; }

		//"switch"
		public Keyword getSwitchKeyword_9() { return cSwitchKeyword_9; }

		//"create"
		public Keyword getCreateKeyword_10() { return cCreateKeyword_10; }

		//"add"
		public Keyword getAddKeyword_11() { return cAddKeyword_11; }

		//"remove"
		public Keyword getRemoveKeyword_12() { return cRemoveKeyword_12; }

		//"put"
		public Keyword getPutKeyword_13() { return cPutKeyword_13; }

		//"save"
		public Keyword getSaveKeyword_14() { return cSaveKeyword_14; }

		//"set"
		public Keyword getSetKeyword_15() { return cSetKeyword_15; }

		//"return"
		public Keyword getReturnKeyword_16() { return cReturnKeyword_16; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfEvalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassicStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDefinitionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// **
		// * Statements (i.e. commands in the GAML descriptions).
		// * / Statement:
		//	IfEval | ClassicStatement | Definition;
		public ParserRule getRule() { return rule; }

		//IfEval | ClassicStatement | Definition
		public Alternatives getAlternatives() { return cAlternatives; }

		//IfEval
		public RuleCall getIfEvalParserRuleCall_0() { return cIfEvalParserRuleCall_0; }

		//ClassicStatement
		public RuleCall getClassicStatementParserRuleCall_1() { return cClassicStatementParserRuleCall_1; }

		//Definition
		public RuleCall getDefinitionParserRuleCall_2() { return cDefinitionParserRuleCall_2; }
	}

	public class ClassicStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassicStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyBuiltInParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefGamlFacetRefParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Assignment cFacetsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFacetsFacetExprParserRuleCall_3_0 = (RuleCall)cFacetsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cBlockAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_4_0_0 = (RuleCall)cBlockAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//ClassicStatement returns Statement:
		//	key=BuiltIn ref=GamlFacetRef? expr=Expression facets+=FacetExpr* (block=Block | ";");
		public ParserRule getRule() { return rule; }

		//key=BuiltIn ref=GamlFacetRef? expr=Expression facets+=FacetExpr* (block=Block | ";")
		public Group getGroup() { return cGroup; }

		//key=BuiltIn
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//BuiltIn
		public RuleCall getKeyBuiltInParserRuleCall_0_0() { return cKeyBuiltInParserRuleCall_0_0; }

		//ref=GamlFacetRef?
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//GamlFacetRef
		public RuleCall getRefGamlFacetRefParserRuleCall_1_0() { return cRefGamlFacetRefParserRuleCall_1_0; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }

		//facets+=FacetExpr*
		public Assignment getFacetsAssignment_3() { return cFacetsAssignment_3; }

		//FacetExpr
		public RuleCall getFacetsFacetExprParserRuleCall_3_0() { return cFacetsFacetExprParserRuleCall_3_0; }

		//block=Block | ";"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//block=Block
		public Assignment getBlockAssignment_4_0() { return cBlockAssignment_4_0; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0_0() { return cBlockBlockParserRuleCall_4_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}

	public class IfEvalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfEval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cKeyIfKeyword_0_0 = (Keyword)cKeyAssignment_0.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefGamlFacetRefParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElseAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Alternatives cElseAlternatives_4_1_0 = (Alternatives)cElseAssignment_4_1.eContents().get(0);
		private final RuleCall cElseStatementParserRuleCall_4_1_0_0 = (RuleCall)cElseAlternatives_4_1_0.eContents().get(0);
		private final RuleCall cElseBlockParserRuleCall_4_1_0_1 = (RuleCall)cElseAlternatives_4_1_0.eContents().get(1);
		
		//IfEval returns Statement:
		//	key="if" ref=GamlFacetRef? expr=Expression block=Block ("else" else=(Statement | Block))?;
		public ParserRule getRule() { return rule; }

		//key="if" ref=GamlFacetRef? expr=Expression block=Block ("else" else=(Statement | Block))?
		public Group getGroup() { return cGroup; }

		//key="if"
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//"if"
		public Keyword getKeyIfKeyword_0_0() { return cKeyIfKeyword_0_0; }

		//ref=GamlFacetRef?
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//GamlFacetRef
		public RuleCall getRefGamlFacetRefParserRuleCall_1_0() { return cRefGamlFacetRefParserRuleCall_1_0; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }

		//block=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }

		//(=> "else" else=(Statement | Block))?
		public Group getGroup_4() { return cGroup_4; }

		//=> "else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }

		//else=(Statement | Block)
		public Assignment getElseAssignment_4_1() { return cElseAssignment_4_1; }

		//Statement | Block
		public Alternatives getElseAlternatives_4_1_0() { return cElseAlternatives_4_1_0; }

		//Statement
		public RuleCall getElseStatementParserRuleCall_4_1_0_0() { return cElseStatementParserRuleCall_4_1_0_0; }

		//Block
		public RuleCall getElseBlockParserRuleCall_4_1_0_1() { return cElseBlockParserRuleCall_4_1_0_1; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final RuleCall cNameBuiltInParserRuleCall_1_0_2 = (RuleCall)cNameAlternatives_1_0.eContents().get(2);
		private final Assignment cFacetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFacetsFacetExprParserRuleCall_2_0 = (RuleCall)cFacetsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cBlockAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_3_0_0 = (RuleCall)cBlockAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		
		//Definition:
		//	key=ID name=(ID | STRING | BuiltIn)? facets+=FacetExpr* (block=Block | ";");
		public ParserRule getRule() { return rule; }

		//key=ID name=(ID | STRING | BuiltIn)? facets+=FacetExpr* (block=Block | ";")
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//name=(ID | STRING | BuiltIn)?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID | STRING | BuiltIn
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_1() { return cNameSTRINGTerminalRuleCall_1_0_1; }

		//BuiltIn
		public RuleCall getNameBuiltInParserRuleCall_1_0_2() { return cNameBuiltInParserRuleCall_1_0_2; }

		//facets+=FacetExpr*
		public Assignment getFacetsAssignment_2() { return cFacetsAssignment_2; }

		//FacetExpr
		public RuleCall getFacetsFacetExprParserRuleCall_2_0() { return cFacetsFacetExprParserRuleCall_2_0; }

		//block=Block | ";"
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//block=Block
		public Assignment getBlockAssignment_3_0() { return cBlockAssignment_3_0; }

		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0_0() { return cBlockBlockParserRuleCall_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}

	public class FacetRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FacetRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGamlFacetRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionGamlFacetRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// **
		// * Facets
		// * / FacetRef:
		//	GamlFacetRef | FunctionGamlFacetRef;
		public ParserRule getRule() { return rule; }

		//GamlFacetRef | FunctionGamlFacetRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//GamlFacetRef
		public RuleCall getGamlFacetRefParserRuleCall_0() { return cGamlFacetRefParserRuleCall_0; }

		//FunctionGamlFacetRef
		public RuleCall getFunctionGamlFacetRefParserRuleCall_1() { return cFunctionGamlFacetRefParserRuleCall_1; }
	}

	public class GamlFacetRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GamlFacetRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRefAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRefIDTerminalRuleCall_0_0_0 = (RuleCall)cRefAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cRefLessThanSignHyphenMinusKeyword_1_0 = (Keyword)cRefAssignment_1.eContents().get(0);
		
		//GamlFacetRef:
		//	ref=ID ":" | ref="<-";
		public ParserRule getRule() { return rule; }

		//ref=ID ":" | ref="<-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ref=ID ":"
		public Group getGroup_0() { return cGroup_0; }

		//ref=ID
		public Assignment getRefAssignment_0_0() { return cRefAssignment_0_0; }

		//ID
		public RuleCall getRefIDTerminalRuleCall_0_0_0() { return cRefIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//ref="<-"
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//"<-"
		public Keyword getRefLessThanSignHyphenMinusKeyword_1_0() { return cRefLessThanSignHyphenMinusKeyword_1_0; }
	}

	public class FunctionGamlFacetRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionGamlFacetRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cRefAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cRefFunctionKeyword_0_0_0 = (Keyword)cRefAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cRefHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cRefAssignment_1.eContents().get(0);
		
		//FunctionGamlFacetRef:
		//	ref="function" ":" | ref="->";
		public ParserRule getRule() { return rule; }

		//ref="function" ":" | ref="->"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ref="function" ":"
		public Group getGroup_0() { return cGroup_0; }

		//ref="function"
		public Assignment getRefAssignment_0_0() { return cRefAssignment_0_0; }

		//"function"
		public Keyword getRefFunctionKeyword_0_0_0() { return cRefFunctionKeyword_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//ref="->"
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//"->"
		public Keyword getRefHyphenMinusGreaterThanSignKeyword_1_0() { return cRefHyphenMinusGreaterThanSignKeyword_1_0; }
	}

	public class FacetExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FacetExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionFacetExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefinitionFacetExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cKeyAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cKeyGamlFacetRefParserRuleCall_2_0_0 = (RuleCall)cKeyAssignment_2_0.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		
		//FacetExpr:
		//	FunctionFacetExpr | DefinitionFacetExpr | key=GamlFacetRef expr=Expression;
		public ParserRule getRule() { return rule; }

		//FunctionFacetExpr | DefinitionFacetExpr | key=GamlFacetRef expr=Expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//FunctionFacetExpr
		public RuleCall getFunctionFacetExprParserRuleCall_0() { return cFunctionFacetExprParserRuleCall_0; }

		//DefinitionFacetExpr
		public RuleCall getDefinitionFacetExprParserRuleCall_1() { return cDefinitionFacetExprParserRuleCall_1; }

		//key=GamlFacetRef expr=Expression
		public Group getGroup_2() { return cGroup_2; }

		//key=GamlFacetRef
		public Assignment getKeyAssignment_2_0() { return cKeyAssignment_2_0; }

		//GamlFacetRef
		public RuleCall getKeyGamlFacetRefParserRuleCall_2_0_0() { return cKeyGamlFacetRefParserRuleCall_2_0_0; }

		//expr=Expression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_1_0() { return cExprExpressionParserRuleCall_2_1_0; }
	}

	public class DefinitionFacetExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefinitionFacetExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReturnsFacetExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNameFacetExprParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cActionFacetExprParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DefinitionFacetExpr:
		//	ReturnsFacetExpr | NameFacetExpr | ActionFacetExpr;
		public ParserRule getRule() { return rule; }

		//ReturnsFacetExpr | NameFacetExpr | ActionFacetExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReturnsFacetExpr
		public RuleCall getReturnsFacetExprParserRuleCall_0() { return cReturnsFacetExprParserRuleCall_0; }

		//NameFacetExpr
		public RuleCall getNameFacetExprParserRuleCall_1() { return cNameFacetExprParserRuleCall_1; }

		//ActionFacetExpr
		public RuleCall getActionFacetExprParserRuleCall_2() { return cActionFacetExprParserRuleCall_2; }
	}

	public class NameFacetExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameFacetExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final RuleCall cNameBuiltInParserRuleCall_1_0_2 = (RuleCall)cNameAlternatives_1_0.eContents().get(2);
		
		//NameFacetExpr:
		//	"name:" name=(ID | STRING | BuiltIn);
		public ParserRule getRule() { return rule; }

		//"name:" name=(ID | STRING | BuiltIn)
		public Group getGroup() { return cGroup; }

		//"name:"
		public Keyword getNameKeyword_0() { return cNameKeyword_0; }

		//name=(ID | STRING | BuiltIn)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID | STRING | BuiltIn
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_1() { return cNameSTRINGTerminalRuleCall_1_0_1; }

		//BuiltIn
		public RuleCall getNameBuiltInParserRuleCall_1_0_2() { return cNameBuiltInParserRuleCall_1_0_2; }
	}

	public class ReturnsFacetExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReturnsFacetExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ReturnsFacetExpr:
		//	"returns:" name=ID;
		public ParserRule getRule() { return rule; }

		//"returns:" name=ID
		public Group getGroup() { return cGroup; }

		//"returns:"
		public Keyword getReturnsKeyword_0() { return cReturnsKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ActionFacetExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionFacetExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNameAlternatives_1_0 = (Alternatives)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAlternatives_1_0.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameAlternatives_1_0.eContents().get(1);
		private final RuleCall cNameBuiltInParserRuleCall_1_0_2 = (RuleCall)cNameAlternatives_1_0.eContents().get(2);
		
		//ActionFacetExpr:
		//	"action:" name=(ID | STRING | BuiltIn);
		public ParserRule getRule() { return rule; }

		//"action:" name=(ID | STRING | BuiltIn)
		public Group getGroup() { return cGroup; }

		//"action:"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }

		//name=(ID | STRING | BuiltIn)
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID | STRING | BuiltIn
		public Alternatives getNameAlternatives_1_0() { return cNameAlternatives_1_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0_1() { return cNameSTRINGTerminalRuleCall_1_0_1; }

		//BuiltIn
		public RuleCall getNameBuiltInParserRuleCall_1_0_2() { return cNameBuiltInParserRuleCall_1_0_2; }
	}

	public class FunctionFacetExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionFacetExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyFunctionGamlFacetRefParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Introduce "closures" ? 
		//FunctionFacetExpr:
		//	key=FunctionGamlFacetRef "{" expr=Expression "}";
		public ParserRule getRule() { return rule; }

		//key=FunctionGamlFacetRef "{" expr=Expression "}"
		public Group getGroup() { return cGroup; }

		//key=FunctionGamlFacetRef
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//FunctionGamlFacetRef
		public RuleCall getKeyFunctionGamlFacetRefParserRuleCall_0_0() { return cKeyFunctionGamlFacetRefParserRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// **
		// * Blocks. Just an ordered list of statements inside curly brackets
		// * / Block:
		//	{Block} "{" statements+=Statement* "}";
		public ParserRule getRule() { return rule; }

		//{Block} "{" statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cTernExpParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// **
		// * Expressions
		// * / Expression:
		//	TernExp;
		public ParserRule getRule() { return rule; }

		//TernExp
		public RuleCall getTernExpParserRuleCall() { return cTernExpParserRuleCall; }
	}

	public class TernExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TernExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOrExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTernExpLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpQuestionMarkKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightOrExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cIfFalseAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cIfFalseOrExpParserRuleCall_1_4_0 = (RuleCall)cIfFalseAssignment_1_4.eContents().get(0);
		
		//TernExp returns Expression:
		//	OrExp ({TernExp.left=current} op="?" right=OrExp ":" ifFalse=OrExp)?;
		public ParserRule getRule() { return rule; }

		//OrExp ({TernExp.left=current} op="?" right=OrExp ":" ifFalse=OrExp)?
		public Group getGroup() { return cGroup; }

		//OrExp
		public RuleCall getOrExpParserRuleCall_0() { return cOrExpParserRuleCall_0; }

		//({TernExp.left=current} op="?" right=OrExp ":" ifFalse=OrExp)?
		public Group getGroup_1() { return cGroup_1; }

		//{TernExp.left=current}
		public Action getTernExpLeftAction_1_0() { return cTernExpLeftAction_1_0; }

		//op="?"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"?"
		public Keyword getOpQuestionMarkKeyword_1_1_0() { return cOpQuestionMarkKeyword_1_1_0; }

		//right=OrExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//OrExp
		public RuleCall getRightOrExpParserRuleCall_1_2_0() { return cRightOrExpParserRuleCall_1_2_0; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//ifFalse=OrExp
		public Assignment getIfFalseAssignment_1_4() { return cIfFalseAssignment_1_4; }

		//OrExp
		public RuleCall getIfFalseOrExpParserRuleCall_1_4_0() { return cIfFalseOrExpParserRuleCall_1_4_0; }
	}

	public class OrExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpOrKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//OrExp returns Expression:
		//	AndExp ({Expression.left=current} op="or" right=AndExp)*;
		public ParserRule getRule() { return rule; }

		//AndExp ({Expression.left=current} op="or" right=AndExp)*
		public Group getGroup() { return cGroup; }

		//AndExp
		public RuleCall getAndExpParserRuleCall_0() { return cAndExpParserRuleCall_0; }

		//({Expression.left=current} op="or" right=AndExp)*
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }

		//op="or"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"or"
		public Keyword getOpOrKeyword_1_1_0() { return cOpOrKeyword_1_1_0; }

		//right=AndExp
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndExp
		public RuleCall getRightAndExpParserRuleCall_1_2_0() { return cRightAndExpParserRuleCall_1_2_0; }
	}

	public class AndExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelationalParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAndKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightRelationalParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExp returns Expression:
		//	Relational ({Expression.left=current} op="and" right=Relational)*;
		public ParserRule getRule() { return rule; }

		//Relational ({Expression.left=current} op="and" right=Relational)*
		public Group getGroup() { return cGroup; }

		//Relational
		public RuleCall getRelationalParserRuleCall_0() { return cRelationalParserRuleCall_0; }

		//({Expression.left=current} op="and" right=Relational)*
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }

		//op="and"
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"and"
		public Keyword getOpAndKeyword_1_1_0() { return cOpAndKeyword_1_1_0; }

		//right=Relational
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Relational
		public RuleCall getRightRelationalParserRuleCall_1_2_0() { return cRightRelationalParserRuleCall_1_2_0; }
	}

	public class RelationalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relational");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPairExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_0_1_0_3 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(3);
		private final Keyword cOpLessThanSignKeyword_1_0_1_0_4 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(4);
		private final Keyword cOpGreaterThanSignKeyword_1_0_1_0_5 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(5);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPairExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Relational returns Expression:
		//	PairExpr (({Expression.left=current} op=("!=" | "=" | ">=" | "<=" | "<" | ">")) right=PairExpr)?;
		public ParserRule getRule() { return rule; }

		//PairExpr (({Expression.left=current} op=("!=" | "=" | ">=" | "<=" | "<" | ">")) right=PairExpr)?
		public Group getGroup() { return cGroup; }

		//PairExpr
		public RuleCall getPairExprParserRuleCall_0() { return cPairExprParserRuleCall_0; }

		//(({Expression.left=current} op=("!=" | "=" | ">=" | "<=" | "<" | ">")) right=PairExpr)?
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current} op=("!=" | "=" | ">=" | "<=" | "<" | ">")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0_0() { return cExpressionLeftAction_1_0_0; }

		//op=("!=" | "=" | ">=" | "<=" | "<" | ">")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"!=" | "=" | ">=" | "<=" | "<" | ">"
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_0_1_0_0() { return cOpExclamationMarkEqualsSignKeyword_1_0_1_0_0; }

		//"="
		public Keyword getOpEqualsSignKeyword_1_0_1_0_1() { return cOpEqualsSignKeyword_1_0_1_0_1; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2() { return cOpGreaterThanSignEqualsSignKeyword_1_0_1_0_2; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_0_1_0_3() { return cOpLessThanSignEqualsSignKeyword_1_0_1_0_3; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_0_1_0_4() { return cOpLessThanSignKeyword_1_0_1_0_4; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_0_1_0_5() { return cOpGreaterThanSignKeyword_1_0_1_0_5; }

		//right=PairExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PairExpr
		public RuleCall getRightPairExprParserRuleCall_1_1_0() { return cRightPairExprParserRuleCall_1_1_0; }
	}

	public class ArgPairExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgPairExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArgPairExprAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cArgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgIDTerminalRuleCall_1_0 = (RuleCall)cArgAssignment_1.eContents().get(0);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cOpColonColonKeyword_2_0 = (Keyword)cOpAssignment_2.eContents().get(0);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightAdditionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//ArgPairExpr returns PairExpr:
		//	{ArgPairExpr} arg=ID op="::" right=Addition;
		public ParserRule getRule() { return rule; }

		//{ArgPairExpr} arg=ID op="::" right=Addition
		public Group getGroup() { return cGroup; }

		//{ArgPairExpr}
		public Action getArgPairExprAction_0() { return cArgPairExprAction_0; }

		//arg=ID
		public Assignment getArgAssignment_1() { return cArgAssignment_1; }

		//ID
		public RuleCall getArgIDTerminalRuleCall_1_0() { return cArgIDTerminalRuleCall_1_0; }

		//op="::"
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }

		//"::"
		public Keyword getOpColonColonKeyword_2_0() { return cOpColonColonKeyword_2_0; }

		//right=Addition
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_3_0() { return cRightAdditionParserRuleCall_3_0; }
	}

	public class PairExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PairExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArgPairExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Action cPairExprLeftAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final Keyword cOpColonColonKeyword_1_1_0_1_0 = (Keyword)cOpAssignment_1_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightAdditionParserRuleCall_1_1_1_0 = (RuleCall)cRightAssignment_1_1_1.eContents().get(0);
		
		//PairExpr returns Expression:
		//	ArgPairExpr | Addition (({PairExpr.left=current} op="::") right=Addition)?;
		public ParserRule getRule() { return rule; }

		//=> ArgPairExpr | Addition (({PairExpr.left=current} op="::") right=Addition)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> ArgPairExpr
		public RuleCall getArgPairExprParserRuleCall_0() { return cArgPairExprParserRuleCall_0; }

		//Addition (({PairExpr.left=current} op="::") right=Addition)?
		public Group getGroup_1() { return cGroup_1; }

		//Addition
		public RuleCall getAdditionParserRuleCall_1_0() { return cAdditionParserRuleCall_1_0; }

		//(({PairExpr.left=current} op="::") right=Addition)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{PairExpr.left=current} op="::"
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{PairExpr.left=current}
		public Action getPairExprLeftAction_1_1_0_0() { return cPairExprLeftAction_1_1_0_0; }

		//op="::"
		public Assignment getOpAssignment_1_1_0_1() { return cOpAssignment_1_1_0_1; }

		//"::"
		public Keyword getOpColonColonKeyword_1_1_0_1_0() { return cOpColonColonKeyword_1_1_0_1_0; }

		//right=Addition
		public Assignment getRightAssignment_1_1_1() { return cRightAssignment_1_1_1; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_1_1_0() { return cRightAdditionParserRuleCall_1_1_1_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication (({Expression.left=current} op=("+" | "-")) right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication (({Expression.left=current} op=("+" | "-")) right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Expression.left=current} op=("+" | "-")) right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current} op=("+" | "-")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0_0() { return cExpressionLeftAction_1_0_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_0_1_0_0() { return cOpPlusSignKeyword_1_0_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_0_1_0_1() { return cOpHyphenMinusKeyword_1_0_1_0_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGamlBinaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cExpressionLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cOpAlternatives_1_0_1_0 = (Alternatives)cOpAssignment_1_0_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_0_1_0_0 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_0_1_0_1 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cOpCircumflexAccentKeyword_1_0_1_0_2 = (Keyword)cOpAlternatives_1_0_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightGamlBinaryExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns Expression:
		//	GamlBinaryExpr (({Expression.left=current} op=("*" | "/" | "^")) right=GamlBinaryExpr)*;
		public ParserRule getRule() { return rule; }

		//GamlBinaryExpr (({Expression.left=current} op=("*" | "/" | "^")) right=GamlBinaryExpr)*
		public Group getGroup() { return cGroup; }

		//GamlBinaryExpr
		public RuleCall getGamlBinaryExprParserRuleCall_0() { return cGamlBinaryExprParserRuleCall_0; }

		//(({Expression.left=current} op=("*" | "/" | "^")) right=GamlBinaryExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//{Expression.left=current} op=("*" | "/" | "^")
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0_0() { return cExpressionLeftAction_1_0_0; }

		//op=("*" | "/" | "^")
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"*" | "/" | "^"
		public Alternatives getOpAlternatives_1_0_1_0() { return cOpAlternatives_1_0_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_0_1_0_0() { return cOpAsteriskKeyword_1_0_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_0_1_0_1() { return cOpSolidusKeyword_1_0_1_0_1; }

		//"^"
		public Keyword getOpCircumflexAccentKeyword_1_0_1_0_2() { return cOpCircumflexAccentKeyword_1_0_1_0_2; }

		//right=GamlBinaryExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//GamlBinaryExpr
		public RuleCall getRightGamlBinaryExprParserRuleCall_1_1_0() { return cRightGamlBinaryExprParserRuleCall_1_1_0; }
	}

	public class GamlBinaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GamlBinaryExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGamlUnitExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cGamlBinaryExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOpIDTerminalRuleCall_1_0_1_0 = (RuleCall)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightGamlUnitExprParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//GamlBinaryExpr returns Expression:
		//	GamlUnitExpr (({GamlBinaryExpr.left=current} op=ID) right=GamlUnitExpr)*;
		public ParserRule getRule() { return rule; }

		//GamlUnitExpr (({GamlBinaryExpr.left=current} op=ID) right=GamlUnitExpr)*
		public Group getGroup() { return cGroup; }

		//GamlUnitExpr
		public RuleCall getGamlUnitExprParserRuleCall_0() { return cGamlUnitExprParserRuleCall_0; }

		//(({GamlBinaryExpr.left=current} op=ID) right=GamlUnitExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//{GamlBinaryExpr.left=current} op=ID
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{GamlBinaryExpr.left=current}
		public Action getGamlBinaryExprLeftAction_1_0_0() { return cGamlBinaryExprLeftAction_1_0_0; }

		//op=ID
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//ID
		public RuleCall getOpIDTerminalRuleCall_1_0_1_0() { return cOpIDTerminalRuleCall_1_0_1_0; }

		//right=GamlUnitExpr
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//GamlUnitExpr
		public RuleCall getRightGamlUnitExprParserRuleCall_1_1_0() { return cRightGamlUnitExprParserRuleCall_1_1_0; }
	}

	public class GamlUnitExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GamlUnitExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGamlUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cGamlUnitExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpNumberSignKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightUnitNameParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//GamlUnitExpr returns Expression:
		//	GamlUnaryExpr (({GamlUnitExpr.left=current} op="#") right=UnitName)?;
		public ParserRule getRule() { return rule; }

		//GamlUnaryExpr (({GamlUnitExpr.left=current} op="#") right=UnitName)?
		public Group getGroup() { return cGroup; }

		//GamlUnaryExpr
		public RuleCall getGamlUnaryExprParserRuleCall_0() { return cGamlUnaryExprParserRuleCall_0; }

		//(({GamlUnitExpr.left=current} op="#") right=UnitName)?
		public Group getGroup_1() { return cGroup_1; }

		//{GamlUnitExpr.left=current} op="#"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{GamlUnitExpr.left=current}
		public Action getGamlUnitExprLeftAction_1_0_0() { return cGamlUnitExprLeftAction_1_0_0; }

		//op="#"
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }

		//"#"
		public Keyword getOpNumberSignKeyword_1_0_1_0() { return cOpNumberSignKeyword_1_0_1_0; }

		//right=UnitName
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//UnitName
		public RuleCall getRightUnitNameParserRuleCall_1_1_0() { return cRightUnitNameParserRuleCall_1_1_0; }
	}

	public class GamlUnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GamlUnaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrePrimaryExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cGamlUnaryExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cGamlUnaryExprLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_1_0 = (Alternatives)cOpAssignment_1_1_1.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_1_0_0 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkKeyword_1_1_1_0_1 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(1);
		private final Keyword cOpMyKeyword_1_1_1_0_2 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(2);
		private final Keyword cOpTheKeyword_1_1_1_0_3 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(3);
		private final Keyword cOpNotKeyword_1_1_1_0_4 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(4);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightGamlUnaryExprParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//GamlUnaryExpr returns Expression:
		//	PrePrimaryExpr | {GamlUnaryExpr} ({GamlUnaryExpr.left=current} op=("-" | "!" | "my" | "the" | "not")
		//	right=GamlUnaryExpr);
		public ParserRule getRule() { return rule; }

		//PrePrimaryExpr | {GamlUnaryExpr} ({GamlUnaryExpr.left=current} op=("-" | "!" | "my" | "the" | "not")
		//right=GamlUnaryExpr)
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrePrimaryExpr
		public RuleCall getPrePrimaryExprParserRuleCall_0() { return cPrePrimaryExprParserRuleCall_0; }

		//{GamlUnaryExpr} ({GamlUnaryExpr.left=current} op=("-" | "!" | "my" | "the" | "not") right=GamlUnaryExpr)
		public Group getGroup_1() { return cGroup_1; }

		//{GamlUnaryExpr}
		public Action getGamlUnaryExprAction_1_0() { return cGamlUnaryExprAction_1_0; }

		//{GamlUnaryExpr.left=current} op=("-" | "!" | "my" | "the" | "not") right=GamlUnaryExpr
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{GamlUnaryExpr.left=current}
		public Action getGamlUnaryExprLeftAction_1_1_0() { return cGamlUnaryExprLeftAction_1_1_0; }

		//op=("-" | "!" | "my" | "the" | "not")
		public Assignment getOpAssignment_1_1_1() { return cOpAssignment_1_1_1; }

		//"-" | "!" | "my" | "the" | "not"
		public Alternatives getOpAlternatives_1_1_1_0() { return cOpAlternatives_1_1_1_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_1_1_0_0() { return cOpHyphenMinusKeyword_1_1_1_0_0; }

		//"!"
		public Keyword getOpExclamationMarkKeyword_1_1_1_0_1() { return cOpExclamationMarkKeyword_1_1_1_0_1; }

		//"my"
		public Keyword getOpMyKeyword_1_1_1_0_2() { return cOpMyKeyword_1_1_1_0_2; }

		//"the"
		public Keyword getOpTheKeyword_1_1_1_0_3() { return cOpTheKeyword_1_1_1_0_3; }

		//"not"
		public Keyword getOpNotKeyword_1_1_1_0_4() { return cOpNotKeyword_1_1_1_0_4; }

		//right=GamlUnaryExpr
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//GamlUnaryExpr
		public RuleCall getRightGamlUnaryExprParserRuleCall_1_1_2_0() { return cRightGamlUnaryExprParserRuleCall_1_1_2_0; }
	}

	public class PrePrimaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrePrimaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMemberRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrePrimaryExpr returns Expression:
		//	TerminalExpression | MemberRef;
		public ParserRule getRule() { return rule; }

		//TerminalExpression | MemberRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }

		//MemberRef
		public RuleCall getMemberRefParserRuleCall_1() { return cMemberRefParserRuleCall_1; }
	}

	public class MemberRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMemberRefLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpFullStopKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightVariableRefParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MemberRef returns Expression:
		//	PrimaryExpression ({MemberRef.left=current} op="." right=VariableRef)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression ({MemberRef.left=current} op="." right=VariableRef)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//({MemberRef.left=current} op="." right=VariableRef)*
		public Group getGroup_1() { return cGroup_1; }

		//{MemberRef.left=current}
		public Action getMemberRefLeftAction_1_0() { return cMemberRefLeftAction_1_0; }

		//op="."
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"."
		public Keyword getOpFullStopKeyword_1_1_0() { return cOpFullStopKeyword_1_1_0; }

		//right=VariableRef
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//VariableRef
		public RuleCall getRightVariableRefParserRuleCall_1_2_0() { return cRightVariableRefParserRuleCall_1_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAbstractRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Action cArrayAction_2_1 = (Action)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cExprsAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cExprsExpressionParserRuleCall_2_2_0_0 = (RuleCall)cExprsAssignment_2_2_0.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_1_0 = (Keyword)cGroup_2_2_1.eContents().get(0);
		private final Assignment cExprsAssignment_2_2_1_1 = (Assignment)cGroup_2_2_1.eContents().get(1);
		private final RuleCall cExprsExpressionParserRuleCall_2_2_1_1_0 = (RuleCall)cExprsAssignment_2_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Action cPointAction_3_1 = (Action)cGroup_3.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Assignment cLeftAssignment_3_2_0 = (Assignment)cGroup_3_2.eContents().get(0);
		private final RuleCall cLeftExpressionParserRuleCall_3_2_0_0 = (RuleCall)cLeftAssignment_3_2_0.eContents().get(0);
		private final Assignment cOpAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final Keyword cOpCommaKeyword_3_2_1_0 = (Keyword)cOpAssignment_3_2_1.eContents().get(0);
		private final Assignment cRightAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_3_2_2_0 = (RuleCall)cRightAssignment_3_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//PrimaryExpression returns Expression:
		//	AbstractRef | "(" Expression ")" | "[" {Array} (exprs+=Expression ("," exprs+=Expression)*)? "]" | "{" {Point}
		//	(left=Expression op="," right=Expression) "}";
		public ParserRule getRule() { return rule; }

		//AbstractRef | "(" Expression ")" | "[" {Array} (exprs+=Expression ("," exprs+=Expression)*)? "]" | "{" {Point}
		//(left=Expression op="," right=Expression) "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//AbstractRef
		public RuleCall getAbstractRefParserRuleCall_0() { return cAbstractRefParserRuleCall_0; }

		//"(" Expression ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1_1() { return cExpressionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//"[" {Array} (exprs+=Expression ("," exprs+=Expression)*)? "]"
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//{Array}
		public Action getArrayAction_2_1() { return cArrayAction_2_1; }

		//(exprs+=Expression ("," exprs+=Expression)*)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//exprs+=Expression
		public Assignment getExprsAssignment_2_2_0() { return cExprsAssignment_2_2_0; }

		//Expression
		public RuleCall getExprsExpressionParserRuleCall_2_2_0_0() { return cExprsExpressionParserRuleCall_2_2_0_0; }

		//("," exprs+=Expression)*
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }

		//","
		public Keyword getCommaKeyword_2_2_1_0() { return cCommaKeyword_2_2_1_0; }

		//exprs+=Expression
		public Assignment getExprsAssignment_2_2_1_1() { return cExprsAssignment_2_2_1_1; }

		//Expression
		public RuleCall getExprsExpressionParserRuleCall_2_2_1_1_0() { return cExprsExpressionParserRuleCall_2_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }

		//"{" {Point} (left=Expression op="," right=Expression) "}"
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//{Point}
		public Action getPointAction_3_1() { return cPointAction_3_1; }

		//left=Expression op="," right=Expression
		public Group getGroup_3_2() { return cGroup_3_2; }

		//left=Expression
		public Assignment getLeftAssignment_3_2_0() { return cLeftAssignment_3_2_0; }

		//Expression
		public RuleCall getLeftExpressionParserRuleCall_3_2_0_0() { return cLeftExpressionParserRuleCall_3_2_0_0; }

		//op=","
		public Assignment getOpAssignment_3_2_1() { return cOpAssignment_3_2_1; }

		//","
		public Keyword getOpCommaKeyword_3_2_1_0() { return cOpCommaKeyword_3_2_1_0; }

		//right=Expression
		public Assignment getRightAssignment_3_2_2() { return cRightAssignment_3_2_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_2_2_0() { return cRightExpressionParserRuleCall_3_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class AbstractRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractRef:
		//	VariableRef | Function;
		public ParserRule getRule() { return rule; }

		//VariableRef | Function
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableRef
		public RuleCall getVariableRefParserRuleCall_0() { return cVariableRefParserRuleCall_0; }

		//Function
		public RuleCall getFunctionParserRuleCall_1() { return cFunctionParserRuleCall_1; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpIDTerminalRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cArgsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cArgsExpressionParserRuleCall_1_2_0 = (RuleCall)cArgsAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cArgsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_1_3_1_0 = (RuleCall)cArgsAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Function:
		//	{Function} (op=ID "(" args+=Expression ("," args+=Expression)* ")");
		public ParserRule getRule() { return rule; }

		//{Function} (op=ID "(" args+=Expression ("," args+=Expression)* ")")
		public Group getGroup() { return cGroup; }

		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }

		//op=ID "(" args+=Expression ("," args+=Expression)* ")"
		public Group getGroup_1() { return cGroup_1; }

		//op=ID
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//ID
		public RuleCall getOpIDTerminalRuleCall_1_0_0() { return cOpIDTerminalRuleCall_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//args+=Expression
		public Assignment getArgsAssignment_1_2() { return cArgsAssignment_1_2; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_2_0() { return cArgsExpressionParserRuleCall_1_2_0; }

		//("," args+=Expression)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//args+=Expression
		public Assignment getArgsAssignment_1_3_1() { return cArgsAssignment_1_3_1; }

		//Expression
		public RuleCall getArgsExpressionParserRuleCall_1_3_1_0() { return cArgsExpressionParserRuleCall_1_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class UnitNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnitName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnitNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpIDTerminalRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		
		/// **
		// * Cross-references to variables/operators/units
		// * / UnitName returns Expression:
		//	{UnitName} op=ID;
		public ParserRule getRule() { return rule; }

		//{UnitName} op=ID
		public Group getGroup() { return cGroup; }

		//{UnitName}
		public Action getUnitNameAction_0() { return cUnitNameAction_0; }

		//op=ID
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//ID
		public RuleCall getOpIDTerminalRuleCall_1_0() { return cOpIDTerminalRuleCall_1_0; }
	}

	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefGamlVarRefCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefGamlVarRefIDTerminalRuleCall_1_0_1 = (RuleCall)cRefGamlVarRefCrossReference_1_0.eContents().get(1);
		
		//VariableRef:
		//	{VariableRef} ref=[GamlVarRef];
		public ParserRule getRule() { return rule; }

		//{VariableRef} ref=[GamlVarRef]
		public Group getGroup() { return cGroup; }

		//{VariableRef}
		public Action getVariableRefAction_0() { return cVariableRefAction_0; }

		//ref=[GamlVarRef]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[GamlVarRef]
		public CrossReference getRefGamlVarRefCrossReference_1_0() { return cRefGamlVarRefCrossReference_1_0; }

		//ID
		public RuleCall getRefGamlVarRefIDTerminalRuleCall_1_0_1() { return cRefGamlVarRefIDTerminalRuleCall_1_0_1; }
	}

	public class GamlVarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GamlVarRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinitionFacetExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDefinitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * | DefReserved  | DefUnary| DefBinaryOp * / GamlVarRef:
		//	DefinitionFacetExpr | Definition;
		public ParserRule getRule() { return rule; }

		//DefinitionFacetExpr | Definition
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefinitionFacetExpr
		public RuleCall getDefinitionFacetExprParserRuleCall_0() { return cDefinitionFacetExprParserRuleCall_0; }

		//Definition
		public RuleCall getDefinitionParserRuleCall_1() { return cDefinitionParserRuleCall_1; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTEGERTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDoubleLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cColorLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueCOLORTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringLiteralAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cBooleanLiteralAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueBOOLEANTerminalRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		
		/// **
		// * Terminals
		// * / TerminalExpression:
		//	{IntLiteral} value=INTEGER | {DoubleLiteral} value=DOUBLE | {ColorLiteral} value=COLOR | {StringLiteral} value=STRING
		//	| {BooleanLiteral} value=BOOLEAN;
		public ParserRule getRule() { return rule; }

		//{IntLiteral} value=INTEGER | {DoubleLiteral} value=DOUBLE | {ColorLiteral} value=COLOR | {StringLiteral} value=STRING |
		//{BooleanLiteral} value=BOOLEAN
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntLiteral} value=INTEGER
		public Group getGroup_0() { return cGroup_0; }

		//{IntLiteral}
		public Action getIntLiteralAction_0_0() { return cIntLiteralAction_0_0; }

		//value=INTEGER
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//INTEGER
		public RuleCall getValueINTEGERTerminalRuleCall_0_1_0() { return cValueINTEGERTerminalRuleCall_0_1_0; }

		//{DoubleLiteral} value=DOUBLE
		public Group getGroup_1() { return cGroup_1; }

		//{DoubleLiteral}
		public Action getDoubleLiteralAction_1_0() { return cDoubleLiteralAction_1_0; }

		//value=DOUBLE
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_1_1_0() { return cValueDOUBLETerminalRuleCall_1_1_0; }

		//{ColorLiteral} value=COLOR
		public Group getGroup_2() { return cGroup_2; }

		//{ColorLiteral}
		public Action getColorLiteralAction_2_0() { return cColorLiteralAction_2_0; }

		//value=COLOR
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//COLOR
		public RuleCall getValueCOLORTerminalRuleCall_2_1_0() { return cValueCOLORTerminalRuleCall_2_1_0; }

		//{StringLiteral} value=STRING
		public Group getGroup_3() { return cGroup_3; }

		//{StringLiteral}
		public Action getStringLiteralAction_3_0() { return cStringLiteralAction_3_0; }

		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }

		//{BooleanLiteral} value=BOOLEAN
		public Group getGroup_4() { return cGroup_4; }

		//{BooleanLiteral}
		public Action getBooleanLiteralAction_4_0() { return cBooleanLiteralAction_4_0; }

		//value=BOOLEAN
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//BOOLEAN
		public RuleCall getValueBOOLEANTerminalRuleCall_4_1_0() { return cValueBOOLEANTerminalRuleCall_4_1_0; }
	}
	
	
	private ModelElements pModel;
	private ImportElements pImport;
	private BuiltInElements pBuiltIn;
	private StatementElements pStatement;
	private ClassicStatementElements pClassicStatement;
	private IfEvalElements pIfEval;
	private DefinitionElements pDefinition;
	private FacetRefElements pFacetRef;
	private GamlFacetRefElements pGamlFacetRef;
	private FunctionGamlFacetRefElements pFunctionGamlFacetRef;
	private FacetExprElements pFacetExpr;
	private DefinitionFacetExprElements pDefinitionFacetExpr;
	private NameFacetExprElements pNameFacetExpr;
	private ReturnsFacetExprElements pReturnsFacetExpr;
	private ActionFacetExprElements pActionFacetExpr;
	private FunctionFacetExprElements pFunctionFacetExpr;
	private BlockElements pBlock;
	private ExpressionElements pExpression;
	private TernExpElements pTernExp;
	private OrExpElements pOrExp;
	private AndExpElements pAndExp;
	private RelationalElements pRelational;
	private ArgPairExprElements pArgPairExpr;
	private PairExprElements pPairExpr;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private GamlBinaryExprElements pGamlBinaryExpr;
	private GamlUnitExprElements pGamlUnitExpr;
	private GamlUnaryExprElements pGamlUnaryExpr;
	private PrePrimaryExprElements pPrePrimaryExpr;
	private MemberRefElements pMemberRef;
	private PrimaryExpressionElements pPrimaryExpression;
	private AbstractRefElements pAbstractRef;
	private FunctionElements pFunction;
	private UnitNameElements pUnitName;
	private VariableRefElements pVariableRef;
	private GamlVarRefElements pGamlVarRef;
	private TerminalExpressionElements pTerminalExpression;
	private TerminalRule tINTEGER;
	private TerminalRule tBOOLEAN;
	private TerminalRule tID;
	private TerminalRule tCOLOR;
	private TerminalRule tDOUBLE;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public GamlGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Model:
	//	"model" name=ID imports+=Import* / * ('_gaml {' gaml=GamlLangDef '}')?* / statements+=Statement*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//// must be named importURI
	//Import:
	//	"import" importURI=STRING;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	/// **
	// * MetaGrammar: used to parse the tokens introduced automatically in the imports by GAMA (not used anymore)
	// * / //GamlLangDef: (b+=DefBinaryOp | r+=DefReserved | unaries+=DefUnary )+;
	////DefBinaryOp: '_binary &' name=ID'&;';
	////DefReserved: '_reserved &' name=ID'&;';
	////DefUnary: '_unary &'name=ID '&;';
	/// **
	// * Built-in keywords (corresponding to special statements)
	// * / BuiltIn:
	//	"write" | "warn" | "error" | "match" | "match_one" | "match_between" | "capture" | "release" | "ask" | "switch" |
	//	"create" | "add" | "remove" | "put" | "save" | "set" | "return";
	public BuiltInElements getBuiltInAccess() {
		return (pBuiltIn != null) ? pBuiltIn : (pBuiltIn = new BuiltInElements());
	}
	
	public ParserRule getBuiltInRule() {
		return getBuiltInAccess().getRule();
	}

	/// **
	// * Statements (i.e. commands in the GAML descriptions).
	// * / Statement:
	//	IfEval | ClassicStatement | Definition;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//ClassicStatement returns Statement:
	//	key=BuiltIn ref=GamlFacetRef? expr=Expression facets+=FacetExpr* (block=Block | ";");
	public ClassicStatementElements getClassicStatementAccess() {
		return (pClassicStatement != null) ? pClassicStatement : (pClassicStatement = new ClassicStatementElements());
	}
	
	public ParserRule getClassicStatementRule() {
		return getClassicStatementAccess().getRule();
	}

	//IfEval returns Statement:
	//	key="if" ref=GamlFacetRef? expr=Expression block=Block ("else" else=(Statement | Block))?;
	public IfEvalElements getIfEvalAccess() {
		return (pIfEval != null) ? pIfEval : (pIfEval = new IfEvalElements());
	}
	
	public ParserRule getIfEvalRule() {
		return getIfEvalAccess().getRule();
	}

	//Definition:
	//	key=ID name=(ID | STRING | BuiltIn)? facets+=FacetExpr* (block=Block | ";");
	public DefinitionElements getDefinitionAccess() {
		return (pDefinition != null) ? pDefinition : (pDefinition = new DefinitionElements());
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	/// **
	// * Facets
	// * / FacetRef:
	//	GamlFacetRef | FunctionGamlFacetRef;
	public FacetRefElements getFacetRefAccess() {
		return (pFacetRef != null) ? pFacetRef : (pFacetRef = new FacetRefElements());
	}
	
	public ParserRule getFacetRefRule() {
		return getFacetRefAccess().getRule();
	}

	//GamlFacetRef:
	//	ref=ID ":" | ref="<-";
	public GamlFacetRefElements getGamlFacetRefAccess() {
		return (pGamlFacetRef != null) ? pGamlFacetRef : (pGamlFacetRef = new GamlFacetRefElements());
	}
	
	public ParserRule getGamlFacetRefRule() {
		return getGamlFacetRefAccess().getRule();
	}

	//FunctionGamlFacetRef:
	//	ref="function" ":" | ref="->";
	public FunctionGamlFacetRefElements getFunctionGamlFacetRefAccess() {
		return (pFunctionGamlFacetRef != null) ? pFunctionGamlFacetRef : (pFunctionGamlFacetRef = new FunctionGamlFacetRefElements());
	}
	
	public ParserRule getFunctionGamlFacetRefRule() {
		return getFunctionGamlFacetRefAccess().getRule();
	}

	//FacetExpr:
	//	FunctionFacetExpr | DefinitionFacetExpr | key=GamlFacetRef expr=Expression;
	public FacetExprElements getFacetExprAccess() {
		return (pFacetExpr != null) ? pFacetExpr : (pFacetExpr = new FacetExprElements());
	}
	
	public ParserRule getFacetExprRule() {
		return getFacetExprAccess().getRule();
	}

	//DefinitionFacetExpr:
	//	ReturnsFacetExpr | NameFacetExpr | ActionFacetExpr;
	public DefinitionFacetExprElements getDefinitionFacetExprAccess() {
		return (pDefinitionFacetExpr != null) ? pDefinitionFacetExpr : (pDefinitionFacetExpr = new DefinitionFacetExprElements());
	}
	
	public ParserRule getDefinitionFacetExprRule() {
		return getDefinitionFacetExprAccess().getRule();
	}

	//NameFacetExpr:
	//	"name:" name=(ID | STRING | BuiltIn);
	public NameFacetExprElements getNameFacetExprAccess() {
		return (pNameFacetExpr != null) ? pNameFacetExpr : (pNameFacetExpr = new NameFacetExprElements());
	}
	
	public ParserRule getNameFacetExprRule() {
		return getNameFacetExprAccess().getRule();
	}

	//ReturnsFacetExpr:
	//	"returns:" name=ID;
	public ReturnsFacetExprElements getReturnsFacetExprAccess() {
		return (pReturnsFacetExpr != null) ? pReturnsFacetExpr : (pReturnsFacetExpr = new ReturnsFacetExprElements());
	}
	
	public ParserRule getReturnsFacetExprRule() {
		return getReturnsFacetExprAccess().getRule();
	}

	//ActionFacetExpr:
	//	"action:" name=(ID | STRING | BuiltIn);
	public ActionFacetExprElements getActionFacetExprAccess() {
		return (pActionFacetExpr != null) ? pActionFacetExpr : (pActionFacetExpr = new ActionFacetExprElements());
	}
	
	public ParserRule getActionFacetExprRule() {
		return getActionFacetExprAccess().getRule();
	}

	//// Introduce "closures" ? 
	//FunctionFacetExpr:
	//	key=FunctionGamlFacetRef "{" expr=Expression "}";
	public FunctionFacetExprElements getFunctionFacetExprAccess() {
		return (pFunctionFacetExpr != null) ? pFunctionFacetExpr : (pFunctionFacetExpr = new FunctionFacetExprElements());
	}
	
	public ParserRule getFunctionFacetExprRule() {
		return getFunctionFacetExprAccess().getRule();
	}

	/// **
	// * Blocks. Just an ordered list of statements inside curly brackets
	// * / Block:
	//	{Block} "{" statements+=Statement* "}";
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	/// **
	// * Expressions
	// * / Expression:
	//	TernExp;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//TernExp returns Expression:
	//	OrExp ({TernExp.left=current} op="?" right=OrExp ":" ifFalse=OrExp)?;
	public TernExpElements getTernExpAccess() {
		return (pTernExp != null) ? pTernExp : (pTernExp = new TernExpElements());
	}
	
	public ParserRule getTernExpRule() {
		return getTernExpAccess().getRule();
	}

	//OrExp returns Expression:
	//	AndExp ({Expression.left=current} op="or" right=AndExp)*;
	public OrExpElements getOrExpAccess() {
		return (pOrExp != null) ? pOrExp : (pOrExp = new OrExpElements());
	}
	
	public ParserRule getOrExpRule() {
		return getOrExpAccess().getRule();
	}

	//AndExp returns Expression:
	//	Relational ({Expression.left=current} op="and" right=Relational)*;
	public AndExpElements getAndExpAccess() {
		return (pAndExp != null) ? pAndExp : (pAndExp = new AndExpElements());
	}
	
	public ParserRule getAndExpRule() {
		return getAndExpAccess().getRule();
	}

	//Relational returns Expression:
	//	PairExpr (({Expression.left=current} op=("!=" | "=" | ">=" | "<=" | "<" | ">")) right=PairExpr)?;
	public RelationalElements getRelationalAccess() {
		return (pRelational != null) ? pRelational : (pRelational = new RelationalElements());
	}
	
	public ParserRule getRelationalRule() {
		return getRelationalAccess().getRule();
	}

	//ArgPairExpr returns PairExpr:
	//	{ArgPairExpr} arg=ID op="::" right=Addition;
	public ArgPairExprElements getArgPairExprAccess() {
		return (pArgPairExpr != null) ? pArgPairExpr : (pArgPairExpr = new ArgPairExprElements());
	}
	
	public ParserRule getArgPairExprRule() {
		return getArgPairExprAccess().getRule();
	}

	//PairExpr returns Expression:
	//	ArgPairExpr | Addition (({PairExpr.left=current} op="::") right=Addition)?;
	public PairExprElements getPairExprAccess() {
		return (pPairExpr != null) ? pPairExpr : (pPairExpr = new PairExprElements());
	}
	
	public ParserRule getPairExprRule() {
		return getPairExprAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication (({Expression.left=current} op=("+" | "-")) right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	GamlBinaryExpr (({Expression.left=current} op=("*" | "/" | "^")) right=GamlBinaryExpr)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//GamlBinaryExpr returns Expression:
	//	GamlUnitExpr (({GamlBinaryExpr.left=current} op=ID) right=GamlUnitExpr)*;
	public GamlBinaryExprElements getGamlBinaryExprAccess() {
		return (pGamlBinaryExpr != null) ? pGamlBinaryExpr : (pGamlBinaryExpr = new GamlBinaryExprElements());
	}
	
	public ParserRule getGamlBinaryExprRule() {
		return getGamlBinaryExprAccess().getRule();
	}

	//GamlUnitExpr returns Expression:
	//	GamlUnaryExpr (({GamlUnitExpr.left=current} op="#") right=UnitName)?;
	public GamlUnitExprElements getGamlUnitExprAccess() {
		return (pGamlUnitExpr != null) ? pGamlUnitExpr : (pGamlUnitExpr = new GamlUnitExprElements());
	}
	
	public ParserRule getGamlUnitExprRule() {
		return getGamlUnitExprAccess().getRule();
	}

	//GamlUnaryExpr returns Expression:
	//	PrePrimaryExpr | {GamlUnaryExpr} ({GamlUnaryExpr.left=current} op=("-" | "!" | "my" | "the" | "not")
	//	right=GamlUnaryExpr);
	public GamlUnaryExprElements getGamlUnaryExprAccess() {
		return (pGamlUnaryExpr != null) ? pGamlUnaryExpr : (pGamlUnaryExpr = new GamlUnaryExprElements());
	}
	
	public ParserRule getGamlUnaryExprRule() {
		return getGamlUnaryExprAccess().getRule();
	}

	//PrePrimaryExpr returns Expression:
	//	TerminalExpression | MemberRef;
	public PrePrimaryExprElements getPrePrimaryExprAccess() {
		return (pPrePrimaryExpr != null) ? pPrePrimaryExpr : (pPrePrimaryExpr = new PrePrimaryExprElements());
	}
	
	public ParserRule getPrePrimaryExprRule() {
		return getPrePrimaryExprAccess().getRule();
	}

	//MemberRef returns Expression:
	//	PrimaryExpression ({MemberRef.left=current} op="." right=VariableRef)*;
	public MemberRefElements getMemberRefAccess() {
		return (pMemberRef != null) ? pMemberRef : (pMemberRef = new MemberRefElements());
	}
	
	public ParserRule getMemberRefRule() {
		return getMemberRefAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	AbstractRef | "(" Expression ")" | "[" {Array} (exprs+=Expression ("," exprs+=Expression)*)? "]" | "{" {Point}
	//	(left=Expression op="," right=Expression) "}";
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//AbstractRef:
	//	VariableRef | Function;
	public AbstractRefElements getAbstractRefAccess() {
		return (pAbstractRef != null) ? pAbstractRef : (pAbstractRef = new AbstractRefElements());
	}
	
	public ParserRule getAbstractRefRule() {
		return getAbstractRefAccess().getRule();
	}

	//Function:
	//	{Function} (op=ID "(" args+=Expression ("," args+=Expression)* ")");
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	/// **
	// * Cross-references to variables/operators/units
	// * / UnitName returns Expression:
	//	{UnitName} op=ID;
	public UnitNameElements getUnitNameAccess() {
		return (pUnitName != null) ? pUnitName : (pUnitName = new UnitNameElements());
	}
	
	public ParserRule getUnitNameRule() {
		return getUnitNameAccess().getRule();
	}

	//VariableRef:
	//	{VariableRef} ref=[GamlVarRef];
	public VariableRefElements getVariableRefAccess() {
		return (pVariableRef != null) ? pVariableRef : (pVariableRef = new VariableRefElements());
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}

	/// * | DefReserved  | DefUnary| DefBinaryOp * / GamlVarRef:
	//	DefinitionFacetExpr | Definition;
	public GamlVarRefElements getGamlVarRefAccess() {
		return (pGamlVarRef != null) ? pGamlVarRef : (pGamlVarRef = new GamlVarRefElements());
	}
	
	public ParserRule getGamlVarRefRule() {
		return getGamlVarRefAccess().getRule();
	}

	/// **
	// * Terminals
	// * / TerminalExpression:
	//	{IntLiteral} value=INTEGER | {DoubleLiteral} value=DOUBLE | {ColorLiteral} value=COLOR | {StringLiteral} value=STRING
	//	| {BooleanLiteral} value=BOOLEAN;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//terminal INTEGER:
	//	"0" | "1".."9" "0".."9"*;
	public TerminalRule getINTEGERRule() {
		return (tINTEGER != null) ? tINTEGER : (tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER"));
	} 

	//terminal BOOLEAN:
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_" | "0".."9")+ ("$" ("a".."z" | "A".."Z" | "_" | "0".."9")+)?;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal COLOR:
	//	"#" ("0".."9" | "A".."F")+;
	public TerminalRule getCOLORRule() {
		return (tCOLOR != null) ? tCOLOR : (tCOLOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLOR"));
	} 

	//terminal DOUBLE:
	//	"1".."9" "0".."9"* ("." "0".."9"+)? (("E" | "e") ("+" | "-")? "0".."9"+)? | "0" ("." "0".."9"+)? (("E" | "e") ("+" |
	//	"-")? "0".."9"+)?;
	public TerminalRule getDOUBLERule() {
		return (tDOUBLE != null) ? tDOUBLE : (tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "u" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
