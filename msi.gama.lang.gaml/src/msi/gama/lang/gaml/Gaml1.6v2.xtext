grammar msi.gama.lang.gaml.Gaml hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate gaml "http://www.gama.msi/lang/gaml/Gaml"


Model:
	'model' name=ID (imports+=Import)* (statements+=Statement)* | {StringEvaluator} name=ID "<-" expr=Expression;

Import:
	'import' importURI=STRING; // must be named importURI
	

BuiltInStatementKey:
	//Statements that accept an expression as their "default" facet
	// FIXME : this is nonsense ! This list should not exist
	'add' |
	'ask' |
	'capture' |
	'create' |
	'draw' |
	'error'|
	'match' |
	'match_between' |
	'match_one' |
	'put' |
	'release' |
	'remove' |
	'save' |
	'set' |
	'switch'|
	'warn'|
	'write' |
	'display_population' |
	'display_grid' | 
	'using';

/**
 * Statements 
 */
Statement:
	AssignmentStatement | ( ReturnStatement | IfStatement  | ClassicStatement | DefinitionStatement  | Equation);

Equation returns Statement: function=Function key="=" expr=Expression ';';
 
IfStatement returns Statement:
	key='if' ('condition:')? expr=Expression block=Block (=> 'else' else=(IfStatement | Block))?;

ClassicStatement returns Statement:
	key=BuiltInStatementKey (ID':')? expr=Expression (facets+=Facet)* (block=Block | ';');

DefinitionStatement returns Statement:
	(key=ID) of=Contents? name=(ID | STRING | BuiltInStatementKey)? ('(' (args=ActionArguments |=> params=Parameters)?')')? (facets+=Facet)* (block=Block | ';');
	
	
Contents: ('<' type=ID (',' type2= ID)? '>');

ReturnStatement returns Statement:
	key='return' expr=Expression? ';';

AssignmentStatement returns Statement:
	=> (expr= Expression key=("<-"|"<<"|">>"|"+="|"-=" | "++" | "--")) value=Expression (facets+=Facet)*';';
	
Parameters: 
	 {Parameters} (params=ParameterList)? 
;
ActionArguments:
	args+=ArgumentDefinition (',' args+=ArgumentDefinition)*;

ArgumentDefinition:
		type=ID of=Contents? name=(ID|BuiltInStatementKey) ('<-' default=Expression)?
	;


/**
 * Facets
 */


Facet:
	FunctionFacet | ClassicFacet;

DefinitionFacetKey: "name:" | "returns:" | "action:" | "type:";
	

ClassicFacet returns Facet:
	((key=ID ':' | key='<-') expr=Expression) | ((=>key=DefinitionFacetKey) name=(ID | STRING | BuiltInStatementKey)) of=Contents?;

FunctionFacet returns Facet:
	(key='function:' | key='->') '{' expr=Expression '}';

/*
 * Definition facets (which are used for cross referencing variables)
 */
//DefinitionFacetKey: 'name:' | 'returns:';
//DefinitionFacet returns Facet:
//	(key=DefinitionFacetKey) name=(ID | STRING | BuiltInStatementKey);

/**
 * Blocks. An ordered list of statements inside curly brackets
 */
Block:
	{Block} '{' 
		( =>((function=Expression) '}')| ((statements+=Statement)* '}')) 
	;

	/**
 * Expressions
 */
Expression:
	ArgumentPair | Pair;
	
ArgumentPair:
	=>(op=(ID|BuiltInStatementKey) '::' | op=DefinitionFacetKey ':')? right=If
;

Pair returns Expression:
	If
	(
		(
		{Pair.left=current}
		op='::'
		)
		right=If
	)?;

If returns Expression:
	Or
	({If.left=current}
	op='?'
	right=Or
	':'
	ifFalse=Or)?;

Or returns Expression:
	And
	({Expression.left=current}
	op='or'
	right=And)*;

And returns Expression:
	Comparison
	({Expression.left=current}
	op='and'
	right=Comparison)*;

Comparison returns Expression:
	Addition
	(({Expression.left=current}
	op=('!=' | '=' | '>=' | '<=' | '<' | '>'))
	right=Addition)?;

Addition returns Expression:
	Multiplication
	(({Expression.left=current} op=('+' | '-'))
	right=Multiplication)*;

Multiplication returns Expression:
	Binary 
	(({Expression.left=current} op=('*' | '/' | '^')) right=Binary)*;

Binary returns Expression:
	Unit
	(({Binary.left=current} op=ID) right=Unit)*;

// NEW: Units can now be expressed using the "¡" symbol (in addition to "#")
Unit returns Expression:
	Unary
	(({Unit.left=current} op=('¡')) right=UnitName)?;

Unary returns Expression:
	Access |
	{Unary} ((op='¡' right=UnitName) | (op=('-' | '!' | 'my' | 'the' | 'not')
	right=Unary));
	
		
Access returns Expression:
	Dot (({Access.left=current} '[') args=ExpressionList ']')*;

Dot returns Expression:
	Primary ({Dot.left=current} (op='.' right=Primary))*;

Primary returns Expression:
	TerminalExpression |
	AbstractRef | 
	'(' Expression ')' | 
	'(' {Parameters} (params = ParameterList)? ')'|
	'[' {Array} exprs=ExpressionList? ']' | 
	'{' {Point} left=Expression op=',' right=Expression (',' z=Expression)? '}';

AbstractRef returns Expression:
	VariableRef | Function;

Function returns Expression :
	{Function} op=ID '(' args = ExpressionList ')';

Parameter returns Expression: {Parameter} ((builtInFacetKey=DefinitionFacetKey) | (left=VariableRef ':')) right=Expression;

ExpressionList: exprs+=Expression (',' exprs+=Expression)*;
ParameterList returns ExpressionList: exprs+=Parameter (',' exprs+=Parameter)*;


UnitName returns Expression:
	{UnitName} op=ID;

VariableRef:
	{VariableRef} ref=[GamlVarRef];
	
GamlVarRef:
	ClassicFacet | DefinitionStatement ;

/**
 * Terminals
 */
TerminalExpression:
	{IntLiteral} op=INTEGER | {DoubleLiteral} op=DOUBLE | {ColorLiteral} op=COLOR | {StringLiteral} op=STRING
	| {BooleanLiteral} op=BOOLEAN;

terminal INTEGER:
	'0' | ('1'..'9' ('0'..'9')*);

terminal BOOLEAN:
	'true' | 'false';

terminal ID:
	('a'..'z' | 'A'..'Z' | '_' | '$') ('a'..'z' | 'A'..'Z' | '_' | '$' | '0'..'9')*;

terminal COLOR:
	'#' ('0'..'9' | 'A'..'F')+;

terminal DOUBLE:
	'1'..'9' ('0'..'9')* ('.' '0'..'9'+)? (('E' | 'e') ('+' | '-')? '0'..'9'+)? | '0' ('.' '0'..'9'+)? (('E' | 'e') ('+' |
	'-')? '0'..'9'+)?;

terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | '\\') | !('\\' | '"'))* '"' | "'" ('\\' ('b' | 't' | 'n' | 'f' |
	'r' | 'u' | "'" | '\\') | !('\\' | "'"))* "'";

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

terminal WS:
	(' ' | '\t' | '\r' | '\n')+;

terminal ANY_OTHER:
	.;
