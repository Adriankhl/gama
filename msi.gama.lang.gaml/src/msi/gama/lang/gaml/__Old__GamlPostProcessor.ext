process(xtext::GeneratedMetamodel this):
   process(ePackage)
;

process(ecore::EPackage this):
   eClassifiers.process()
;

process(ecore::EClass this):
 switch(name)
      {
      case "Facet": injectStructuralFeature(this, createAttribute("gamlDoc", org::eclipse::emf::ecore::EcorePackage::eINSTANCE.getEClassifier("EInt")))
      case "Model": injectStructuralFeature(this, createAttribute("gamlDoc", org::eclipse::emf::ecore::EcorePackage::eINSTANCE.getEClassifier("EInt")))
      case "Expression": injectStructuralFeature(this, createAttribute("gamlDoc", org::eclipse::emf::ecore::EcorePackage::eINSTANCE.getEClassifier("EInt")))
      case "Statement": injectStructuralFeature(this, createAttribute("gamlDoc", org::eclipse::emf::ecore::EcorePackage::eINSTANCE.getEClassifier("EInt")))
      default:
         {
         //Do nothing.
         }
      }
;


/**
 * Add feature only if is not already existing.
 */
injectStructuralFeature(ecore::EClass this, ecore::EStructuralFeature struct):
   if(this.getEStructuralFeature(struct.name)) == null
      then
   this.eStructuralFeatures.add(struct)->
   this
;

createAttribute(String name, ecore::EClassifier type):
   let attr = new ecore::EAttribute :
      attr.setName(name)->
      attr.setEType(type)->
      attr.setUpperBound(1)->
      attr.setLowerBound(0)-> //The feature is not mandatory.
      attr
;