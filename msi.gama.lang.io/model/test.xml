<?xml version="1.0" encoding="UTF-8"?>
<model name="ants">
	<global>
		<var type="float" name="evaporation_rate" init="0.1" min="0.01"
			max="1" parameter="'Evaporation Rate:'" />
		<var type="float" name="diffusion_rate" init="0.5"
			min="0" max="1" const="true" parameter="'Diffusion Rate:'" />
		<var type="int" const="true" name="gridsize" init="75" />
		<var type="int" const="true" name="ants_number" init="100" min="10"
			max="200" parameter="'Number of Ants:'" />
		<var name="food_remaining" type="int"
			value="(ant_grid count (each.food &gt; 0))" init="10" />
		<var type="point" const="true" name="center"
			init="[int((gridsize / 2)), int((gridsize / 2))]" />
		<var type="matrix" const="true" name="types"
			init="file('../images/environment75x75_scarce.pgm')" />
		<reflex name="stop">
			<if condition="((food_remaining &lt; 1) or (time &gt; 1500))">
				<do action="halt" />
			</if>
		</reflex>
		<init>
			<create species="ant" number="ants_number">
				<set var="location" value="center" />
			</create>
		</init>
	</global>
	<environment width="gridsize" height="gridsize">
		<grid name="ant_grid" width="gridsize" height="gridsize"
			neighbours="8">
			<var type="bool" const="true" name="multiagent" init="true" />
			<var type="int" const="true" name="type" init="(types at [grid_x, grid_y])" />
			<var type="bool" const="true" name="isNestLocation"
				init="((self distance_to center) &lt; 4)" />
			<var type="bool" const="true" name="isFoodLocation" init="(type=2)" />
			<var name="color" type="rgb"
				init="[((road &gt; 15)?255:(isNestLocation?125:0)), (road * 30), ((road &gt; 15)?255:(food * 50))]" />
			<var name="food" type="int" init="(isFoodLocation?5:0)" />
			<var type="int" const="true" name="nest"
				init="(300 - (self distance_to center))" />
		</grid>
	</environment>
	<entities>
		<species name="ant" skills="moving, visible">
			<var type="rgb" const="true" name="color" init="'red'" />
			<var name="place" type="ant_grid" value="(location as ant_grid)" />
			<var name="shape" type="string" init="'dot'" />
			<var name="hasFood" type="bool" init="false" />
			<var name="road" type="signal" value="(hasFood?240:0)" decay="evaporation_rate"
				proportion="diffusion_rate" environment="ant_grid" />
			<var name="hasRoad" type="bool" init="false" value="(place.road &gt; 0.05)" />
			<reflex name="wandering"
				when="(((! hasFood) and (! hasRoad)) and (place.food=0))">
				<do action="wander">
					<arg name="amplitude" type="int" value="120" />
				</do>
			</reflex>
			<reflex name="looking" when="(((! hasFood) and hasRoad) and (place.food=0))">
				<let var="list_places" value="place.neighbours" />
				<let var="goal" value="(list_places first_with (each.food &gt; 0))" />
				<if condition="(goal != nil)">
					<set var="location" value="goal" />
					<else>
						<let var="min_nest" value="(list_places min_of each.nest)" />
						<set var="list_places"
							value="(list_places sort ((each.nest=min_nest)?each.road:0.0))" />
						<set var="location" value="(point last list_places)" />
					</else>
				</if>
			</reflex>
			<reflex name="taking" when="((! hasFood) and (place.food &gt; 0))">
				<set var="shape" value="'dot'" />
				<set var="hasFood" value="true" />
				<set var="place.food" value="(place.food - 1)" />
			</reflex>
			<reflex name="homing" when="(hasFood and (! place.isNestLocation))">
				<do action="goto">
					<arg name="target" type="ant_grid" value="center" />
				</do>
			</reflex>
			<reflex name="dropping" when="(hasFood and place.isNestLocation)">
				<set var="hasFood" value="false" />
				<set var="shape" value="'circle'" />
				<set var="heading" value="(heading - 180)" />
			</reflex>
		</species>
	</entities>
	<output>
		<display name="Ants" refresh_every="2">
			<grid name="ant_grid" />
			<species name="ant" />
		</display>
	</output>
</model>
