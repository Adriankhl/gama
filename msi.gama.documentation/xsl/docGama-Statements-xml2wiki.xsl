<?xml version="1.0" encoding="UTF-8"?><!---->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:wiki="www.google.fr">

<xsl:template match="/">
 	<xsl:text>#summary Statements (Developer Guide)
 	
&lt;font color="red"&gt; This file is automatically generated from java files. Do Not Edit It. &lt;/font&gt;

= &lt;font color="blue"&gt; Table of Contents &lt;/font&gt; =

&lt;wiki:toc max_depth="1" /&gt;

= &lt;font color="blue"&gt; General syntax &lt;/font&gt; =

A statement is a keyword, followed by specific attributes, some of them mandatory (in bold), some of them optional. One of the attribute names can be ommitted (the one that is omissible in the sequel). It has to be the first one.

{{{
statement_keyword expression1 attribute2: expression2 ... ;
or
statement_keyword attribute1: expression1 attribute2: expression2 ...; 
}}}

If the statement encloses other statements, they are declared between curly brakets, as in:

{{{
statement_keyword1 expression1 attribute2: expression2... {
     statement_keyword2 expression1 attribute2: expression2...;  
     statement_keyword3 expression1 attribute2: expression2...;
}
}}}

[#Table_of_Contents Top of the page] 
	</xsl:text>

	<xsl:for-each select="doc/statements/statement">
    	<xsl:sort select="@name" />
= &lt;font color="blue"&gt; <xsl:value-of select="@name"/> &lt;/font&gt; = 	
		<xsl:call-template name="buildAttributes"/>
		<xsl:call-template name="buildDefinition"/>		
	</xsl:for-each>

</xsl:template>

    
 	<xsl:template name="buildAttributes"> 
== Facets ==
		<xsl:for-each select="facets/facet">
		<xsl:sort select="@omissible" order="descending"/>
		<xsl:sort select="@optional"/>		
		<xsl:sort select="@name" />  
  		<xsl:choose>
  			<xsl:when test="@optional = 'false'">  
  * *<xsl:value-of select="@name"/>* </xsl:when>
  			<xsl:otherwise>
  * <xsl:value-of select="@name"/>
  			</xsl:otherwise>
  		</xsl:choose>
  		<xsl:if test="@omissible = 'true'"> (omissible) </xsl:if>
		</xsl:for-each>
	</xsl:template>

 	<xsl:template name="buildDefinition"> 
== Definition == 

[#Table_of_Contents Top of the page] 
	</xsl:template>
  
</xsl:stylesheet>
